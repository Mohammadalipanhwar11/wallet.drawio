//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Wallet`.
    static let wallet = _R.storyboard.wallet()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Wallet", bundle: ...)`
    static func wallet(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.wallet)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 26 colors.
  struct color {
    /// Color `alabaster`.
    static let alabaster = Rswift.ColorResource(bundle: R.hostingBundle, name: "alabaster")
    /// Color `alto`.
    static let alto = Rswift.ColorResource(bundle: R.hostingBundle, name: "alto")
    /// Color `azure_hover`.
    static let azure_hover = Rswift.ColorResource(bundle: R.hostingBundle, name: "azure_hover")
    /// Color `azure_sending`.
    static let azure_sending = Rswift.ColorResource(bundle: R.hostingBundle, name: "azure_sending")
    /// Color `azure`.
    static let azure = Rswift.ColorResource(bundle: R.hostingBundle, name: "azure")
    /// Color `black`.
    static let black = Rswift.ColorResource(bundle: R.hostingBundle, name: "black")
    /// Color `cerulean`.
    static let cerulean = Rswift.ColorResource(bundle: R.hostingBundle, name: "cerulean")
    /// Color `cod`.
    static let cod = Rswift.ColorResource(bundle: R.hostingBundle, name: "cod")
    /// Color `concrete`.
    static let concrete = Rswift.ColorResource(bundle: R.hostingBundle, name: "concrete")
    /// Color `danger`.
    static let danger = Rswift.ColorResource(bundle: R.hostingBundle, name: "danger")
    /// Color `dove`.
    static let dove = Rswift.ColorResource(bundle: R.hostingBundle, name: "dove")
    /// Color `dusty`.
    static let dusty = Rswift.ColorResource(bundle: R.hostingBundle, name: "dusty")
    /// Color `emerald`.
    static let emerald = Rswift.ColorResource(bundle: R.hostingBundle, name: "emerald")
    /// Color `green_hover`.
    static let green_hover = Rswift.ColorResource(bundle: R.hostingBundle, name: "green_hover")
    /// Color `green`.
    static let green = Rswift.ColorResource(bundle: R.hostingBundle, name: "green")
    /// Color `indigo`.
    static let indigo = Rswift.ColorResource(bundle: R.hostingBundle, name: "indigo")
    /// Color `loadingBackground`.
    static let loadingBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "loadingBackground")
    /// Color `mercury`.
    static let mercury = Rswift.ColorResource(bundle: R.hostingBundle, name: "mercury")
    /// Color `mike`.
    static let mike = Rswift.ColorResource(bundle: R.hostingBundle, name: "mike")
    /// Color `mine`.
    static let mine = Rswift.ColorResource(bundle: R.hostingBundle, name: "mine")
    /// Color `pumpkin`.
    static let pumpkin = Rswift.ColorResource(bundle: R.hostingBundle, name: "pumpkin")
    /// Color `radical`.
    static let radical = Rswift.ColorResource(bundle: R.hostingBundle, name: "radical")
    /// Color `silver`.
    static let silver = Rswift.ColorResource(bundle: R.hostingBundle, name: "silver")
    /// Color `solitude`.
    static let solitude = Rswift.ColorResource(bundle: R.hostingBundle, name: "solitude")
    /// Color `venus`.
    static let venus = Rswift.ColorResource(bundle: R.hostingBundle, name: "venus")
    /// Color `white`.
    static let white = Rswift.ColorResource(bundle: R.hostingBundle, name: "white")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "alabaster", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func alabaster(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.alabaster, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "alto", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func alto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.alto, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "azure", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func azure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.azure, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "azure_hover", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func azure_hover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.azure_hover, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "azure_sending", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func azure_sending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.azure_sending, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cerulean", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cerulean(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cerulean, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cod", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cod(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cod, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "concrete", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func concrete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.concrete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "danger", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func danger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.danger, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "dove", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func dove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.dove, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "dusty", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func dusty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.dusty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "emerald", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func emerald(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.emerald, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green_hover", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green_hover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green_hover, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "indigo", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func indigo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.indigo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "loadingBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func loadingBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.loadingBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mercury", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mercury(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mercury, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mike", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mine", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "pumpkin", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func pumpkin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.pumpkin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "radical", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func radical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.radical, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "silver", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func silver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.silver, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "solitude", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func solitude(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.solitude, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "venus", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func venus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.venus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "white", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.white, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "alabaster", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func alabaster(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.alabaster.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "alto", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func alto(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.alto.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "azure", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func azure(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.azure.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "azure_hover", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func azure_hover(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.azure_hover.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "azure_sending", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func azure_sending(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.azure_sending.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "black", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func black(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.black.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cerulean", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cerulean(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cerulean.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cod", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cod(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cod.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "concrete", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func concrete(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.concrete.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "danger", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func danger(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.danger.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "dove", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func dove(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.dove.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "dusty", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func dusty(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.dusty.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "emerald", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func emerald(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.emerald.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green_hover", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green_hover(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green_hover.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "indigo", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func indigo(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.indigo.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "loadingBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func loadingBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.loadingBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mercury", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mercury(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mercury.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mike", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mike(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mike.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mine", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mine(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mine.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "pumpkin", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func pumpkin(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.pumpkin.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "radical", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func radical(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.radical.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "silver", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func silver(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.silver.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "solitude", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func solitude(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.solitude.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "venus", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func venus(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.venus.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "white", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func white(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.white.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 4 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"
    static let comAppleDeveloperDefaultDataProtection = infoPlistString(path: [], key: "com.apple.developer.default-data-protection") ?? "NSFileProtectionComplete"

    struct comAppleDeveloperAssociatedDomains {
      static let applinksAppAwalletIo = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:app.awallet.io") ?? "applinks:app.awallet.io"
      static let applinksAwApp = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:aw.app") ?? "applinks:aw.app"
      static let applinksBinanceAwApp = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:binance.aw.app") ?? "applinks:binance.aw.app"
      static let applinksCallistoAwApp = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:callisto.aw.app") ?? "applinks:callisto.aw.app"
      static let applinksClassicAwApp = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:classic.aw.app") ?? "applinks:classic.aw.app"
      static let applinksCustomAwApp = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:custom.aw.app") ?? "applinks:custom.aw.app"
      static let applinksGoerliAwApp = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:goerli.aw.app") ?? "applinks:goerli.aw.app"
      static let applinksKovanAwApp = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:kovan.aw.app") ?? "applinks:kovan.aw.app"
      static let applinksPoaAwApp = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:poa.aw.app") ?? "applinks:poa.aw.app"
      static let applinksRinkebyAwApp = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:rinkeby.aw.app") ?? "applinks:rinkeby.aw.app"
      static let applinksRopstenAwApp = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:ropsten.aw.app") ?? "applinks:ropsten.aw.app"
      static let applinksSokolAwApp = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:sokol.aw.app") ?? "applinks:sokol.aw.app"
      static let applinksTestBinanceAwApp = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:test-binance.aw.app") ?? "applinks:test-binance.aw.app"
      static let applinksXdaiAwApp = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:xdai.aw.app") ?? "applinks:xdai.aw.app"

      fileprivate init() {}
    }

    struct comAppleSecurityApplicationGroups {
      static let groupComStormbirdAlphawallet = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.com.stormbird.alphawallet") ?? "group.com.stormbird.alphawallet"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 36 files.
  struct file {
    /// Resource file `BrowserStorageSubscription.js`.
    static let browserStorageSubscriptionJs = Rswift.FileResource(bundle: R.hostingBundle, name: "BrowserStorageSubscription", pathExtension: "js")
    /// Resource file `COMODO ECC Domain Validation Secure Server CA 2.cer`.
    static let comodoeccDomainValidationSecureServerCA2Cer = Rswift.FileResource(bundle: R.hostingBundle, name: "COMODO ECC Domain Validation Secure Server CA 2", pathExtension: "cer")
    /// Resource file `DAI.tsml`.
    static let daiTsml = Rswift.FileResource(bundle: R.hostingBundle, name: "DAI", pathExtension: "tsml")
    /// Resource file `ERC1155.json`.
    static let erc1155Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ERC1155", pathExtension: "json")
    /// Resource file `ERC20-TokenScript.tsml`.
    static let erc20TokenScriptTsml = Rswift.FileResource(bundle: R.hostingBundle, name: "ERC20-TokenScript", pathExtension: "tsml")
    /// Resource file `ERC20.json`.
    static let erc20Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ERC20", pathExtension: "json")
    /// Resource file `ERC721-TokenScript.tsml`.
    static let erc721TokenScriptTsml = Rswift.FileResource(bundle: R.hostingBundle, name: "ERC721-TokenScript", pathExtension: "tsml")
    /// Resource file `ETH.tsml`.
    static let ethTsml = Rswift.FileResource(bundle: R.hostingBundle, name: "ETH", pathExtension: "tsml")
    /// Resource file `EnjinOauth.graphql`.
    static let enjinOauthGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "EnjinOauth", pathExtension: "graphql")
    /// Resource file `EnjinToken.graphql`.
    static let enjinTokenGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "EnjinToken", pathExtension: "graphql")
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `SIL Open Font License.txt`.
    static let silOpenFontLicenseTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "SIL Open Font License", pathExtension: "txt")
    /// Resource file `SourceSansPro-Bold.otf`.
    static let sourceSansProBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-Bold", pathExtension: "otf")
    /// Resource file `SourceSansPro-Italic.ttf`.
    static let sourceSansProItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-Italic", pathExtension: "ttf")
    /// Resource file `SourceSansPro-Light.otf`.
    static let sourceSansProLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-Light", pathExtension: "otf")
    /// Resource file `SourceSansPro-Regular.otf`.
    static let sourceSansProRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-Regular", pathExtension: "otf")
    /// Resource file `SourceSansPro-Semibold.otf`.
    static let sourceSansProSemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-Semibold", pathExtension: "otf")
    /// Resource file `WebImage`.
    static let webImage = Rswift.FileResource(bundle: R.hostingBundle, name: "WebImage", pathExtension: "")
    /// Resource file `XDAI-bridge.tsml`.
    static let xdaiBridgeTsml = Rswift.FileResource(bundle: R.hostingBundle, name: "XDAI-bridge", pathExtension: "tsml")
    /// Resource file `aETH.tsml`.
    static let aETHTsml = Rswift.FileResource(bundle: R.hostingBundle, name: "aETH", pathExtension: "tsml")
    /// Resource file `chains.zip`.
    static let chainsZip = Rswift.FileResource(bundle: R.hostingBundle, name: "chains", pathExtension: "zip")
    /// Resource file `config.js`.
    static let configJs = Rswift.FileResource(bundle: R.hostingBundle, name: "config", pathExtension: "js")
    /// Resource file `content.js`.
    static let contentJs = Rswift.FileResource(bundle: R.hostingBundle, name: "content", pathExtension: "js")
    /// Resource file `helpers.js`.
    static let helpersJs = Rswift.FileResource(bundle: R.hostingBundle, name: "helpers", pathExtension: "js")
    /// Resource file `howDoIGetMyMoneyInfo.html`.
    static let howDoIGetMyMoneyInfoHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "howDoIGetMyMoneyInfo", pathExtension: "html")
    /// Resource file `howDoITransferETHIntoMyWalletInfo.html`.
    static let howDoITransferETHIntoMyWalletInfoHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "howDoITransferETHIntoMyWalletInfo", pathExtension: "html")
    /// Resource file `known_contract.json`.
    static let known_contractJson = Rswift.FileResource(bundle: R.hostingBundle, name: "known_contract", pathExtension: "json")
    /// Resource file `non_asset_catalog_redemption_location.png`.
    static let non_asset_catalog_redemption_locationPng = Rswift.FileResource(bundle: R.hostingBundle, name: "non_asset_catalog_redemption_location", pathExtension: "png")
    /// Resource file `non_asset_catalog_redemption_location@2x.png`.
    static let non_asset_catalog_redemption_location2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "non_asset_catalog_redemption_location@2x", pathExtension: "png")
    /// Resource file `non_asset_catalog_redemption_location@3x.png`.
    static let non_asset_catalog_redemption_location3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "non_asset_catalog_redemption_location@3x", pathExtension: "png")
    /// Resource file `privacyPolicy.html`.
    static let privacyPolicyHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "privacyPolicy", pathExtension: "html")
    /// Resource file `redeemInfo.html`.
    static let redeemInfoHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "redeemInfo", pathExtension: "html")
    /// Resource file `schema.json`.
    static let schemaJson = Rswift.FileResource(bundle: R.hostingBundle, name: "schema", pathExtension: "json")
    /// Resource file `sellInfo.html`.
    static let sellInfoHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "sellInfo", pathExtension: "html")
    /// Resource file `termsOfService.html`.
    static let termsOfServiceHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "termsOfService", pathExtension: "html")
    /// Resource file `whatIsEthereumInfo.html`.
    static let whatIsEthereumInfoHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "whatIsEthereumInfo", pathExtension: "html")

    /// `bundle.url(forResource: "BrowserStorageSubscription", withExtension: "js")`
    static func browserStorageSubscriptionJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.browserStorageSubscriptionJs
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "COMODO ECC Domain Validation Secure Server CA 2", withExtension: "cer")`
    static func comodoeccDomainValidationSecureServerCA2Cer(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comodoeccDomainValidationSecureServerCA2Cer
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "DAI", withExtension: "tsml")`
    static func daiTsml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.daiTsml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ERC1155", withExtension: "json")`
    static func erc1155Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.erc1155Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ERC20", withExtension: "json")`
    static func erc20Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.erc20Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ERC20-TokenScript", withExtension: "tsml")`
    static func erc20TokenScriptTsml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.erc20TokenScriptTsml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ERC721-TokenScript", withExtension: "tsml")`
    static func erc721TokenScriptTsml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.erc721TokenScriptTsml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ETH", withExtension: "tsml")`
    static func ethTsml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ethTsml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "EnjinOauth", withExtension: "graphql")`
    static func enjinOauthGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.enjinOauthGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "EnjinToken", withExtension: "graphql")`
    static func enjinTokenGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.enjinTokenGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SIL Open Font License", withExtension: "txt")`
    static func silOpenFontLicenseTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.silOpenFontLicenseTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SourceSansPro-Bold", withExtension: "otf")`
    static func sourceSansProBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SourceSansPro-Italic", withExtension: "ttf")`
    static func sourceSansProItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SourceSansPro-Light", withExtension: "otf")`
    static func sourceSansProLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SourceSansPro-Regular", withExtension: "otf")`
    static func sourceSansProRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SourceSansPro-Semibold", withExtension: "otf")`
    static func sourceSansProSemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProSemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "WebImage", withExtension: "")`
    static func webImage(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.webImage
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "XDAI-bridge", withExtension: "tsml")`
    static func xdaiBridgeTsml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.xdaiBridgeTsml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "aETH", withExtension: "tsml")`
    static func aETHTsml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aETHTsml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "chains", withExtension: "zip")`
    static func chainsZip(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.chainsZip
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "config", withExtension: "js")`
    static func configJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configJs
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "content", withExtension: "js")`
    static func contentJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.contentJs
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "helpers", withExtension: "js")`
    static func helpersJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helpersJs
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "howDoIGetMyMoneyInfo", withExtension: "html")`
    static func howDoIGetMyMoneyInfoHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.howDoIGetMyMoneyInfoHtml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "howDoITransferETHIntoMyWalletInfo", withExtension: "html")`
    static func howDoITransferETHIntoMyWalletInfoHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.howDoITransferETHIntoMyWalletInfoHtml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "known_contract", withExtension: "json")`
    static func known_contractJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.known_contractJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "non_asset_catalog_redemption_location", withExtension: "png")`
    static func non_asset_catalog_redemption_locationPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.non_asset_catalog_redemption_locationPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "non_asset_catalog_redemption_location@2x", withExtension: "png")`
    static func non_asset_catalog_redemption_location2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.non_asset_catalog_redemption_location2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "non_asset_catalog_redemption_location@3x", withExtension: "png")`
    static func non_asset_catalog_redemption_location3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.non_asset_catalog_redemption_location3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "privacyPolicy", withExtension: "html")`
    static func privacyPolicyHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.privacyPolicyHtml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "redeemInfo", withExtension: "html")`
    static func redeemInfoHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.redeemInfoHtml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "schema", withExtension: "json")`
    static func schemaJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.schemaJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sellInfo", withExtension: "html")`
    static func sellInfoHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sellInfoHtml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "termsOfService", withExtension: "html")`
    static func termsOfServiceHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.termsOfServiceHtml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "whatIsEthereumInfo", withExtension: "html")`
    static func whatIsEthereumInfoHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.whatIsEthereumInfoHtml
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 5 fonts.
  struct font: Rswift.Validatable {
    /// Font `SourceSansPro-Bold`.
    static let sourceSansProBold = Rswift.FontResource(fontName: "SourceSansPro-Bold")
    /// Font `SourceSansPro-Italic`.
    static let sourceSansProItalic = Rswift.FontResource(fontName: "SourceSansPro-Italic")
    /// Font `SourceSansPro-Light`.
    static let sourceSansProLight = Rswift.FontResource(fontName: "SourceSansPro-Light")
    /// Font `SourceSansPro-Regular`.
    static let sourceSansProRegular = Rswift.FontResource(fontName: "SourceSansPro-Regular")
    /// Font `SourceSansPro-Semibold`.
    static let sourceSansProSemibold = Rswift.FontResource(fontName: "SourceSansPro-Semibold")

    /// `UIFont(name: "SourceSansPro-Bold", size: ...)`
    static func sourceSansProBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProBold, size: size)
    }

    /// `UIFont(name: "SourceSansPro-Italic", size: ...)`
    static func sourceSansProItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProItalic, size: size)
    }

    /// `UIFont(name: "SourceSansPro-Light", size: ...)`
    static func sourceSansProLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProLight, size: size)
    }

    /// `UIFont(name: "SourceSansPro-Regular", size: ...)`
    static func sourceSansProRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProRegular, size: size)
    }

    /// `UIFont(name: "SourceSansPro-Semibold", size: ...)`
    static func sourceSansProSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProSemibold, size: size)
    }

    static func validate() throws {
      if R.font.sourceSansProBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-Bold' could not be loaded, is 'SourceSansPro-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-Italic' could not be loaded, is 'SourceSansPro-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-Light' could not be loaded, is 'SourceSansPro-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-Regular' could not be loaded, is 'SourceSansPro-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-Semibold' could not be loaded, is 'SourceSansPro-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 222 images.
  struct image {
    /// Image `HT-HECO mainnet`.
    static let hthecoMainnet = Rswift.ImageResource(bundle: R.hostingBundle, name: "HT-HECO mainnet")
    /// Image `HT-HECO testnet`.
    static let hthecoTestnet = Rswift.ImageResource(bundle: R.hostingBundle, name: "HT-HECO testnet")
    /// Image `activities_empty_list`.
    static let activities_empty_list = Rswift.ImageResource(bundle: R.hostingBundle, name: "activities_empty_list")
    /// Image `activityFailed`.
    static let activityFailed = Rswift.ImageResource(bundle: R.hostingBundle, name: "activityFailed")
    /// Image `activityPending`.
    static let activityPending = Rswift.ImageResource(bundle: R.hostingBundle, name: "activityPending")
    /// Image `activityReceive`.
    static let activityReceive = Rswift.ImageResource(bundle: R.hostingBundle, name: "activityReceive")
    /// Image `activitySend`.
    static let activitySend = Rswift.ImageResource(bundle: R.hostingBundle, name: "activitySend")
    /// Image `add_hide_tokens`.
    static let add_hide_tokens = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_hide_tokens")
    /// Image `arbitrum`.
    static let arbitrum = Rswift.ImageResource(bundle: R.hostingBundle, name: "arbitrum")
    /// Image `awLogoSmall`.
    static let awLogoSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "awLogoSmall")
    /// Image `backWhite`.
    static let backWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "backWhite")
    /// Image `backupCircle`.
    static let backupCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "backupCircle")
    /// Image `biometric-lock`.
    static let biometricLock = Rswift.ImageResource(bundle: R.hostingBundle, name: "biometric-lock")
    /// Image `biometrics`.
    static let biometrics = Rswift.ImageResource(bundle: R.hostingBundle, name: "biometrics")
    /// Image `browse`.
    static let browse = Rswift.ImageResource(bundle: R.hostingBundle, name: "browse")
    /// Image `calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar")
    /// Image `category`.
    static let category = Rswift.ImageResource(bundle: R.hostingBundle, name: "category")
    /// Image `changeWallet`.
    static let changeWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "changeWallet")
    /// Image `chevron-down`.
    static let chevronDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevron-down")
    /// Image `chevron-right`.
    static let chevronRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevron-right")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `conversionDaiSai`.
    static let conversionDaiSai = Rswift.ImageResource(bundle: R.hostingBundle, name: "conversionDaiSai")
    /// Image `cooldown`.
    static let cooldown = Rswift.ImageResource(bundle: R.hostingBundle, name: "cooldown")
    /// Image `copy`.
    static let copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "copy")
    /// Image `developerMode`.
    static let developerMode = Rswift.ImageResource(bundle: R.hostingBundle, name: "developerMode")
    /// Image `error`.
    static let error = Rswift.ImageResource(bundle: R.hostingBundle, name: "error")
    /// Image `eth-small`.
    static let ethSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "eth-small")
    /// Image `eth`.
    static let eth = Rswift.ImageResource(bundle: R.hostingBundle, name: "eth")
    /// Image `expandMore`.
    static let expandMore = Rswift.ImageResource(bundle: R.hostingBundle, name: "expandMore")
    /// Image `expand`.
    static let expand = Rswift.ImageResource(bundle: R.hostingBundle, name: "expand")
    /// Image `gasWarning`.
    static let gasWarning = Rswift.ImageResource(bundle: R.hostingBundle, name: "gasWarning")
    /// Image `generation`.
    static let generation = Rswift.ImageResource(bundle: R.hostingBundle, name: "generation")
    /// Image `glasses`.
    static let glasses = Rswift.ImageResource(bundle: R.hostingBundle, name: "glasses")
    /// Image `group`.
    static let group = Rswift.ImageResource(bundle: R.hostingBundle, name: "group")
    /// Image `hd-introduction`.
    static let hdIntroduction = Rswift.ImageResource(bundle: R.hostingBundle, name: "hd-introduction")
    /// Image `hideToken`.
    static let hideToken = Rswift.ImageResource(bundle: R.hostingBundle, name: "hideToken")
    /// Image `history`.
    static let history = Rswift.ImageResource(bundle: R.hostingBundle, name: "history")
    /// Image `icons-network-arbitrum`.
    static let iconsNetworkArbitrum = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-network-arbitrum")
    /// Image `icons-network-artis`.
    static let iconsNetworkArtis = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-network-artis")
    /// Image `icons-network-avalanche`.
    static let iconsNetworkAvalanche = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-network-avalanche")
    /// Image `icons-network-bsc`.
    static let iconsNetworkBsc = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-network-bsc")
    /// Image `icons-network-callisto`.
    static let iconsNetworkCallisto = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-network-callisto")
    /// Image `icons-network-etc`.
    static let iconsNetworkEtc = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-network-etc")
    /// Image `icons-network-eth`.
    static let iconsNetworkEth = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-network-eth")
    /// Image `icons-network-fantom`.
    static let iconsNetworkFantom = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-network-fantom")
    /// Image `icons-network-heco`.
    static let iconsNetworkHeco = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-network-heco")
    /// Image `icons-network-optimism`.
    static let iconsNetworkOptimism = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-network-optimism")
    /// Image `icons-network-palm`.
    static let iconsNetworkPalm = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-network-palm")
    /// Image `icons-network-poa`.
    static let iconsNetworkPoa = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-network-poa")
    /// Image `icons-network-polygon`.
    static let iconsNetworkPolygon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-network-polygon")
    /// Image `icons-network-xdai`.
    static let iconsNetworkXdai = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-network-xdai")
    /// Image `icons-settings-eden`.
    static let iconsSettingsEden = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-settings-eden")
    /// Image `icons-settings-ethermine`.
    static let iconsSettingsEthermine = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-settings-ethermine")
    /// Image `icons-system-arrow-right`.
    static let iconsSystemArrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-system-arrow-right")
    /// Image `icons-tokens-a-0-x`.
    static let iconsTokensA0X = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-0-x")
    /// Image `icons-tokens-a-aave`.
    static let iconsTokensAAave = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-aave")
    /// Image `icons-tokens-a-bat`.
    static let iconsTokensABat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-bat")
    /// Image `icons-tokens-a-busd`.
    static let iconsTokensABusd = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-busd")
    /// Image `icons-tokens-a-dai`.
    static let iconsTokensADai = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-dai")
    /// Image `icons-tokens-a-enj`.
    static let iconsTokensAEnj = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-enj")
    /// Image `icons-tokens-a-knc`.
    static let iconsTokensAKnc = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-knc")
    /// Image `icons-tokens-a-lend`.
    static let iconsTokensALend = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-lend")
    /// Image `icons-tokens-a-link`.
    static let iconsTokensALink = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-link")
    /// Image `icons-tokens-a-mana`.
    static let iconsTokensAMana = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-mana")
    /// Image `icons-tokens-a-mkr`.
    static let iconsTokensAMkr = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-mkr")
    /// Image `icons-tokens-a-rep`.
    static let iconsTokensARep = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-rep")
    /// Image `icons-tokens-a-sai`.
    static let iconsTokensASai = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-sai")
    /// Image `icons-tokens-a-snx`.
    static let iconsTokensASnx = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-snx")
    /// Image `icons-tokens-a-susd`.
    static let iconsTokensASusd = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-susd")
    /// Image `icons-tokens-a-tusd`.
    static let iconsTokensATusd = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-tusd")
    /// Image `icons-tokens-a-uni-link-eth`.
    static let iconsTokensAUniLinkEth = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-uni-link-eth")
    /// Image `icons-tokens-a-usdc`.
    static let iconsTokensAUsdc = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-usdc")
    /// Image `icons-tokens-a-usdt`.
    static let iconsTokensAUsdt = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-usdt")
    /// Image `icons-tokens-a-wbtc`.
    static let iconsTokensAWbtc = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-wbtc")
    /// Image `icons-tokens-a-weth`.
    static let iconsTokensAWeth = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-weth")
    /// Image `icons-tokens-a-yfi`.
    static let iconsTokensAYfi = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-a-yfi")
    /// Image `icons-tokens-palm`.
    static let iconsTokensPalm = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons-tokens-palm")
    /// Image `iconsCheckmark`.
    static let iconsCheckmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsCheckmark")
    /// Image `iconsIllustrationsAlert2`.
    static let iconsIllustrationsAlert2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsIllustrationsAlert2")
    /// Image `iconsIllustrationsAnalytics`.
    static let iconsIllustrationsAnalytics = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsIllustrationsAnalytics")
    /// Image `iconsIllustrationsEmptyWalletConnect`.
    static let iconsIllustrationsEmptyWalletConnect = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsIllustrationsEmptyWalletConnect")
    /// Image `iconsIllustrationsSearchResults`.
    static let iconsIllustrationsSearchResults = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsIllustrationsSearchResults")
    /// Image `iconsSettingsDiscord`.
    static let iconsSettingsDiscord = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSettingsDiscord")
    /// Image `iconsSettingsDisplayedEns`.
    static let iconsSettingsDisplayedEns = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSettingsDisplayedEns")
    /// Image `iconsSettingsEmail`.
    static let iconsSettingsEmail = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSettingsEmail")
    /// Image `iconsSettingsGithub`.
    static let iconsSettingsGithub = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSettingsGithub")
    /// Image `iconsSettingsJson`.
    static let iconsSettingsJson = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSettingsJson")
    /// Image `iconsSettingsSeed2`.
    static let iconsSettingsSeed2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSettingsSeed2")
    /// Image `iconsSettingsWalletConnect`.
    static let iconsSettingsWalletConnect = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSettingsWalletConnect")
    /// Image `iconsSystemAddBorderCircle`.
    static let iconsSystemAddBorderCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSystemAddBorderCircle")
    /// Image `iconsSystemBorderCircle`.
    static let iconsSystemBorderCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSystemBorderCircle")
    /// Image `iconsSystemCircleMinue`.
    static let iconsSystemCircleMinue = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSystemCircleMinue")
    /// Image `iconsSystemDown`.
    static let iconsSystemDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSystemDown")
    /// Image `iconsSystemExpandMore`.
    static let iconsSystemExpandMore = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSystemExpandMore")
    /// Image `iconsSystemGrid`.
    static let iconsSystemGrid = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSystemGrid")
    /// Image `iconsSystemHome`.
    static let iconsSystemHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSystemHome")
    /// Image `iconsSystemList`.
    static let iconsSystemList = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSystemList")
    /// Image `iconsSystemPlus`.
    static let iconsSystemPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSystemPlus")
    /// Image `iconsSystemUp`.
    static let iconsSystemUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsSystemUp")
    /// Image `iconsTokensAvalanche`.
    static let iconsTokensAvalanche = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsTokensAvalanche")
    /// Image `iconsTokensEthereumTestnet`.
    static let iconsTokensEthereumTestnet = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsTokensEthereumTestnet")
    /// Image `iconsTokensFantom`.
    static let iconsTokensFantom = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsTokensFantom")
    /// Image `iconsTokensOptimisticKovan`.
    static let iconsTokensOptimisticKovan = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsTokensOptimisticKovan")
    /// Image `iconsTokensOptimistic`.
    static let iconsTokensOptimistic = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsTokensOptimistic")
    /// Image `iconsTokensPlaceholder`.
    static let iconsTokensPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsTokensPlaceholder")
    /// Image `iconsTokensPolygon`.
    static let iconsTokensPolygon = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsTokensPolygon")
    /// Image `import_options`.
    static let import_options = Rswift.ImageResource(bundle: R.hostingBundle, name: "import_options")
    /// Image `info_accessory`.
    static let info_accessory = Rswift.ImageResource(bundle: R.hostingBundle, name: "info_accessory")
    /// Image `keystore-introduction`.
    static let keystoreIntroduction = Rswift.ImageResource(bundle: R.hostingBundle, name: "keystore-introduction")
    /// Image `launch_icon`.
    static let launch_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_icon")
    /// Image `light`.
    static let light = Rswift.ImageResource(bundle: R.hostingBundle, name: "light")
    /// Image `location`.
    static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "location")
    /// Image `mascot_happy`.
    static let mascot_happy = Rswift.ImageResource(bundle: R.hostingBundle, name: "mascot_happy")
    /// Image `more`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "more")
    /// Image `myDapps`.
    static let myDapps = Rswift.ImageResource(bundle: R.hostingBundle, name: "myDapps")
    /// Image `networksCircle`.
    static let networksCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "networksCircle")
    /// Image `no_transactions_mascot`.
    static let no_transactions_mascot = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_transactions_mascot")
    /// Image `non_asset_catalog_redemption_location`.
    static let non_asset_catalog_redemption_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "non_asset_catalog_redemption_location")
    /// Image `not_expand`.
    static let not_expand = Rswift.ImageResource(bundle: R.hostingBundle, name: "not_expand")
    /// Image `notificationsCircle`.
    static let notificationsCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "notificationsCircle")
    /// Image `onboarding_1`.
    static let onboarding_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_1")
    /// Image `onboarding_2`.
    static let onboarding_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_2")
    /// Image `onboarding_3`.
    static let onboarding_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_3")
    /// Image `onboarding_complete`.
    static let onboarding_complete = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_complete")
    /// Image `onboarding_contact`.
    static let onboarding_contact = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_contact")
    /// Image `onboarding_failed`.
    static let onboarding_failed = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_failed")
    /// Image `onboarding_lock`.
    static let onboarding_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_lock")
    /// Image `openSeaNonFungibleAttribute`.
    static let openSeaNonFungibleAttribute = Rswift.ImageResource(bundle: R.hostingBundle, name: "openSeaNonFungibleAttribute")
    /// Image `openSeaNonFungibleButtonArrow`.
    static let openSeaNonFungibleButtonArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "openSeaNonFungibleButtonArrow")
    /// Image `oval`.
    static let oval = Rswift.ImageResource(bundle: R.hostingBundle, name: "oval")
    /// Image `pending`.
    static let pending = Rswift.ImageResource(bundle: R.hostingBundle, name: "pending")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `price_down`.
    static let price_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "price_down")
    /// Image `price_up`.
    static let price_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "price_up")
    /// Image `qrRoundedWhite`.
    static let qrRoundedWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrRoundedWhite")
    /// Image `qrRounded`.
    static let qrRounded = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrRounded")
    /// Image `qr_code_icon`.
    static let qr_code_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "qr_code_icon")
    /// Image `received`.
    static let received = Rswift.ImageResource(bundle: R.hostingBundle, name: "received")
    /// Image `sent`.
    static let sent = Rswift.ImageResource(bundle: R.hostingBundle, name: "sent")
    /// Image `settings_analytics`.
    static let settings_analytics = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_analytics")
    /// Image `settings_clear_dapp_cache`.
    static let settings_clear_dapp_cache = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_clear_dapp_cache")
    /// Image `settings_console`.
    static let settings_console = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_console")
    /// Image `settings_currency`.
    static let settings_currency = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_currency")
    /// Image `settings_facebook`.
    static let settings_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_facebook")
    /// Image `settings_faq`.
    static let settings_faq = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_faq")
    /// Image `settings_icon`.
    static let settings_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_icon")
    /// Image `settings_language`.
    static let settings_language = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_language")
    /// Image `settings_reddit`.
    static let settings_reddit = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_reddit")
    /// Image `settings_telegram`.
    static let settings_telegram = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_telegram")
    /// Image `settings_tokenscript_overrides`.
    static let settings_tokenscript_overrides = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_tokenscript_overrides")
    /// Image `settings_twitter`.
    static let settings_twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_twitter")
    /// Image `settings_wallet_backup`.
    static let settings_wallet_backup = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_wallet_backup")
    /// Image `showSeedPhraseIntroduction`.
    static let showSeedPhraseIntroduction = Rswift.ImageResource(bundle: R.hostingBundle, name: "showSeedPhraseIntroduction")
    /// Image `statement`.
    static let statement = Rswift.ImageResource(bundle: R.hostingBundle, name: "statement")
    /// Image `successOverlay`.
    static let successOverlay = Rswift.ImageResource(bundle: R.hostingBundle, name: "successOverlay")
    /// Image `support`.
    static let support = Rswift.ImageResource(bundle: R.hostingBundle, name: "support")
    /// Image `tab_browser`.
    static let tab_browser = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_browser")
    /// Image `tab_settings`.
    static let tab_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_settings")
    /// Image `tab_transactions`.
    static let tab_transactions = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_transactions")
    /// Image `tab_wallet`.
    static let tab_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_wallet")
    /// Image `ticket_bundle_checked`.
    static let ticket_bundle_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ticket_bundle_checked")
    /// Image `ticket_bundle_unchecked`.
    static let ticket_bundle_unchecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ticket_bundle_unchecked")
    /// Image `ticket`.
    static let ticket = Rswift.ImageResource(bundle: R.hostingBundle, name: "ticket")
    /// Image `time`.
    static let time = Rswift.ImageResource(bundle: R.hostingBundle, name: "time")
    /// Image `toggle-password`.
    static let togglePassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "toggle-password")
    /// Image `token-artis`.
    static let tokenArtis = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-artis")
    /// Image `token-bnb`.
    static let tokenBnb = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-bnb")
    /// Image `token-callisto`.
    static let tokenCallisto = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-callisto")
    /// Image `token-cdai`.
    static let tokenCdai = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-cdai")
    /// Image `token-cofi`.
    static let tokenCofi = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-cofi")
    /// Image `token-cofix`.
    static let tokenCofix = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-cofix")
    /// Image `token-dai`.
    static let tokenDai = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-dai")
    /// Image `token-eos`.
    static let tokenEos = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-eos")
    /// Image `token-etc`.
    static let tokenEtc = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-etc")
    /// Image `token-idai`.
    static let tokenIdai = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-idai")
    /// Image `token-link`.
    static let tokenLink = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-link")
    /// Image `token-nest`.
    static let tokenNest = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-nest")
    /// Image `token-pbtc`.
    static let tokenPbtc = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-pbtc")
    /// Image `token-pdai`.
    static let tokenPdai = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-pdai")
    /// Image `token-peos`.
    static let tokenPeos = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-peos")
    /// Image `token-peth`.
    static let tokenPeth = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-peth")
    /// Image `token-pltc`.
    static let tokenPltc = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-pltc")
    /// Image `token-poa`.
    static let tokenPoa = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-poa")
    /// Image `token-psai`.
    static let tokenPsai = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-psai")
    /// Image `token-pusdt`.
    static let tokenPusdt = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-pusdt")
    /// Image `token-sada`.
    static let tokenSada = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-sada")
    /// Image `token-saud`.
    static let tokenSaud = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-saud")
    /// Image `token-sbtc`.
    static let tokenSbtc = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-sbtc")
    /// Image `token-schf`.
    static let tokenSchf = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-schf")
    /// Image `token-sdefi`.
    static let tokenSdefi = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-sdefi")
    /// Image `token-seth`.
    static let tokenSeth = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-seth")
    /// Image `token-seur`.
    static let tokenSeur = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-seur")
    /// Image `token-sgbp`.
    static let tokenSgbp = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-sgbp")
    /// Image `token-sjpy`.
    static let tokenSjpy = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-sjpy")
    /// Image `token-slink`.
    static let tokenSlink = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-slink")
    /// Image `token-sltc`.
    static let tokenSltc = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-sltc")
    /// Image `token-snikkei`.
    static let tokenSnikkei = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-snikkei")
    /// Image `token-susd`.
    static let tokenSusd = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-susd")
    /// Image `token-sxau`.
    static let tokenSxau = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-sxau")
    /// Image `token-sxmr`.
    static let tokenSxmr = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-sxmr")
    /// Image `token-sxtz`.
    static let tokenSxtz = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-sxtz")
    /// Image `token-teo`.
    static let tokenTeo = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-teo")
    /// Image `token-usdc`.
    static let tokenUsdc = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-usdc")
    /// Image `token-wbtc`.
    static let tokenWbtc = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-wbtc")
    /// Image `token-weth`.
    static let tokenWeth = Rswift.ImageResource(bundle: R.hostingBundle, name: "token-weth")
    /// Image `tokenPlaceholderLarge`.
    static let tokenPlaceholderLarge = Rswift.ImageResource(bundle: R.hostingBundle, name: "tokenPlaceholderLarge")
    /// Image `toolbar-back`.
    static let toolbarBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-back")
    /// Image `toolbar-forward`.
    static let toolbarForward = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-forward")
    /// Image `toolbar-menu`.
    static let toolbarMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-menu")
    /// Image `transaction-accessory`.
    static let transactionAccessory = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction-accessory")
    /// Image `transaction_error`.
    static let transaction_error = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_error")
    /// Image `transaction_pending`.
    static let transaction_pending = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_pending")
    /// Image `unverified`.
    static let unverified = Rswift.ImageResource(bundle: R.hostingBundle, name: "unverified")
    /// Image `usaFlag`.
    static let usaFlag = Rswift.ImageResource(bundle: R.hostingBundle, name: "usaFlag")
    /// Image `verified`.
    static let verified = Rswift.ImageResource(bundle: R.hostingBundle, name: "verified")
    /// Image `walletAddress`.
    static let walletAddress = Rswift.ImageResource(bundle: R.hostingBundle, name: "walletAddress")
    /// Image `walletConnect-icon`.
    static let walletConnectIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "walletConnect-icon")
    /// Image `wallet_security_green_bar`.
    static let wallet_security_green_bar = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_security_green_bar")
    /// Image `wallet_security_orange_bar`.
    static let wallet_security_orange_bar = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_security_orange_bar")
    /// Image `wallet_security_red_bar`.
    static let wallet_security_red_bar = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_security_red_bar")
    /// Image `white`.
    static let white = Rswift.ImageResource(bundle: R.hostingBundle, name: "white")
    /// Image `xDai`.
    static let xDai = Rswift.ImageResource(bundle: R.hostingBundle, name: "xDai")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HT-HECO mainnet", bundle: ..., traitCollection: ...)`
    static func hthecoMainnet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hthecoMainnet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HT-HECO testnet", bundle: ..., traitCollection: ...)`
    static func hthecoTestnet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hthecoTestnet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "activities_empty_list", bundle: ..., traitCollection: ...)`
    static func activities_empty_list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.activities_empty_list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "activityFailed", bundle: ..., traitCollection: ...)`
    static func activityFailed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.activityFailed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "activityPending", bundle: ..., traitCollection: ...)`
    static func activityPending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.activityPending, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "activityReceive", bundle: ..., traitCollection: ...)`
    static func activityReceive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.activityReceive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "activitySend", bundle: ..., traitCollection: ...)`
    static func activitySend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.activitySend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_hide_tokens", bundle: ..., traitCollection: ...)`
    static func add_hide_tokens(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_hide_tokens, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arbitrum", bundle: ..., traitCollection: ...)`
    static func arbitrum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arbitrum, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "awLogoSmall", bundle: ..., traitCollection: ...)`
    static func awLogoSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.awLogoSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backWhite", bundle: ..., traitCollection: ...)`
    static func backWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backupCircle", bundle: ..., traitCollection: ...)`
    static func backupCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backupCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "biometric-lock", bundle: ..., traitCollection: ...)`
    static func biometricLock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.biometricLock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "biometrics", bundle: ..., traitCollection: ...)`
    static func biometrics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.biometrics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "browse", bundle: ..., traitCollection: ...)`
    static func browse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "category", bundle: ..., traitCollection: ...)`
    static func category(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.category, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "changeWallet", bundle: ..., traitCollection: ...)`
    static func changeWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changeWallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevron-down", bundle: ..., traitCollection: ...)`
    static func chevronDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevron-right", bundle: ..., traitCollection: ...)`
    static func chevronRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "conversionDaiSai", bundle: ..., traitCollection: ...)`
    static func conversionDaiSai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.conversionDaiSai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cooldown", bundle: ..., traitCollection: ...)`
    static func cooldown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cooldown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "copy", bundle: ..., traitCollection: ...)`
    static func copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.copy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "developerMode", bundle: ..., traitCollection: ...)`
    static func developerMode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.developerMode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "error", bundle: ..., traitCollection: ...)`
    static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eth", bundle: ..., traitCollection: ...)`
    static func eth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eth-small", bundle: ..., traitCollection: ...)`
    static func ethSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ethSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "expand", bundle: ..., traitCollection: ...)`
    static func expand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.expand, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "expandMore", bundle: ..., traitCollection: ...)`
    static func expandMore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.expandMore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gasWarning", bundle: ..., traitCollection: ...)`
    static func gasWarning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gasWarning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "generation", bundle: ..., traitCollection: ...)`
    static func generation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "glasses", bundle: ..., traitCollection: ...)`
    static func glasses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.glasses, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group", bundle: ..., traitCollection: ...)`
    static func group(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hd-introduction", bundle: ..., traitCollection: ...)`
    static func hdIntroduction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hdIntroduction, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hideToken", bundle: ..., traitCollection: ...)`
    static func hideToken(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hideToken, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "history", bundle: ..., traitCollection: ...)`
    static func history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-network-arbitrum", bundle: ..., traitCollection: ...)`
    static func iconsNetworkArbitrum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsNetworkArbitrum, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-network-artis", bundle: ..., traitCollection: ...)`
    static func iconsNetworkArtis(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsNetworkArtis, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-network-avalanche", bundle: ..., traitCollection: ...)`
    static func iconsNetworkAvalanche(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsNetworkAvalanche, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-network-bsc", bundle: ..., traitCollection: ...)`
    static func iconsNetworkBsc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsNetworkBsc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-network-callisto", bundle: ..., traitCollection: ...)`
    static func iconsNetworkCallisto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsNetworkCallisto, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-network-etc", bundle: ..., traitCollection: ...)`
    static func iconsNetworkEtc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsNetworkEtc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-network-eth", bundle: ..., traitCollection: ...)`
    static func iconsNetworkEth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsNetworkEth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-network-fantom", bundle: ..., traitCollection: ...)`
    static func iconsNetworkFantom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsNetworkFantom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-network-heco", bundle: ..., traitCollection: ...)`
    static func iconsNetworkHeco(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsNetworkHeco, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-network-optimism", bundle: ..., traitCollection: ...)`
    static func iconsNetworkOptimism(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsNetworkOptimism, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-network-palm", bundle: ..., traitCollection: ...)`
    static func iconsNetworkPalm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsNetworkPalm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-network-poa", bundle: ..., traitCollection: ...)`
    static func iconsNetworkPoa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsNetworkPoa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-network-polygon", bundle: ..., traitCollection: ...)`
    static func iconsNetworkPolygon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsNetworkPolygon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-network-xdai", bundle: ..., traitCollection: ...)`
    static func iconsNetworkXdai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsNetworkXdai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-settings-eden", bundle: ..., traitCollection: ...)`
    static func iconsSettingsEden(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSettingsEden, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-settings-ethermine", bundle: ..., traitCollection: ...)`
    static func iconsSettingsEthermine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSettingsEthermine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-system-arrow-right", bundle: ..., traitCollection: ...)`
    static func iconsSystemArrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSystemArrowRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-0-x", bundle: ..., traitCollection: ...)`
    static func iconsTokensA0X(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensA0X, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-aave", bundle: ..., traitCollection: ...)`
    static func iconsTokensAAave(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensAAave, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-bat", bundle: ..., traitCollection: ...)`
    static func iconsTokensABat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensABat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-busd", bundle: ..., traitCollection: ...)`
    static func iconsTokensABusd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensABusd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-dai", bundle: ..., traitCollection: ...)`
    static func iconsTokensADai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensADai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-enj", bundle: ..., traitCollection: ...)`
    static func iconsTokensAEnj(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensAEnj, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-knc", bundle: ..., traitCollection: ...)`
    static func iconsTokensAKnc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensAKnc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-lend", bundle: ..., traitCollection: ...)`
    static func iconsTokensALend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensALend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-link", bundle: ..., traitCollection: ...)`
    static func iconsTokensALink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensALink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-mana", bundle: ..., traitCollection: ...)`
    static func iconsTokensAMana(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensAMana, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-mkr", bundle: ..., traitCollection: ...)`
    static func iconsTokensAMkr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensAMkr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-rep", bundle: ..., traitCollection: ...)`
    static func iconsTokensARep(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensARep, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-sai", bundle: ..., traitCollection: ...)`
    static func iconsTokensASai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensASai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-snx", bundle: ..., traitCollection: ...)`
    static func iconsTokensASnx(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensASnx, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-susd", bundle: ..., traitCollection: ...)`
    static func iconsTokensASusd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensASusd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-tusd", bundle: ..., traitCollection: ...)`
    static func iconsTokensATusd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensATusd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-uni-link-eth", bundle: ..., traitCollection: ...)`
    static func iconsTokensAUniLinkEth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensAUniLinkEth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-usdc", bundle: ..., traitCollection: ...)`
    static func iconsTokensAUsdc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensAUsdc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-usdt", bundle: ..., traitCollection: ...)`
    static func iconsTokensAUsdt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensAUsdt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-wbtc", bundle: ..., traitCollection: ...)`
    static func iconsTokensAWbtc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensAWbtc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-weth", bundle: ..., traitCollection: ...)`
    static func iconsTokensAWeth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensAWeth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-a-yfi", bundle: ..., traitCollection: ...)`
    static func iconsTokensAYfi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensAYfi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons-tokens-palm", bundle: ..., traitCollection: ...)`
    static func iconsTokensPalm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensPalm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsCheckmark", bundle: ..., traitCollection: ...)`
    static func iconsCheckmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsCheckmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsIllustrationsAlert2", bundle: ..., traitCollection: ...)`
    static func iconsIllustrationsAlert2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsIllustrationsAlert2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsIllustrationsAnalytics", bundle: ..., traitCollection: ...)`
    static func iconsIllustrationsAnalytics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsIllustrationsAnalytics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsIllustrationsEmptyWalletConnect", bundle: ..., traitCollection: ...)`
    static func iconsIllustrationsEmptyWalletConnect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsIllustrationsEmptyWalletConnect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsIllustrationsSearchResults", bundle: ..., traitCollection: ...)`
    static func iconsIllustrationsSearchResults(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsIllustrationsSearchResults, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSettingsDiscord", bundle: ..., traitCollection: ...)`
    static func iconsSettingsDiscord(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSettingsDiscord, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSettingsDisplayedEns", bundle: ..., traitCollection: ...)`
    static func iconsSettingsDisplayedEns(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSettingsDisplayedEns, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSettingsEmail", bundle: ..., traitCollection: ...)`
    static func iconsSettingsEmail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSettingsEmail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSettingsGithub", bundle: ..., traitCollection: ...)`
    static func iconsSettingsGithub(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSettingsGithub, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSettingsJson", bundle: ..., traitCollection: ...)`
    static func iconsSettingsJson(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSettingsJson, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSettingsSeed2", bundle: ..., traitCollection: ...)`
    static func iconsSettingsSeed2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSettingsSeed2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSettingsWalletConnect", bundle: ..., traitCollection: ...)`
    static func iconsSettingsWalletConnect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSettingsWalletConnect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSystemAddBorderCircle", bundle: ..., traitCollection: ...)`
    static func iconsSystemAddBorderCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSystemAddBorderCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSystemBorderCircle", bundle: ..., traitCollection: ...)`
    static func iconsSystemBorderCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSystemBorderCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSystemCircleMinue", bundle: ..., traitCollection: ...)`
    static func iconsSystemCircleMinue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSystemCircleMinue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSystemDown", bundle: ..., traitCollection: ...)`
    static func iconsSystemDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSystemDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSystemExpandMore", bundle: ..., traitCollection: ...)`
    static func iconsSystemExpandMore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSystemExpandMore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSystemGrid", bundle: ..., traitCollection: ...)`
    static func iconsSystemGrid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSystemGrid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSystemHome", bundle: ..., traitCollection: ...)`
    static func iconsSystemHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSystemHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSystemList", bundle: ..., traitCollection: ...)`
    static func iconsSystemList(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSystemList, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSystemPlus", bundle: ..., traitCollection: ...)`
    static func iconsSystemPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSystemPlus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsSystemUp", bundle: ..., traitCollection: ...)`
    static func iconsSystemUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsSystemUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsTokensAvalanche", bundle: ..., traitCollection: ...)`
    static func iconsTokensAvalanche(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensAvalanche, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsTokensEthereumTestnet", bundle: ..., traitCollection: ...)`
    static func iconsTokensEthereumTestnet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensEthereumTestnet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsTokensFantom", bundle: ..., traitCollection: ...)`
    static func iconsTokensFantom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensFantom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsTokensOptimistic", bundle: ..., traitCollection: ...)`
    static func iconsTokensOptimistic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensOptimistic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsTokensOptimisticKovan", bundle: ..., traitCollection: ...)`
    static func iconsTokensOptimisticKovan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensOptimisticKovan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsTokensPlaceholder", bundle: ..., traitCollection: ...)`
    static func iconsTokensPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsTokensPolygon", bundle: ..., traitCollection: ...)`
    static func iconsTokensPolygon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsTokensPolygon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "import_options", bundle: ..., traitCollection: ...)`
    static func import_options(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.import_options, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "info_accessory", bundle: ..., traitCollection: ...)`
    static func info_accessory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info_accessory, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "keystore-introduction", bundle: ..., traitCollection: ...)`
    static func keystoreIntroduction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.keystoreIntroduction, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch_icon", bundle: ..., traitCollection: ...)`
    static func launch_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light", bundle: ..., traitCollection: ...)`
    static func light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location", bundle: ..., traitCollection: ...)`
    static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mascot_happy", bundle: ..., traitCollection: ...)`
    static func mascot_happy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mascot_happy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "more", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myDapps", bundle: ..., traitCollection: ...)`
    static func myDapps(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myDapps, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "networksCircle", bundle: ..., traitCollection: ...)`
    static func networksCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.networksCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_transactions_mascot", bundle: ..., traitCollection: ...)`
    static func no_transactions_mascot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_transactions_mascot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "non_asset_catalog_redemption_location", bundle: ..., traitCollection: ...)`
    static func non_asset_catalog_redemption_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.non_asset_catalog_redemption_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "not_expand", bundle: ..., traitCollection: ...)`
    static func not_expand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.not_expand, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notificationsCircle", bundle: ..., traitCollection: ...)`
    static func notificationsCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationsCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_1", bundle: ..., traitCollection: ...)`
    static func onboarding_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_2", bundle: ..., traitCollection: ...)`
    static func onboarding_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_3", bundle: ..., traitCollection: ...)`
    static func onboarding_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_complete", bundle: ..., traitCollection: ...)`
    static func onboarding_complete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_complete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_contact", bundle: ..., traitCollection: ...)`
    static func onboarding_contact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_contact, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_failed", bundle: ..., traitCollection: ...)`
    static func onboarding_failed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_failed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding_lock", bundle: ..., traitCollection: ...)`
    static func onboarding_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_lock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "openSeaNonFungibleAttribute", bundle: ..., traitCollection: ...)`
    static func openSeaNonFungibleAttribute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.openSeaNonFungibleAttribute, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "openSeaNonFungibleButtonArrow", bundle: ..., traitCollection: ...)`
    static func openSeaNonFungibleButtonArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.openSeaNonFungibleButtonArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "oval", bundle: ..., traitCollection: ...)`
    static func oval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.oval, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pending", bundle: ..., traitCollection: ...)`
    static func pending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pending, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "price_down", bundle: ..., traitCollection: ...)`
    static func price_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.price_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "price_up", bundle: ..., traitCollection: ...)`
    static func price_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.price_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrRounded", bundle: ..., traitCollection: ...)`
    static func qrRounded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrRounded, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrRoundedWhite", bundle: ..., traitCollection: ...)`
    static func qrRoundedWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrRoundedWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qr_code_icon", bundle: ..., traitCollection: ...)`
    static func qr_code_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qr_code_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "received", bundle: ..., traitCollection: ...)`
    static func received(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.received, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sent", bundle: ..., traitCollection: ...)`
    static func sent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_analytics", bundle: ..., traitCollection: ...)`
    static func settings_analytics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_analytics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_clear_dapp_cache", bundle: ..., traitCollection: ...)`
    static func settings_clear_dapp_cache(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_clear_dapp_cache, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_console", bundle: ..., traitCollection: ...)`
    static func settings_console(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_console, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_currency", bundle: ..., traitCollection: ...)`
    static func settings_currency(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_currency, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_facebook", bundle: ..., traitCollection: ...)`
    static func settings_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_faq", bundle: ..., traitCollection: ...)`
    static func settings_faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_faq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_icon", bundle: ..., traitCollection: ...)`
    static func settings_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_language", bundle: ..., traitCollection: ...)`
    static func settings_language(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_language, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_reddit", bundle: ..., traitCollection: ...)`
    static func settings_reddit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_reddit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_telegram", bundle: ..., traitCollection: ...)`
    static func settings_telegram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_telegram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_tokenscript_overrides", bundle: ..., traitCollection: ...)`
    static func settings_tokenscript_overrides(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_tokenscript_overrides, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_twitter", bundle: ..., traitCollection: ...)`
    static func settings_twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_twitter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_wallet_backup", bundle: ..., traitCollection: ...)`
    static func settings_wallet_backup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_wallet_backup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "showSeedPhraseIntroduction", bundle: ..., traitCollection: ...)`
    static func showSeedPhraseIntroduction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.showSeedPhraseIntroduction, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "statement", bundle: ..., traitCollection: ...)`
    static func statement(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statement, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "successOverlay", bundle: ..., traitCollection: ...)`
    static func successOverlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.successOverlay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "support", bundle: ..., traitCollection: ...)`
    static func support(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.support, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_browser", bundle: ..., traitCollection: ...)`
    static func tab_browser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_browser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_settings", bundle: ..., traitCollection: ...)`
    static func tab_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_transactions", bundle: ..., traitCollection: ...)`
    static func tab_transactions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_transactions, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_wallet", bundle: ..., traitCollection: ...)`
    static func tab_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ticket", bundle: ..., traitCollection: ...)`
    static func ticket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ticket, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ticket_bundle_checked", bundle: ..., traitCollection: ...)`
    static func ticket_bundle_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ticket_bundle_checked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ticket_bundle_unchecked", bundle: ..., traitCollection: ...)`
    static func ticket_bundle_unchecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ticket_bundle_unchecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "time", bundle: ..., traitCollection: ...)`
    static func time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.time, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toggle-password", bundle: ..., traitCollection: ...)`
    static func togglePassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.togglePassword, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-artis", bundle: ..., traitCollection: ...)`
    static func tokenArtis(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenArtis, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-bnb", bundle: ..., traitCollection: ...)`
    static func tokenBnb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenBnb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-callisto", bundle: ..., traitCollection: ...)`
    static func tokenCallisto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenCallisto, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-cdai", bundle: ..., traitCollection: ...)`
    static func tokenCdai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenCdai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-cofi", bundle: ..., traitCollection: ...)`
    static func tokenCofi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenCofi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-cofix", bundle: ..., traitCollection: ...)`
    static func tokenCofix(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenCofix, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-dai", bundle: ..., traitCollection: ...)`
    static func tokenDai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenDai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-eos", bundle: ..., traitCollection: ...)`
    static func tokenEos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenEos, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-etc", bundle: ..., traitCollection: ...)`
    static func tokenEtc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenEtc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-idai", bundle: ..., traitCollection: ...)`
    static func tokenIdai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenIdai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-link", bundle: ..., traitCollection: ...)`
    static func tokenLink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenLink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-nest", bundle: ..., traitCollection: ...)`
    static func tokenNest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenNest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-pbtc", bundle: ..., traitCollection: ...)`
    static func tokenPbtc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenPbtc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-pdai", bundle: ..., traitCollection: ...)`
    static func tokenPdai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenPdai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-peos", bundle: ..., traitCollection: ...)`
    static func tokenPeos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenPeos, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-peth", bundle: ..., traitCollection: ...)`
    static func tokenPeth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenPeth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-pltc", bundle: ..., traitCollection: ...)`
    static func tokenPltc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenPltc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-poa", bundle: ..., traitCollection: ...)`
    static func tokenPoa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenPoa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-psai", bundle: ..., traitCollection: ...)`
    static func tokenPsai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenPsai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-pusdt", bundle: ..., traitCollection: ...)`
    static func tokenPusdt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenPusdt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-sada", bundle: ..., traitCollection: ...)`
    static func tokenSada(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSada, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-saud", bundle: ..., traitCollection: ...)`
    static func tokenSaud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSaud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-sbtc", bundle: ..., traitCollection: ...)`
    static func tokenSbtc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSbtc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-schf", bundle: ..., traitCollection: ...)`
    static func tokenSchf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSchf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-sdefi", bundle: ..., traitCollection: ...)`
    static func tokenSdefi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSdefi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-seth", bundle: ..., traitCollection: ...)`
    static func tokenSeth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSeth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-seur", bundle: ..., traitCollection: ...)`
    static func tokenSeur(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSeur, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-sgbp", bundle: ..., traitCollection: ...)`
    static func tokenSgbp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSgbp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-sjpy", bundle: ..., traitCollection: ...)`
    static func tokenSjpy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSjpy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-slink", bundle: ..., traitCollection: ...)`
    static func tokenSlink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSlink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-sltc", bundle: ..., traitCollection: ...)`
    static func tokenSltc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSltc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-snikkei", bundle: ..., traitCollection: ...)`
    static func tokenSnikkei(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSnikkei, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-susd", bundle: ..., traitCollection: ...)`
    static func tokenSusd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSusd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-sxau", bundle: ..., traitCollection: ...)`
    static func tokenSxau(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSxau, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-sxmr", bundle: ..., traitCollection: ...)`
    static func tokenSxmr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSxmr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-sxtz", bundle: ..., traitCollection: ...)`
    static func tokenSxtz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenSxtz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-teo", bundle: ..., traitCollection: ...)`
    static func tokenTeo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenTeo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-usdc", bundle: ..., traitCollection: ...)`
    static func tokenUsdc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenUsdc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-wbtc", bundle: ..., traitCollection: ...)`
    static func tokenWbtc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenWbtc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "token-weth", bundle: ..., traitCollection: ...)`
    static func tokenWeth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenWeth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tokenPlaceholderLarge", bundle: ..., traitCollection: ...)`
    static func tokenPlaceholderLarge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tokenPlaceholderLarge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toolbar-back", bundle: ..., traitCollection: ...)`
    static func toolbarBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toolbar-forward", bundle: ..., traitCollection: ...)`
    static func toolbarForward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarForward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toolbar-menu", bundle: ..., traitCollection: ...)`
    static func toolbarMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarMenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "transaction-accessory", bundle: ..., traitCollection: ...)`
    static func transactionAccessory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transactionAccessory, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "transaction_error", bundle: ..., traitCollection: ...)`
    static func transaction_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "transaction_pending", bundle: ..., traitCollection: ...)`
    static func transaction_pending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_pending, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unverified", bundle: ..., traitCollection: ...)`
    static func unverified(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unverified, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "usaFlag", bundle: ..., traitCollection: ...)`
    static func usaFlag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usaFlag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "verified", bundle: ..., traitCollection: ...)`
    static func verified(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.verified, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walletAddress", bundle: ..., traitCollection: ...)`
    static func walletAddress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletAddress, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walletConnect-icon", bundle: ..., traitCollection: ...)`
    static func walletConnectIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletConnectIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_security_green_bar", bundle: ..., traitCollection: ...)`
    static func wallet_security_green_bar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_security_green_bar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_security_orange_bar", bundle: ..., traitCollection: ...)`
    static func wallet_security_orange_bar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_security_orange_bar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_security_red_bar", bundle: ..., traitCollection: ...)`
    static func wallet_security_red_bar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_security_red_bar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "white", bundle: ..., traitCollection: ...)`
    static func white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xDai", bundle: ..., traitCollection: ...)`
    static func xDai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xDai, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 2 properties.
  struct info {
    struct nsUserActivityTypes {
      static let comAlphawalletEthereumWalletQrCode = infoPlistString(path: ["NSUserActivityTypes"], key: "com.alphawallet.ethereum-wallet-qr-code") ?? "com.alphawallet.ethereum-wallet-qr-code"

      fileprivate init() {}
    }

    struct uiApplicationShortcutItems {
      struct product_BUNDLE_IDENTIFIERQrScanner {
        static let _key = "$(PRODUCT_BUNDLE_IDENTIFIER).qrScanner"
        static let uiApplicationShortcutItemIconFile = infoPlistString(path: ["UIApplicationShortcutItems", "$(PRODUCT_BUNDLE_IDENTIFIER).qrScanner"], key: "UIApplicationShortcutItemIconFile") ?? "qr_code_icon"
        static let uiApplicationShortcutItemTitle = infoPlistString(path: ["UIApplicationShortcutItems", "$(PRODUCT_BUNDLE_IDENTIFIER).qrScanner"], key: "UIApplicationShortcutItemTitle") ?? "Scan QR Code"
        static let uiApplicationShortcutItemType = infoPlistString(path: ["UIApplicationShortcutItems", "$(PRODUCT_BUNDLE_IDENTIFIER).qrScanner"], key: "UIApplicationShortcutItemType") ?? "$(PRODUCT_BUNDLE_IDENTIFIER).qrScanner"

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `WalletCoinCollectionViewCell`.
    static let walletCoinCollectionViewCell = _R.nib._WalletCoinCollectionViewCell()
    /// Nib `WordCollectionViewCell`.
    static let wordCollectionViewCell = _R.nib._WordCollectionViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WalletCoinCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletCoinCollectionViewCell) instead")
    static func walletCoinCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletCoinCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WordCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.wordCollectionViewCell) instead")
    static func wordCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wordCollectionViewCell)
    }
    #endif

    static func walletCoinCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletCoinCollectionViewCell? {
      return R.nib.walletCoinCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletCoinCollectionViewCell
    }

    static func wordCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WordCollectionViewCell? {
      return R.nib.wordCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WordCollectionViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `WalletCoinCollectionViewCell`.
    static let walletCoinCollectionViewCell: Rswift.ReuseIdentifier<WalletCoinCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "WalletCoinCollectionViewCell")
    /// Reuse identifier `word`.
    static let word: Rswift.ReuseIdentifier<WordCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "word")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 801 localization keys.
    struct localizable {
      /// en translation: 
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let dappBrowserTitle = Rswift.StringResource(key: "dappBrowser.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: %@  Start WalletConnect session on:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectStart = Rswift.StringResource(key: "walletConnect.start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: %@ %@/%@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellPerTokenEthPriceTitle = Rswift.StringResource(key: "a.wallet.token.sell.perTokenEthPrice.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: %@ - WARNING. HIGH FEE.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let confirmPaymentHighFeeWarning = Rswift.StringResource(key: "confirmPayment.highFeeWarning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: %@ Selected
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesSelectedTokens2 = Rswift.StringResource(key: "semifungibles.selectedTokens.2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: %@ Today
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletSummaryToday = Rswift.StringResource(key: "wallet.summary.today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: %@ are disabled. Please enable them in Settings > Select Active Networks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let serverWarningServersAreDisabled = Rswift.StringResource(key: "server.warning.serversAreDisabled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: %@ duplicate entries not added. 
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addMultipleCustomRpcDuplicates = Rswift.StringResource(key: "add.multiple.customRpc.duplicates", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: %@ entries added. 
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addMultipleCustomRpcAdded = Rswift.StringResource(key: "add.multiple.customRpc.added", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: %@ entries failed to add. 
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addMultipleCustomRpcFailed = Rswift.StringResource(key: "add.multiple.customRpc.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: %@ file imported with no error
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenscriptImportOk = Rswift.StringResource(key: "tokenscript.import.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: %@ is disabled. Please enable it in Settings > Select Active Networks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let serverWarningServerIsDisabled = Rswift.StringResource(key: "server.warning.serverIsDisabled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: %@-%@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenMatchVs = Rswift.StringResource(key: "a.wallet.token.match.vs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: %d %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellConfirmMultipleTokenSelectedTitle = Rswift.StringResource(key: "a.wallet.token.sell.confirm.multipleTokenSelected.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: %d %@ Selected
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellMultipleTokenSelectedTitle = Rswift.StringResource(key: "a.wallet.token.sell.multipleTokenSelected.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: %d Assets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesAssetsCount = Rswift.StringResource(key: "semifungibles.assetsCount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: (New: %@ %@)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfirmationSendSectionBalanceNewTitle = Rswift.StringResource(key: "transactionConfirmation.Send.Section.Balance.new.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: 1 %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellConfirmSingleTokenSelectedTitle = Rswift.StringResource(key: "a.wallet.token.sell.confirm.singleTokenSelected.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: 1 %@ Selected
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellSingleTokenSelectedTitle = Rswift.StringResource(key: "a.wallet.token.sell.singleTokenSelected.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: 1 Day
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenInfoFieldStatsDay = Rswift.StringResource(key: "token.info.field.stats.day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: 1 Month
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenInfoFieldStatsMonth = Rswift.StringResource(key: "token.info.field.stats.month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: 1 Week
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenInfoFieldStatsWeek = Rswift.StringResource(key: "token.info.field.stats.week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: 1 Year
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenInfoFieldStatsYear = Rswift.StringResource(key: "token.info.field.stats.year", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: 1 Year High
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenInfoFieldPerformanceYearHigh = Rswift.StringResource(key: "token.info.field.performance.year.high", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: 1 Year Low
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenInfoFieldPerformanceYearLow = Rswift.StringResource(key: "token.info.field.performance.year.low", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: 100% SECURE
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletSecurityLevelGreen = Rswift.StringResource(key: "wallet.security.level.green", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: 24 HOURS
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletContentsValuePeriodTitle = Rswift.StringResource(key: "a.wallet.contents.value.period.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: < 2 min
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationTypeFastTime = Rswift.StringResource(key: "transactionConfiguration.Type.fast.time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: < 5 min
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationTypeAverageTime = Rswift.StringResource(key: "transactionConfiguration.Type.average.time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: > 10 min
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationTypeSlowTime = Rswift.StringResource(key: "transactionConfiguration.Type.slow.time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: A Keystore is a text file. You can copy its contents when you want to import your wallet. This is a safe way to back up a wallet.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsBackupKeystoreWalletIntroductionDescription = Rswift.StringResource(key: "wallets.backupKeystoreWallet.introduction.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: A MagicLink will be created to allow buyers to purchase your %@.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellMagicLinkDescriptionTitle = Rswift.StringResource(key: "a.wallet.token.sell.magicLinkDescription.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: ADDRESS
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aSendRecipientAddressTitle = Rswift.StringResource(key: "a.send.recipient.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: APPRECIATION
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletContentsValueAppreciationTitle = Rswift.StringResource(key: "a.wallet.contents.value.appreciation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: ARTIS sigma1 Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainARTISSigma1 = Rswift.StringResource(key: "blockchain.ARTIS.sigma1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: ARTIS tau1 Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainARTISTau1 = Rswift.StringResource(key: "blockchain.ARTIS.tau1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: ASAP
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationTypeRapidTime = Rswift.StringResource(key: "transactionConfiguration.Type.rapid.time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Above
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let priceAlertAbove = Rswift.StringResource(key: "priceAlert.above", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Accessing to perform transfer
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfirmationKeystoreAccessKeySign = Rswift.StringResource(key: "transactionConfirmation.keystore.accessKey.sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Accessing your wallet key to back it up
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreAccessKeyNonHdBackup = Rswift.StringResource(key: "keystore.accessKey.nonHd.backup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Accessing your wallet key to sign
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreAccessKeySign = Rswift.StringResource(key: "keystore.accessKey.sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Accessing your wallet seed phrase to back it up
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreAccessKeyHdBackup = Rswift.StringResource(key: "keystore.accessKey.hd.backup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Accessing your wallet seed phrase to let you verify against it
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreAccessKeyHdPrepareToVerify = Rswift.StringResource(key: "keystore.accessKey.hd.prepareToVerify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Accessing your wallet seed phrase to verify against it
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreAccessKeyHdVerify = Rswift.StringResource(key: "keystore.accessKey.hd.verify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Account not found
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsDeleteErrorAccountNotFound = Rswift.StringResource(key: "accounts.delete.error.accountNotFound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Active connection to Dapps
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectActiveSessions = Rswift.StringResource(key: "walletConnect.activeSessions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Active connections to Dapps
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectActiveSessionsPlural = Rswift.StringResource(key: "walletConnect.activeSessions.plural", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Activities will appear here
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activityEmpty = Rswift.StringResource(key: "activity.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Activity
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activityTabbarItemTitle = Rswift.StringResource(key: "activity.tabbar.item.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Activity
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTabActivity = Rswift.StringResource(key: "token.tab.activity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Add
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addButtonTitle = Rswift.StringResource(key: "addButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Add / Hide Tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addHideTokensTitle = Rswift.StringResource(key: "addHideTokens.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Add / Hide Tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsAddHideTokensTitle = Rswift.StringResource(key: "wallets.addHideTokens.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Add Custom RPC Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addrpcServerNavigationTitle = Rswift.StringResource(key: "addrpcServer.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Add Custom Token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addCustomTokenTitle = Rswift.StringResource(key: "addCustomToken.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Add Custom Token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let qrCodeAddCustomTokenTitle = Rswift.StringResource(key: "qrCode.addCustomToken.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Add Custom Token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokensNewtokenNavigationTitle = Rswift.StringResource(key: "tokens.newtoken.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Add Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addrpcServerSaveButtonTitle = Rswift.StringResource(key: "addrpcServer.saveButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Add New Price Alert
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let priceAlertNewAlert = Rswift.StringResource(key: "priceAlert.newAlert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Add to My Bookmarks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let browserAddbookmarkButtonTitle = Rswift.StringResource(key: "browser.addbookmark.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Add token failure
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsHideTokenErrorAddTokenFailure = Rswift.StringResource(key: "wallets.hideToken.error.AddTokenFailure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Add, Switch & Reload %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let switchChainRequestActionAddSwitchReload = Rswift.StringResource(key: "switchChainRequest.action.addSwitchReload", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let dappBrowserMyDappsEditUrlLabel = Rswift.StringResource(key: "dappBrowser.myDapps.edit.url.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Address Book
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendPasteButtonAddressBook = Rswift.StringResource(key: "send.paste.button.addressBook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Address copied
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let requestAddressCopiedTitle = Rswift.StringResource(key: "request.addressCopied.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Advanced
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aAdvancedSettingsNavigationTitle = Rswift.StringResource(key: "a.advanced.settings.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Advanced
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let advanced = Rswift.StringResource(key: "Advanced", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Advanced
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsAdvancedTitle = Rswift.StringResource(key: "settings.advanced.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Alerts
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let priceAlertNavigationTitle = Rswift.StringResource(key: "priceAlert.navigationTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Alerts will appear here
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let priceAlertEmptyList = Rswift.StringResource(key: "priceAlert.emptyList", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: All
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletContentsFilterAllTitle = Rswift.StringResource(key: "a.wallet.contents.filter.all.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: All %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activityApproveAmountAll = Rswift.StringResource(key: "activity.approve.amount.all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: All Funds
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendAllFunds = Rswift.StringResource(key: "send.allFunds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Allow Notifications When You Receive %@?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionsReceivedEtherNotificationPrompt = Rswift.StringResource(key: "transactions.received.ether.notification.prompt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: AlphaWallet security is being upgraded to the best achievable. Lock your private key with biometrics
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreLockWalletPrivateKeyDescription = Rswift.StringResource(key: "keystore.lock.wallet.privateKey.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: AlphaWallet security is being upgraded to the best achievable. Lock your seed phrase with biometrics
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreLockWalletSeedDescription = Rswift.StringResource(key: "keystore.lock.wallet.seed.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: AlphaWallet will NEVER ask about your seed phrase (especially on Telegram).
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsShowSeedPhraseIntroductionSubtitle = Rswift.StringResource(key: "wallets.showSeedPhrase.introduction.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Already supported. Enable this server instead
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addrpcServerChainIdAlreadySupported = Rswift.StringResource(key: "addrpcServer.chainIdAlreadySupported", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendAmount = Rswift.StringResource(key: "send.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfirmationSendSectionAmountTitle = Rswift.StringResource(key: "transactionConfirmation.Send.Section.Amount.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: An unknown error occurred.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let unknownError = Rswift.StringResource(key: "unknown.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Analytics
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let analyticsNavigationTitle = Rswift.StringResource(key: "analytics.navigationTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Analytics
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsAnalitycsTitle = Rswift.StringResource(key: "settings.analitycs.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Any 'jailbreak' app can access AlphaWallet's keychain data and steal your wallet! Wipe this wallet immediately and restore on a secure device.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let appDeviceJailbreakDescription = Rswift.StringResource(key: "app.device.jailbreak.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: App Version: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aHelpContactEmailAppVersion = Rswift.StringResource(key: "a.help.contact.email.appVersion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Approve %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionCellTokenApproveTitle = Rswift.StringResource(key: "transaction.cell.tokenApprove.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Approved to move %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activityOwnerApproved = Rswift.StringResource(key: "activity.ownerApproved", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Approving to move %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activityOwnerApprovedPending = Rswift.StringResource(key: "activity.ownerApproved.pending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Arbitrum
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainArbitrum = Rswift.StringResource(key: "blockchain.arbitrum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Arbitrum Rinkeby
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainArbitrumRinkeby = Rswift.StringResource(key: "blockchain.arbitrum.rinkeby", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Are you sure you want to clear your history?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let dappBrowserClearHistoryPrompt = Rswift.StringResource(key: "dappBrowser.clearHistory.prompt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Are you sure you would like to delete this bookmark?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let browserBookmarksConfirmDeleteTitle = Rswift.StringResource(key: "browser.bookmarks.confirm.delete.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Are you sure you would like to delete this server?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsEnabledNetworksDeleteTitle = Rswift.StringResource(key: "settings.enabledNetworks.delete.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Are you sure you would like to delete this wallet?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsConfirmDeleteTitle = Rswift.StringResource(key: "accounts.confirm.delete.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Assets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletContentsFilterAssetsOnlyTitle = Rswift.StringResource(key: "a.wallet.contents.filter.assetsOnly.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Assets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesAssetsTitle = Rswift.StringResource(key: "semifungibles.assets.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Attempt to Cancel
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionCancelConfirmationTitle = Rswift.StringResource(key: "token.transactionCancelConfirmation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Attributes
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesAttributes = Rswift.StringResource(key: "semifungibles.attributes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Authorize to confirm transaction
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfirmationAuthorisationReason = Rswift.StringResource(key: "transactionConfirmation.authorisation.reason", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Auto
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let detectingServerAutomaticallyButtonTitle = Rswift.StringResource(key: "detecting.serverAutomatically.buttonTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Available To Mint
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesAttributeAvailableToMint = Rswift.StringResource(key: "semifungibles.attribute.availableToMint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Available: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendAvailable = Rswift.StringResource(key: "send.available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Avalanche FUJI C-Chain
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainAvalancheTest = Rswift.StringResource(key: "blockchain.Avalanche.test", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Avalanche Mainnet C-Chain
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainAvalanche = Rswift.StringResource(key: "blockchain.Avalanche", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Average
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationTypeAverage = Rswift.StringResource(key: "transactionConfiguration.Type.average", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: BACK UP NOW!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletSecurityLevelRed = Rswift.StringResource(key: "wallet.security.level.red", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Back up Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let backupPromptBackupButtonTitle = Rswift.StringResource(key: "backup.prompt.backupButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Back up my Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsBackupHdWalletIntroductionButtonTitle = Rswift.StringResource(key: "wallets.backupHdWallet.introduction.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Back up this Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsBackupWalletButtonTitle = Rswift.StringResource(key: "settings.backupWallet.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Back up your Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let onboardingNewWalletBackupWalletTitle = Rswift.StringResource(key: "onboarding.newWallet.backupWallet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Back up your Wallet with Seed Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsBackupHdWalletIntroductionTitle = Rswift.StringResource(key: "wallets.backupHdWallet.introduction.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Backup Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let exportBackupButtonTitle = Rswift.StringResource(key: "export.backup.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Balance
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let balance = Rswift.StringResource(key: "Balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Balance
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfirmationSendSectionBalanceTitle = Rswift.StringResource(key: "transactionConfirmation.Send.Section.Balance.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Be safe, back up your wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let exportNoBackupLabelTitle = Rswift.StringResource(key: "export.noBackup.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Before the link expires, anyone with the MagicLink can claim your tickets with one click
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferNoteLabelTitle = Rswift.StringResource(key: "a.wallet.token.transfer.noteLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Before the link expires, anyone with the MagicLink can purchase your %@ with one click
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellNoteLabelTitle = Rswift.StringResource(key: "a.wallet.token.sell.noteLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Below
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let priceAlertBelow = Rswift.StringResource(key: "priceAlert.below", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Beware of scammers! Don’t share seed phrase.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsShowSeedPhraseIntroductionTitle = Rswift.StringResource(key: "wallets.showSeedPhrase.introduction.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Binance (BSC) Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainBinance = Rswift.StringResource(key: "blockchain.Binance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Binance (BSC) Testnet Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainBinanceTest = Rswift.StringResource(key: "blockchain.Binance.test", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Block #
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionBlockNumberLabelTitle = Rswift.StringResource(key: "transaction.blockNumber.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Block Explorer
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addrpcServerBlockExplorerUrlPlaceholder = Rswift.StringResource(key: "addrpcServer.blockExplorerUrl.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Block Explorer URL
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addrpcServerBlockExplorerUrlTitle = Rswift.StringResource(key: "addrpcServer.blockExplorerUrl.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Block Explorer URL is invalid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addrpcServerBlockExplorerUrlError = Rswift.StringResource(key: "addrpcServer.blockExplorerUrl.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Blockchain explorer URL can't be resolved. Would you like to continue without it? Transaction history will not be fetched
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addCustomChainWarningNoBlockchainExplorerUrl = Rswift.StringResource(key: "addCustomChain.warning.noBlockchainExplorerUrl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Blog
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let supportBlogTitle = Rswift.StringResource(key: "support.blog.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Bookmarks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let bookmarks = Rswift.StringResource(key: "Bookmarks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Browse
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let customRPCOverallTabBrowse = Rswift.StringResource(key: "customRPC.overall.tab.browse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Browse
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let photos = Rswift.StringResource(key: "photos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Browser
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let browserTabbarItemTitle = Rswift.StringResource(key: "browser.tabbar.item.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Buy
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenBuyTitle = Rswift.StringResource(key: "a.wallet.token.buy.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Buy %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorRectifyButtonTitleInsufficientFundsError = Rswift.StringResource(key: "token.transactionConfirmation.error.rectifyButtonTitle.insufficientFundsError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Buy Crypto
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let buyCryptoTitle = Rswift.StringResource(key: "buyCrypto.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Buy xDai
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenBuyXDaiTitle = Rswift.StringResource(key: "a.wallet.token.buy.xDai.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Buy, sell and transfer your favourite tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWelcomeOnboarding3 = Rswift.StringResource(key: "a.welcome.onboarding.3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Camera Access Required to Scan QR Code
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let cameraQrCodeDeniedPromptTitle = Rswift.StringResource(key: "camera.qrCode.denied.prompt.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Can't access your wallet. If you have migrated to a new phone or restored your device, you need to import your wallet again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreAccessKeyNeedImportOrPasscode = Rswift.StringResource(key: "keystore.accessKey.needImportOrPasscode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Can't lock your wallet key. Maybe your iOS Passcode is not enabled?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreAccessKeyLockFail = Rswift.StringResource(key: "keystore.accessKey.lock.fail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellConfirmCancelButtonTitle = Rswift.StringResource(key: "a.wallet.token.sell.confirm.cancel.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activityCancel = Rswift.StringResource(key: "activity.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Chain ID
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let chainID = Rswift.StringResource(key: "Chain ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Chain ID already exists
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let editCustomRPCChainIDErrorDuplicate = Rswift.StringResource(key: "editCustomRPC.chainID.error.duplicate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Chain ID is invalid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addrpcServerChainIDError = Rswift.StringResource(key: "addrpcServer.chainID.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Chain ID is not supported: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let switchChainErrorNotSupportedChainId = Rswift.StringResource(key: "switchChain.error.notSupportedChainId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Chain IDs returned by the RPC server do not match: %@ vs. %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addCustomChainErrorChainIdNotMatch = Rswift.StringResource(key: "addCustomChain.error.chainIdNotMatch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Change / Add Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsChangeWalletTitle = Rswift.StringResource(key: "settings.change.wallet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Change Currency
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsChangeCurrencyTitle = Rswift.StringResource(key: "settings.changeCurrency.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Change Language
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsLanguageButtonTitle = Rswift.StringResource(key: "settings.language.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Change Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsWalletsButtonTitle = Rswift.StringResource(key: "settings.wallets.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Change Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletNavigationTitle = Rswift.StringResource(key: "wallet.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Check out AlphaWallet - The first crypto mobile wallet which can interact with smart contracts to perform real-world use cases.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let welldoneViewmodelSharingText = Rswift.StringResource(key: "welldone.viewmodel.sharing.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Check your Email/SMS for the import link. Tap it and it will automatically import to the app!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletImportWalletBubbleDescription = Rswift.StringResource(key: "a.wallet.import.wallet.bubble.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Circulating Supply
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesAttributeCirculatingSupply = Rswift.StringResource(key: "semifungibles.attribute.circulatingSupply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Clear
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let clearButtonTitle = Rswift.StringResource(key: "clearButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Clear
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesToolbarClear = Rswift.StringResource(key: "semifungibles.toolbar.clear", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Clear Browser cache
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aSettingsContentsClearDappBrowserCache = Rswift.StringResource(key: "a.settings.contents.clearDappBrowserCache", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Clear History?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let dappBrowserClearHistory = Rswift.StringResource(key: "dappBrowser.clearHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Collectibles
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletContentsFilterCollectiblesOnlyTitle = Rswift.StringResource(key: "a.wallet.contents.filter.collectiblesOnly.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Coming soon
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let comingSoon = Rswift.StringResource(key: "coming.soon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let confirmPaymentConfirmButtonTitle = Rswift.StringResource(key: "confirmPayment.confirm.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Confirm Purchase?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionPurchaseConfirmationTitle = Rswift.StringResource(key: "token.transactionPurchaseConfirmation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Confirm Sale?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellConfirmTitle = Rswift.StringResource(key: "a.wallet.token.sell.confirm.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Confirm Transaction?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationTitle = Rswift.StringResource(key: "token.transactionConfirmation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Confirm Transaction?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionSpeedupConfirmationTitle = Rswift.StringResource(key: "token.transactionSpeedupConfirmation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Confirm Transfer?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionTransferConfirmationTitle = Rswift.StringResource(key: "token.transactionTransferConfirmation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Confirm signing this message:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let confirmSignMessage = Rswift.StringResource(key: "confirmSignMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Confirmation
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfirmationLabelTitle = Rswift.StringResource(key: "transaction.confirmation.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Conflicting TokenScript Files
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenScriptType2ConflictingFiles = Rswift.StringResource(key: "TokenScript.type2.conflictingFiles", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Congrats
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenRedeemSuccessfulTitle = Rswift.StringResource(key: "a.wallet.token.redeem.successful.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Connect
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let confirmPaymentConnectButtonTitle = Rswift.StringResource(key: "confirmPayment.connect.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Connect To Site?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectConnectionTitle = Rswift.StringResource(key: "walletConnect.connection.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Connect on %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectSessionConnect = Rswift.StringResource(key: "walletConnect.session.connect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Connected To
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectConnectionUrlTitle = Rswift.StringResource(key: "walletConnect.connection.url.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Connected Wallets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletTypesHdWallets = Rswift.StringResource(key: "wallet.types.hdWallets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Connected to
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectSessionConnectedURL = Rswift.StringResource(key: "walletConnect.session.connectedURL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Connected to: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let dappBrowserSwitchServer = Rswift.StringResource(key: "dappBrowser.switchServer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Console
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aConsoleTitle = Rswift.StringResource(key: "a.console.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Contact Us
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsContactUsTitle = Rswift.StringResource(key: "settings.contactUs.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let `continue` = Rswift.StringResource(key: "Continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Contract
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationContractTitle = Rswift.StringResource(key: "token.transactionConfirmation.contract.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Contract Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let contractAddress = Rswift.StringResource(key: "Contract Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Contract Execution
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activityGroupTransactionUnknown = Rswift.StringResource(key: "activity.groupTransaction.unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Convert to Arbitrum
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenArbitrumBridgeButtonTitle = Rswift.StringResource(key: "a.wallet.token.arbitrumBridge.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Convert to DAI
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenXDaiBridgeButtonTitle = Rswift.StringResource(key: "a.wallet.token.xDaiBridge.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Copied to clipboard
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let copiedToClipboard = Rswift.StringResource(key: "copiedToClipboard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Copy
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let copy = Rswift.StringResource(key: "Copy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Copy Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let copyAddress = Rswift.StringResource(key: "Copy Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Copy Transaction ID
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendActionCopyTransactionTitle = Rswift.StringResource(key: "send.action.copy.transaction.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Copy wallet address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let requestCopyWalletButtonTitle = Rswift.StringResource(key: "request.copyWallet.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Correct Nonce
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorRectifyButtonTitleNonceTooLowError = Rswift.StringResource(key: "token.transactionConfirmation.error.rectifyButtonTitle.nonceTooLowError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Could not decrypt key with given passphrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsDeleteErrorFailedToDecryptKey = Rswift.StringResource(key: "accounts.delete.error.failedToDecryptKey", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Create Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletCreateButtonTitle = Rswift.StringResource(key: "wallet.create.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Create a New Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let gettingStartedNewWallet = Rswift.StringResource(key: "gettingStarted.newWallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Created
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesCreatedDate = Rswift.StringResource(key: "semifungibles.createdDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Creating wallet...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletCreateInProgress = Rswift.StringResource(key: "wallet.create.inProgress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Cronos Testnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainCronosTestnet = Rswift.StringResource(key: "blockchain.Cronos.Testnet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Cryptokitty
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let katTitlecase = Rswift.StringResource(key: "kat.titlecase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Currencies
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletContentsFilterCurrencyOnlyTitle = Rswift.StringResource(key: "a.wallet.contents.filter.currencyOnly.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Currency
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsCurrencyButtonTitle = Rswift.StringResource(key: "settings.currency.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Current locale: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aHelpContactEmailLocale = Rswift.StringResource(key: "a.help.contact.email.locale", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Custom (set your own)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationTypeCustom = Rswift.StringResource(key: "transactionConfiguration.Type.custom", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: DEBUG
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenDebugContract = Rswift.StringResource(key: "a.wallet.token.debugContract", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: DEVICE SECURITY COMPROMISED
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let appDeviceJailbreakTitle = Rswift.StringResource(key: "app.device.jailbreak.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Data
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let confirmPaymentDataLabelTitle = Rswift.StringResource(key: "confirmPayment.data.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Deal
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesToolbarDeal = Rswift.StringResource(key: "semifungibles.toolbar.deal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Decimals
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let decimals = Rswift.StringResource(key: "Decimals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Default
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationDefault = Rswift.StringResource(key: "token.transactionConfirmation.default", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsConfirmDeleteOkTitle = Rswift.StringResource(key: "accounts.confirm.delete.okTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Deleting
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let deleting = Rswift.StringResource(key: "Deleting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesDescription = Rswift.StringResource(key: "semifungibles.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Details
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesDetails = Rswift.StringResource(key: "semifungibles.details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Detect Automatically
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let detectingServerAutomatically = Rswift.StringResource(key: "detecting.serverAutomatically", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Detecting token type…
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let detectingTokenTypeTitle = Rswift.StringResource(key: "detecting.token.type.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Device Model: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aHelpContactEmailDeviceModel = Rswift.StringResource(key: "a.help.contact.email.deviceModel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Disconnect
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectSessionDisconnect = Rswift.StringResource(key: "walletConnect.session.disconnect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Discord
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let urlDiscord = Rswift.StringResource(key: "url.discord", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Discover Dapps
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let discoverDappsButtonImageLabel = Rswift.StringResource(key: "discoverDappsButton.imageLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Displayed Tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addHideTokensSectionDisplayedTokens = Rswift.StringResource(key: "addHideTokens.section.displayedTokens", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Do not share your backup. AlphaWallet team members will not ask for it.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsShowSeedPhraseSubtitleError = Rswift.StringResource(key: "wallets.showSeedPhrase.subtitle.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Don’t worry. Your tokens are safe. You are viewing Testnet networks. They are used by developers to try out new designs. You can switch to Mainnet any time.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let whereAreMyTokensDescription = Rswift.StringResource(key: "whereAreMyTokens.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: DuckDuckGo
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let duckDuckGo = Rswift.StringResource(key: "DuckDuckGo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: ENS
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfirmationRowTitleEns = Rswift.StringResource(key: "transactionConfirmation.Row.title.ens", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: EQUIVALENT IN USD
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenDollarCostLabelTitle = Rswift.StringResource(key: "a.claim.token.dollarCostLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: EQUIVALENT IN USD
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellDollarCostLabelTitle = Rswift.StringResource(key: "a.wallet.token.sell.dollarCostLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Eden
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendPrivateTransactionsProviderEden = Rswift.StringResource(key: "sendPrivateTransactionsProvider.eden", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let editButtonTitle = Rswift.StringResource(key: "editButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Edit Alert
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let priceAlertEdit = Rswift.StringResource(key: "priceAlert.edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Edit Bookmark
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let dappBrowserMyDappsEdit = Rswift.StringResource(key: "dappBrowser.myDapps.edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Edit Custom RPC Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let editCustomRPCNavigationTitle = Rswift.StringResource(key: "editCustomRPC.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let emailListPromptEmailPlaceholder = Rswift.StringResource(key: "emailList.prompt.email.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let supportEmailTitle = Rswift.StringResource(key: "support.email.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Email is not valid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let emailListEmailInvalid = Rswift.StringResource(key: "emailList.email.invalid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Empty
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let empty = Rswift.StringResource(key: "Empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Empty ClipBoard
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendErrorEmptyClipBoard = Rswift.StringResource(key: "send.error.emptyClipBoard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Enable, Switch & Reload
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let switchChainRequestActionEnableSwitchReload = Rswift.StringResource(key: "switchChainRequest.action.enableSwitchReload", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Enabled Networks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsEnabledNetworksButtonTitle = Rswift.StringResource(key: "settings.enabledNetworks.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Endpoint
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let endpoint = Rswift.StringResource(key: "Endpoint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Enter
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let customRPCOverallTabManual = Rswift.StringResource(key: "customRPC.overall.tab.manual", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Enter Name (min. 5 characters)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletRenameEnterNameTitle = Rswift.StringResource(key: "wallet.rename.enterNameTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Enter a new password
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let lockCreatePasscodeViewModelInitial = Rswift.StringResource(key: "lock.create.passcode.view.model.initial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Enter target price
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let priceAlertEnterTargetPrice = Rswift.StringResource(key: "priceAlert.enterTargetPrice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Enter your passcode.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let lockEnterPasscodeViewModelInitial = Rswift.StringResource(key: "lock.enter.passcode.view.model.initial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let error = Rswift.StringResource(key: "error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionCellErrorTitle = Rswift.StringResource(key: "transaction.cell.error.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Error moving asset definition file from %@ to: %@: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenScriptMoveFileError = Rswift.StringResource(key: "tokenScript.moveFile.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Estimate Network Fee
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let confirmPaymentGasFeeLabelTitle = Rswift.StringResource(key: "confirmPayment.gasFee.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Ethereum Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let ethereumAddress = Rswift.StringResource(key: "Ethereum Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Ethereum Blockchain
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainEthereum = Rswift.StringResource(key: "blockchain.ethereum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Ethereum address or ENS name
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addressEnsLabelMessage = Rswift.StringResource(key: "address.ens.labelMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Ethermine
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendPrivateTransactionsProviderEtheremine = Rswift.StringResource(key: "sendPrivateTransactionsProvider.etheremine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Every transaction requires a small amount of %@ (%@) to pay for the fees. You can receive %@ from a different wallet, crypto exchange, or you can buy %@ using the button below.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorDescriptionInsufficientFundsError = Rswift.StringResource(key: "token.transactionConfirmation.error.description.insufficientFundsError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Export Keystore
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsBackupKeystoreWalletAlertSheetTitleShorter = Rswift.StringResource(key: "wallets.backupKeystoreWallet.alertSheet.title.shorter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Export Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsAdvancedExportJSONKeystoreFilePasswordButtonPassword = Rswift.StringResource(key: "settings.advanced.exportJSONKeystore.file.passwordButton.password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Export Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsAdvancedExportJSONKeystoreFileTitle = Rswift.StringResource(key: "settings.advanced.exportJSONKeystore.file.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Export Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsAdvancedExportJSONKeystorePasswordPasswordButtonInfo = Rswift.StringResource(key: "settings.advanced.exportJSONKeystore.password.passwordButton.info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Export Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsAdvancedExportJSONKeystoreTitle = Rswift.StringResource(key: "settings.advanced.exportJSONKeystore.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Export Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsBackupKeystoreWalletAlertSheetTitle = Rswift.StringResource(key: "wallets.backupKeystoreWallet.alertSheet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Exporting
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsAdvancedExportJSONKeystoreFileExporting = Rswift.StringResource(key: "settings.advanced.exportJSONKeystore.file.exporting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Face ID
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let faceId = Rswift.StringResource(key: "face.id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Facebook
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let urlFacebook = Rswift.StringResource(key: "url.facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Failed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionCellFailedTitle = Rswift.StringResource(key: "transaction.cell.failed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Failed to Approve to move %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activityOwnerApprovedFailed = Rswift.StringResource(key: "activity.ownerApproved.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Failed to Send %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activitySendFailed = Rswift.StringResource(key: "activity.send.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Failed to add chains.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addMultipleCustomRpcError = Rswift.StringResource(key: "add.multiple.customRpc.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Failed to create wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsDeleteErrorFailedToCreateWallet = Rswift.StringResource(key: "accounts.delete.error.failedToCreateWallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Failed to delete account
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsDeleteErrorFailedToDeleteAccount = Rswift.StringResource(key: "accounts.delete.error.failedToDeleteAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Failed to export private key
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsDeleteErrorFailedToExportPrivateKey = Rswift.StringResource(key: "accounts.delete.error.failedToExportPrivateKey", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Failed to export wallet seed. If you have migrated to a new phone or restored your device, you need to import your wallet again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsDeleteErrorFailedToExportSeed = Rswift.StringResource(key: "accounts.delete.error.failedToExportSeed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Failed to import private key
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsDeleteErrorFailedToImportPrivateKey = Rswift.StringResource(key: "accounts.delete.error.failedToImportPrivateKey", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Failed to parse key JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsDeleteErrorFailedToParseJSON = Rswift.StringResource(key: "accounts.delete.error.failedToParseJSON", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Failed to send email. Make sure you have Mail app installed.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsErrorFailedToSendEmail = Rswift.StringResource(key: "settings.error.failedToSendEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Failed to sign message
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsDeleteErrorFailedToSignMessage = Rswift.StringResource(key: "accounts.delete.error.failedToSignMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Failed to sign transaction
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsDeleteErrorFailedToSignTransaction = Rswift.StringResource(key: "accounts.delete.error.failedToSignTransaction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Failed to update password
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsDeleteErrorFailedToUpdatePassword = Rswift.StringResource(key: "accounts.delete.error.failedToUpdatePassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Fantom Blockchain
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainFantom = Rswift.StringResource(key: "blockchain.fantom", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Fantom Testnet Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainFantomTest = Rswift.StringResource(key: "blockchain.fantom.test", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Fast
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationTypeFast = Rswift.StringResource(key: "transactionConfiguration.Type.fast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Field required!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let warningFieldRequired = Rswift.StringResource(key: "warning.fieldRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: For Sale
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenBundleStatusForSaleTitle = Rswift.StringResource(key: "a.wallet.tokenBundle.status.forSale.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Free Import
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenEthCostFreeTitle = Rswift.StringResource(key: "a.claim.token.ethCost.free.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: From
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let confirmPaymentFromLabelTitle = Rswift.StringResource(key: "confirmPayment.from.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: From
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionFromLabelTitle = Rswift.StringResource(key: "transaction.from.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Function
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationFunctionTitle = Rswift.StringResource(key: "token.transactionConfirmation.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: GET STARTED
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWelcomeOnboardingCreatewalletButtonTitle = Rswift.StringResource(key: "a.welcome.onboarding.createwallet.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfirmationSendSectionGasTitle = Rswift.StringResource(key: "transactionConfirmation.Send.Section.Gas.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas Fee
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionGasFeeLabelTitle = Rswift.StringResource(key: "transaction.gasFee.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas Fee too high. Max: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let configureTransactionErrorGasFeeTooHigh = Rswift.StringResource(key: "configureTransaction.error.gasFeeTooHigh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas Limit
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let configureTransactionGasLimitLabelTitle = Rswift.StringResource(key: "configureTransaction.gasLimit.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas Limit
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let configureTransactionHeaderGasLimit = Rswift.StringResource(key: "configureTransaction.header.gasLimit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas Limit
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let confirmPaymentGasLimitLabelTitle = Rswift.StringResource(key: "confirmPayment.gasLimit.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas Limit is too high
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorTitleGasLimitTooHigh = Rswift.StringResource(key: "token.transactionConfirmation.error.title.gasLimitTooHigh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas Limit is too low
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorTitleGasLimitTooLow = Rswift.StringResource(key: "token.transactionConfirmation.error.title.gasLimitTooLow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas Limit too high. Max available: %d
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let configureTransactionErrorGasLimitTooHigh = Rswift.StringResource(key: "configureTransaction.error.gasLimitTooHigh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas Price
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let configureTransactionHeaderGasPrice = Rswift.StringResource(key: "configureTransaction.header.gasPrice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas Price
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let confirmPaymentGasPriceLabelTitle = Rswift.StringResource(key: "confirmPayment.gasPrice.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas Price (Gwei)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let configureTransactionGasPriceGweiLabelTitle = Rswift.StringResource(key: "configureTransaction.gasPriceGwei.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas Price Might Be Too Low
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationGasPriceTooLowLong = Rswift.StringResource(key: "transactionConfiguration.gasPrice.tooLow.long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas Price is too low
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorTitleGasPriceTooLow = Rswift.StringResource(key: "token.transactionConfirmation.error.title.gasPriceTooLow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas Price must be a positive number
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let configureTransactionErrorGasPriceTooLow = Rswift.StringResource(key: "configureTransaction.error.gasPriceTooLow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gas price is set below the 'slow' speed. Your transaction may take a long time to be written or may never be written.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationGasPriceTooLowDescription = Rswift.StringResource(key: "transactionConfiguration.gasPrice.tooLow.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Gave approval to move %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activityApprovalObtained = Rswift.StringResource(key: "activity.approvalObtained", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: General
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsGeneralTitle = Rswift.StringResource(key: "settings.general.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Generate Free Transfer Link
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferConfirmSubtitle = Rswift.StringResource(key: "a.wallet.token.transfer.confirm.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Generate MagicLink
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferConfirmTitle = Rswift.StringResource(key: "a.wallet.token.transfer.confirm.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Generate Sale Link
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellConfirmSubtitle = Rswift.StringResource(key: "a.wallet.token.sell.confirm.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Github (File an issue)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let urlGithub = Rswift.StringResource(key: "url.github", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Go to Token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activityGoToToken = Rswift.StringResource(key: "activity.goToToken", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Google
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let google = Rswift.StringResource(key: "Google", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Got it, enable Testnets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsEnabledNetworksPromptEnableTestnetButtonTitle = Rswift.StringResource(key: "settings.enabledNetworks.promptEnableTestnet.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Got it, show my seed phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsShowSeedPhraseIntroductionButtonTitle = Rswift.StringResource(key: "wallets.showSeedPhrase.introduction.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Have a ticket to import?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletImportWalletBubbleTitle = Rswift.StringResource(key: "a.wallet.import.wallet.bubble.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Heco Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainHeco = Rswift.StringResource(key: "blockchain.Heco", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Heco Testnet Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainHecoTest = Rswift.StringResource(key: "blockchain.Heco.test", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Help
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsSectionHelpTitle = Rswift.StringResource(key: "settings.section.help.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Help & FAQs
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aHelpNavigationTitle = Rswift.StringResource(key: "a.help.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Help us grow by sharing this app with your friends!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let welldoneDescriptionLabelText = Rswift.StringResource(key: "welldone.description.label.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Help us to improve AlphaWallet by sharing anonymous data with us. This does not include any financial information.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let analyticsDescription = Rswift.StringResource(key: "analytics.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Help/Feedback for AlphaWallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aHelpContactEmailSubject = Rswift.StringResource(key: "a.help.contact.email.subject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Helpful information to developers:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aHelpContactEmailHelpfulToDevelopers = Rswift.StringResource(key: "a.help.contact.email.helpfulToDevelopers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Hidden Tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addHideTokensSectionHiddenTokens = Rswift.StringResource(key: "addHideTokens.section.hiddenTokens", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Hide
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsHideTokenTitle = Rswift.StringResource(key: "wallets.hideToken.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: High Gas Price Warning!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationGasPriceTooHighLong = Rswift.StringResource(key: "transactionConfiguration.gasPrice.tooHigh.long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: High Price
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationGasPriceTooHighShort = Rswift.StringResource(key: "transactionConfiguration.gasPrice.tooHigh.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: History
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let browserHistory = Rswift.StringResource(key: "browserHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: History
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let history = Rswift.StringResource(key: "History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Hold all your Crypto assets in one place
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWelcomeOnboarding1 = Rswift.StringResource(key: "a.welcome.onboarding.1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let browserHomeButtonTitle = Rswift.StringResource(key: "browser.home.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: How do I get my money?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aHelpContentsHowDoIGetMyMoney = Rswift.StringResource(key: "a.help.contents.howDoIGetMyMoney", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: How do I transfer ETH into my wallet?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aHelpContentsHowDoITransferETHIntoMyWallet = Rswift.StringResource(key: "a.help.contents.howDoITransferETHIntoMyWallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: I already have a wallet:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let gettingStartedAlreadyHaveWallet = Rswift.StringResource(key: "gettingStarted.alreadyHaveWallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: I want to receive such emails
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let emailListPromptSubscribeButtonTitle = Rswift.StringResource(key: "emailList.prompt.subscribeButtonTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: IMPORTANT
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellNoteTitleLabelTitle = Rswift.StringResource(key: "a.wallet.token.sell.noteTitleLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: If your seed phrase is not in English, please convert it to English first
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let importWalletImportSeedPhraseDescription = Rswift.StringResource(key: "importWallet.import.seedPhrase.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Import
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenImportButtonTitle = Rswift.StringResource(key: "a.claim.token.import.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Import
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletImportWalletTitle = Rswift.StringResource(key: "a.wallet.import.wallet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Import
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let importWalletImportButtonTitle = Rswift.StringResource(key: "importWallet.import.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Import Link?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenPrompt = Rswift.StringResource(key: "a.claim.token.prompt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Import Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let importNavigationTitle = Rswift.StringResource(key: "import.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Import Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletImportButtonTitle = Rswift.StringResource(key: "wallet.import.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Import Wallet Options
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let importWalletImportAlertSheetTitle = Rswift.StringResource(key: "importWallet.import.alertSheet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Import from iCloud/Dropbox/Google Drive
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let importWalletImportFromCloudTitle = Rswift.StringResource(key: "importWallet.import.fromCloud.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Import?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenPromptImportTitle = Rswift.StringResource(key: "a.claim.token.promptImport.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Importing %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenTitle = Rswift.StringResource(key: "a.claim.token.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Importing tickets...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenInProgressTitle = Rswift.StringResource(key: "a.claim.token.inProgress.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Importing wallet...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let importWalletImportingIndicatorLabelTitle = Rswift.StringResource(key: "importWallet.importingIndicator.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Incomplete Data
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionCellAvailableButDataUnavailableTitle = Rswift.StringResource(key: "transaction.cell.availableButDataUnavailable.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Incorrect passcode. You have %d attempts.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let lockEnterPasscodeViewModelIncorrectPasscode = Rswift.StringResource(key: "lock.enter.passcode.view.model.incorrect.passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Infinite Fungible Token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesInfiniteFungibleToken = Rswift.StringResource(key: "semifungibles.infiniteFungibleToken", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Info
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTabInfo = Rswift.StringResource(key: "token.tab.info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Infura Error
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsPingInfuraFail = Rswift.StringResource(key: "settings.pingInfura.fail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Infura looks OK
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsPingInfuraSuccessful = Rswift.StringResource(key: "settings.pingInfura.successful", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Insufficient balance
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aSendBalanceInsufficient = Rswift.StringResource(key: "a.send.balance.insufficient", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Invalid Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendErrorInvalidAddress = Rswift.StringResource(key: "send.error.invalidAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Invalid Amount
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendErrorInvalidAmount = Rswift.StringResource(key: "send.error.invalidAmount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Invalid Ethereum Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let importWalletImportInvalidAddress = Rswift.StringResource(key: "importWallet.import.invalidAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Invalid Link, please try again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenInvalidLinkTryAgain = Rswift.StringResource(key: "a.claim.token.invalidLink.tryAgain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Invalid Signature
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenScriptType2InvalidSignature = Rswift.StringResource(key: "TokenScript.type2.invalidSignature", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Invalid blockchain explorer URL
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addCustomChainErrorInvalidBlockchainExplorerUrl = Rswift.StringResource(key: "addCustomChain.error.invalidBlockchainExplorerUrl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Invalid chain ID provided: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addCustomChainErrorInvalidChainId = Rswift.StringResource(key: "addCustomChain.error.invalidChainId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Invalid chain ID provided: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let switchChainErrorInvalidChainId = Rswift.StringResource(key: "switchChain.error.invalidChainId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Invalid seed phrase. Please check and try again.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsVerifySeedPhraseWrong = Rswift.StringResource(key: "wallets.verifySeedPhrase.wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Invalid ticket link
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenFailedTitle = Rswift.StringResource(key: "a.claim.token.failed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Invalid token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendInvalidToken = Rswift.StringResource(key: "send.invalid.Token", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Issuer
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletContentsIssuerTitle = Rswift.StringResource(key: "a.wallet.contents.issuer.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Issuer
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesAttributeIssuer = Rswift.StringResource(key: "semifungibles.attribute.issuer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: It looks like you are trying to run a smart contract and the logic of that smart contract returns an error.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorDescriptionExecutionRevertedError = Rswift.StringResource(key: "token.transactionConfirmation.error.description.executionRevertedError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: It seems like there is a problem with the RPC node certificate. Please try again later
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendTransactionErrorInvalidCertificate = Rswift.StringResource(key: "sendTransaction.error.invalidCertificate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: It's not a good idea to take a screenshot of your seed phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsShowSeedPhraseDoNotTakeScreenshotDescription = Rswift.StringResource(key: "wallets.showSeedPhrase.doNotTakeScreenshotDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: It's not a good idea to take a screenshot of your seed phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsVerifySeedPhraseDoNotTakeScreenshotDescription = Rswift.StringResource(key: "wallets.verifySeedPhrase.doNotTakeScreenshotDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Items
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let emptyTableViewAllTitle = Rswift.StringResource(key: "emptyTableView.all.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Just received %@ ETH?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let backupPromptAfterReceivingEtherTitle = Rswift.StringResource(key: "backup.prompt.afterReceivingEther.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Keystore
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreShorter = Rswift.StringResource(key: "Keystore.shorter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystore = Rswift.StringResource(key: "Keystore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreJSON = Rswift.StringResource(key: "Keystore JSON", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Keystore Password
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let enterPasswordNavigationTitleShorter = Rswift.StringResource(key: "enterPassword.navigation.title.shorter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Keystore Wallets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletTypesKeystoreWallets = Rswift.StringResource(key: "wallet.types.keystoreWallets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: LINK EXPIRY DATE
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellLinkExpiryDateTitle = Rswift.StringResource(key: "a.wallet.token.sell.linkExpiryDate.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: LINK EXPIRY TIME
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellLinkExpiryTimeTitle = Rswift.StringResource(key: "a.wallet.token.sell.linkExpiryTime.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Learn more about Gas Limit
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorLinkTitleGasLimitTooHigh = Rswift.StringResource(key: "token.transactionConfirmation.error.linkTitle.gasLimitTooHigh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Learn more about Gas Limit
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorLinkTitleGasLimitTooLow = Rswift.StringResource(key: "token.transactionConfirmation.error.linkTitle.gasLimitTooLow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Learn more about Gas Price
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorLinkTitleGasPriceTooLow = Rswift.StringResource(key: "token.transactionConfirmation.error.linkTitle.gasPriceTooLow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Learn more about Gas fees
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorLinkTitleInsufficientFundsError = Rswift.StringResource(key: "token.transactionConfirmation.error.linkTitle.insufficientFundsError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Learn more about Nonce
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorLinkTitleNonceTooLowError = Rswift.StringResource(key: "token.transactionConfirmation.error.linkTitle.nonceTooLowError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Leave the nonce empty. We'll fill it in for you
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let configureTransactionErrorLeaveNonceEmpty = Rswift.StringResource(key: "configureTransaction.error.leaveNonceEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Light
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let light = Rswift.StringResource(key: "light", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Link has already been redeemed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenLinkAlreadyRedeemed = Rswift.StringResource(key: "a.claim.token.linkAlreadyRedeemed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Link has expired
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenLinkExpired = Rswift.StringResource(key: "a.claim.token.linkExpired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Loading
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let loading = Rswift.StringResource(key: "Loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Loading...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let loadingDots = Rswift.StringResource(key: "LoadingDots", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Lock Private Key
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreLockWalletPrivateKeyButton = Rswift.StringResource(key: "keystore.lock.wallet.privateKey.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Lock Seed Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreLockWalletSeedButton = Rswift.StringResource(key: "keystore.lock.wallet.seed.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Lock your Private Key to Increase Security
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreLockWalletPrivateKeyTitle = Rswift.StringResource(key: "keystore.lock.wallet.privateKey.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Lock your Seed Phrase to Increase Security
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreLockWalletSeedTitle = Rswift.StringResource(key: "keystore.lock.wallet.seed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Logging in with Touch ID
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let lockEnterPasscodeViewModelTouchId = Rswift.StringResource(key: "lock.enter.passcode.view.model.touch.id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Lose this Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsConfirmDeleteAction = Rswift.StringResource(key: "accounts.confirm.delete.action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Low Price
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationGasPriceTooLowShort = Rswift.StringResource(key: "transactionConfiguration.gasPrice.tooLow.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: MagicLink expires on: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellConfirmExpiryDateDescription = Rswift.StringResource(key: "a.wallet.token.sell.confirm.expiryDateDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: MagicLink for Picking Up
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferModeMagicLinkButtonTitle = Rswift.StringResource(key: "a.wallet.token.transfer.mode.magicLink.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Mainnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsEnabledNetworksMainnet = Rswift.StringResource(key: "settings.enabledNetworks.mainnet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Make sure you have backup of your wallet.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsConfirmDeleteMessage = Rswift.StringResource(key: "accounts.confirm.delete.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Making backup is very simple and safe:  just write down these 12/24 words and  keep them in a secret place, offline.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsShowSeedPhraseSubtitle = Rswift.StringResource(key: "wallets.showSeedPhrase.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Market Cap
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenInfoFieldStatsMarket_cap = Rswift.StringResource(key: "token.info.field.stats.market_cap", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Market Price: %@ %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenMarketPrice = Rswift.StringResource(key: "a.wallet.token.marketPrice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Marketplace
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aMarketplaceTabbarItemTitle = Rswift.StringResource(key: "a.marketplace.tabbar.item.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Max Supply
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenInfoFieldStatsMax_supply = Rswift.StringResource(key: "token.info.field.stats.max_supply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Melt
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesAttributeMelt = Rswift.StringResource(key: "semifungibles.attribute.melt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Melt Fee Max Ratio
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesAttributeMeltFeeMaxRatio = Rswift.StringResource(key: "semifungibles.attribute.meltFeeMaxRatio", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Melt Fee Ratio
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesAttributeMeltFeeRatio = Rswift.StringResource(key: "semifungibles.attribute.meltFeeRatio", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Message
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let signatureConfirmationMessageTitle = Rswift.StringResource(key: "signature.confirmation.message.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Methods
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectConnectionMethodsTitle = Rswift.StringResource(key: "walletConnect.connection.methods.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: More
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let more = Rswift.StringResource(key: "More", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: More Details
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let moreDetails = Rswift.StringResource(key: "More Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: More networks will be available when they are enabled in the Settings tab
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let browserSettingsNetworkDescriptionTitle = Rswift.StringResource(key: "browser.settings.network.description.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Most Used
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sortTokensParamMostUsed = Rswift.StringResource(key: "sortTokens.param.mostUsed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Mumbai Testnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainMumbai = Rswift.StringResource(key: "blockchain.Mumbai", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: My %@ Wallet Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletAddressTitle = Rswift.StringResource(key: "a.wallet.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: My Bookmarks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let myBookmarks = Rswift.StringResource(key: "myBookmarks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: My Bookmarks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let myDappsButtonImageLabel = Rswift.StringResource(key: "myDappsButton.imageLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: My History
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let dappBrowserBrowserHistory = Rswift.StringResource(key: "dappBrowser.browserHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: My History
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let historyButtonImageLabel = Rswift.StringResource(key: "historyButton.imageLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: My QR Code
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let qrCodeMyqrCodeTitle = Rswift.StringResource(key: "qrCode.myqrCode.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: My Wallet Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aSettingsContentsMyWalletAddress = Rswift.StringResource(key: "a.settings.contents.myWalletAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: NOT LOCKED
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletSecurityLevelOrange = Rswift.StringResource(key: "wallet.security.level.orange", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let name = Rswift.StringResource(key: "Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectConnectionNameTitle = Rswift.StringResource(key: "walletConnect.connection.name.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectDappName = Rswift.StringResource(key: "walletConnect.dapp.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Name this Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsWalletRename = Rswift.StringResource(key: "settings.wallet.rename", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Name: Ascending
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sortTokensParamNameAscending = Rswift.StringResource(key: "sortTokens.param.nameAscending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Name: Descending
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sortTokensParamNameDescending = Rswift.StringResource(key: "sortTokens.param.nameDescending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsNetworkButtonTitle = Rswift.StringResource(key: "settings.network.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationNetwork = Rswift.StringResource(key: "token.transactionConfirmation.network", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectConnectionNetworkTitle = Rswift.StringResource(key: "walletConnect.connection.network.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Network Name
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addrpcServerNetworkNameTitle = Rswift.StringResource(key: "addrpcServer.networkName.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Network Name is invalid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addrpcServerNetworkNameError = Rswift.StringResource(key: "addrpcServer.networkName.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Networks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectConnectionNetworksTitle = Rswift.StringResource(key: "walletConnect.connection.networks.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: New
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let new = Rswift.StringResource(key: "New", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: New RPC Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addrpcServerRpcUrlPlaceholder = Rswift.StringResource(key: "addrpcServer.rpcUrl.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: New Token Found
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addHideTokensSectionNewTokens = Rswift.StringResource(key: "addHideTokens.section.newTokens", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletNextButtonTitle = Rswift.StringResource(key: "a.wallet.next.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let next = Rswift.StringResource(key: "Next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: No RPC node URL provided
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addCustomChainErrorNoRpcNodeUrl = Rswift.StringResource(key: "addCustomChain.error.noRpcNodeUrl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: No Transactions Yet!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionsNoTransactionsLabelTitle = Rswift.StringResource(key: "transactions.noTransactions.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: No Value, made for tests only
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenValueTestnetWarning = Rswift.StringResource(key: "token.value.testnetWarning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: No active WalletConnect sessions
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectSessionsEmpty = Rswift.StringResource(key: "walletConnect.sessions.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: No blockchain explorer URL provided
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addCustomChainErrorNoBlockchainExplorerUrl = Rswift.StringResource(key: "addCustomChain.error.noBlockchainExplorerUrl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: No bookmarks yet!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let browserNoBookmarksLabelTitle = Rswift.StringResource(key: "browser.noBookmarks.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: No results
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let emptyTableViewSearchTitle = Rswift.StringResource(key: "emptyTableView.search.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: No results for network you are searching for
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let searchNetworkResultEmpty = Rswift.StringResource(key: "search.network.result.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: No results for token you are searching for
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let seachTokenNoresultsTitle = Rswift.StringResource(key: "seachToken.noresults.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Non Fungible
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesAttributeNonFungible = Rswift.StringResource(key: "semifungibles.attribute.nonFungible", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Nonce
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let confirmPaymentNonceLabelTitle = Rswift.StringResource(key: "confirmPayment.nonce.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Nonce
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionNonceLabelTitle = Rswift.StringResource(key: "transaction.nonce.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Nonce (Optional)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let configureTransactionNonceLabelTitle = Rswift.StringResource(key: "configureTransaction.nonce.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Nonce must be a positive number
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let configureTransactionErrorNonceNotPositiveNumber = Rswift.StringResource(key: "configureTransaction.error.nonceNotPositiveNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Nonce of the Transaction is too low
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorTitleNonceTooLowError = Rswift.StringResource(key: "token.transactionConfirmation.error.title.nonceTooLowError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Not connected to the internet, please try again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenNoConnectivityTryAgain = Rswift.StringResource(key: "a.claim.token.noConnectivity.tryAgain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Not enough %@ to pay for fees
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorTitleInsufficientFundsError = Rswift.StringResource(key: "token.transactionConfirmation.error.title.insufficientFundsError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Note that speeding up this transaction does not guarantee your original transaction will be accelerated. If your attempt is successful, you will be charged the miner fee as above.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activitySpeedupDescription = Rswift.StringResource(key: "activity.speedup.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Note that speeding up this transaction does not guarantee your original transaction will be cancelled. If your attempt is successful, you will be charged the miner fee as above.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activityCancelDescription = Rswift.StringResource(key: "activity.cancel.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsNotificationsTitle = Rswift.StringResource(key: "settings.notifications.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: OK, I wrote this down
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsShowSeedPhraseTestSeedPhrase = Rswift.StringResource(key: "wallets.showSeedPhrase.testSeedPhrase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: OK, great!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransactionInProgressConfirm = Rswift.StringResource(key: "a.wallet.token.transaction.inProgress.confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: OK, hide my seed phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsShowSeedPhraseHideSeedPhrase = Rswift.StringResource(key: "wallets.showSeedPhrase.hideSeedPhrase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Offline
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectStatusOffline = Rswift.StringResource(key: "walletConnect.status.offline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Old TokenScript Version
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenScriptType2OldSchemaVersion = Rswift.StringResource(key: "TokenScript.type2.oldSchemaVersion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Online
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectStatusOnline = Rswift.StringResource(key: "walletConnect.status.online", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Open Settings
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let cameraQrCodeDeniedPromptButton = Rswift.StringResource(key: "camera.qrCode.denied.prompt.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Open in Browser
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let qrCodeOpenInBrowserTitle = Rswift.StringResource(key: "qrCode.openInBrowser.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Open in Etherscan
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let qrCodeOpenInEtherscanTitle = Rswift.StringResource(key: "qrCode.openInEtherscan.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Open on %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let openSeaNonFungibleTokensUrlOpen = Rswift.StringResource(key: "openSeaNonFungibleTokens.url.open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Optimistic Kovan Testnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainOptimisticKovan = Rswift.StringResource(key: "blockchain.Optimistic.Kovan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Optimistic Testnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainOptimistic = Rswift.StringResource(key: "blockchain.Optimistic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: PHONE NUMBER
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransfer = Rswift.StringResource(key: "a.wallet.token.transfer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: PRICE PER %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellPricePerTokenTitle = Rswift.StringResource(key: "a.wallet.token.sell.pricePerToken.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Palm
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainPalm = Rswift.StringResource(key: "blockchain.palm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Palm (Testnet)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainPalmTestnet = Rswift.StringResource(key: "blockchain.palm.Testnet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Passcode
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsBiometricsDisabledLabelTitle = Rswift.StringResource(key: "settings.biometricsDisabled.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Passcode / %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsBiometricsEnabledLabelTitle = Rswift.StringResource(key: "settings.biometricsEnabled.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Passcode / Touch ID
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsPasscodeTitle = Rswift.StringResource(key: "settings.passcode.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsAdvancedExportJSONKeystorePasswordLabel = Rswift.StringResource(key: "settings.advanced.exportJSONKeystore.password.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Password to encrypt Keystore
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let enterPasswordPasswordTextFieldPlaceholderShorter = Rswift.StringResource(key: "enterPassword.password.textField.placeholder.shorter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Password to encrypt Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let enterPasswordPasswordTextFieldPlaceholder = Rswift.StringResource(key: "enterPassword.password.textField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Paste
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendPasteButtonTitle = Rswift.StringResource(key: "send.paste.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Paymaster server down, please try again later
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenFailedServerDown = Rswift.StringResource(key: "a.claim.token.failed.serverDown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Pending
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionCellPendingTitle = Rswift.StringResource(key: "transaction.cell.pending.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Performance
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenInfoHeaderPerformance = Rswift.StringResource(key: "token.info.header.performance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Personal message
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let signatureConfirmationPersonalmessageTitle = Rswift.StringResource(key: "signature.confirmation.personalmessage.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Ping Infura
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsPingInfuraTitle = Rswift.StringResource(key: "settings.pingInfura.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Please enter price of %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellPriceProvideTitle = Rswift.StringResource(key: "a.wallet.token.sell.price.provide.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Please re-enter your passcode
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let lockCreatePasscodeViewModelConfirm = Rswift.StringResource(key: "lock.create.passcode.view.model.confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Please select a %@ to redeem
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenRedeemSelectTokensAtLeastOneTitle = Rswift.StringResource(key: "a.wallet.token.redeem.selectTokens.atLeastOne.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Please select a %@ to sell
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellSelectTokensAtLeastOneTitle = Rswift.StringResource(key: "a.wallet.token.sell.selectTokens.atLeastOne.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Please select a %@ to transfer
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferSelectTokensAtLeastOneTitle = Rswift.StringResource(key: "a.wallet.token.transfer.selectTokens.atLeastOne.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Please select a date in the future
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellLinkExpiryTimeAtLeastNowTitle = Rswift.StringResource(key: "a.wallet.token.sell.linkExpiryTime.atLeastNow.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Please select a date in the future
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferLinkExpiryTimeAtLeastNowTitle = Rswift.StringResource(key: "a.wallet.token.transfer.linkExpiryTime.atLeastNow.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Please select quantity of %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenRedeemSelectTokenQuantityAtLeastOneTitle = Rswift.StringResource(key: "a.wallet.token.redeem.selectTokenQuantity.atLeastOne.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Please select quantity of %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellSelectTokenQuantityAtLeastOneTitle = Rswift.StringResource(key: "a.wallet.token.sell.selectTokenQuantity.atLeastOne.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Please select quantity of %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferSelectTokenQuantityAtLeastOneTitle = Rswift.StringResource(key: "a.wallet.token.transfer.selectTokenQuantity.atLeastOne.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Please upgrade AlphaWallet to support this TokenScript file
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenScriptNotSupportedSchemaError = Rswift.StringResource(key: "tokenScript.notSupportedSchema.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Point your camera on QR code
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let qrCodeTitle = Rswift.StringResource(key: "qrCode.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Polygon Mainnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainPolygon = Rswift.StringResource(key: "blockchain.Polygon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Popular Tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addHideTokensSectionPopularTokens = Rswift.StringResource(key: "addHideTokens.section.popularTokens", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Powered by blockchain technology, smart tickets, fraud free
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWelcomeOnboarding2 = Rswift.StringResource(key: "a.welcome.onboarding.2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Preferences
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsPreferencesTitle = Rswift.StringResource(key: "settings.preferences.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Preparing backup options...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let exportPresentBackupOptionsLabelTitle = Rswift.StringResource(key: "export.presentBackupOptions.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aHelpContentsPrivacyPolicy = Rswift.StringResource(key: "a.help.contents.privacyPolicy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Private ETH transactions
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsChooseSendPrivateTransactionsProviderButtonTitle = Rswift.StringResource(key: "settings.chooseSendPrivateTransactionsProvider.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Private Key
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let privateKey = Rswift.StringResource(key: "Private Key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Private Key has to be 64 characters long
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let importWalletImportInvalidPrivateKey = Rswift.StringResource(key: "importWallet.import.invalidPrivateKey", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Processing...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenValidatingTitle = Rswift.StringResource(key: "a.claim.token.validating.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Purchase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenPurchaseButtonTitle = Rswift.StringResource(key: "a.claim.token.purchase.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: QUANTITY OF %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenRedeemQuantityTitle = Rswift.StringResource(key: "a.wallet.token.redeem.quantity.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: QUANTITY OF %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellQuantityTitle = Rswift.StringResource(key: "a.wallet.token.sell.quantity.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: QUANTITY OF %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferQuantityTitle = Rswift.StringResource(key: "a.wallet.token.transfer.quantity.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: RPC URL
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addrpcServerRpcUrlTitle = Rswift.StringResource(key: "addrpcServer.rpcUrl.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: RPC URL is invalid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addrpcServerRpcUrlError = Rswift.StringResource(key: "addrpcServer.rpcUrl.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Rankings
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesRankings = Rswift.StringResource(key: "semifungibles.rankings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Rapid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationTypeRapid = Rswift.StringResource(key: "transactionConfiguration.Type.rapid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Receive
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let receive = Rswift.StringResource(key: "Receive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Received
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionCellReceivedTitle = Rswift.StringResource(key: "transaction.cell.received.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Recent Transactions
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let recentTransactions = Rswift.StringResource(key: "recent.transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Recipient
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendRecipient = Rswift.StringResource(key: "send.recipient", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Recipient
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfirmationSendSectionRecipientTitle = Rswift.StringResource(key: "transactionConfirmation.Send.Section.Recipient.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Recipient’s Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendRecipientsAddress = Rswift.StringResource(key: "send.recipientsAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Recovery Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let recoveryPhraseNavigationTitle = Rswift.StringResource(key: "recoveryPhrase.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Reddit
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let urlReddit = Rswift.StringResource(key: "url.reddit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Redeem
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenRedeemButtonTitle = Rswift.StringResource(key: "a.wallet.token.redeem.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Redeemed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenBundleStatusRedeemedTitle = Rswift.StringResource(key: "a.wallet.tokenBundle.status.redeemed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Refresh
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let refresh = Rswift.StringResource(key: "Refresh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Reject
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let confirmPaymentRejectButtonTitle = Rswift.StringResource(key: "confirmPayment.reject.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Reload
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let browserReloadButtonTitle = Rswift.StringResource(key: "browser.reload.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Reload
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let reload = Rswift.StringResource(key: "Reload", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Remember to back up your wallet by a secure seed phrase.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let backupPromptDescriptionWithoutAmount = Rswift.StringResource(key: "backup.prompt.description.withoutAmount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Remind me to back up later?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let backupPromptBackupRemindLater = Rswift.StringResource(key: "backup.prompt.backup.remindLater", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Remove
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let removeButtonTitle = Rswift.StringResource(key: "removeButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Remove Bookmark?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let dappBrowserClearMyDapps = Rswift.StringResource(key: "dappBrowser.clearMyDapps", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Remove History?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let browserHistoryConfirmDeleteTitle = Rswift.StringResource(key: "browser.history.confirm.delete.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Rename This Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokensWalletRenameThisWallet = Rswift.StringResource(key: "tokens.wallet.renameThisWallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Rename Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsNameRename = Rswift.StringResource(key: "wallets.name.rename", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Rename Wallet to
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsNameRenameTo = Rswift.StringResource(key: "wallets.name.rename.to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Request Rejected! Switch to non watched wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectFailureMustNotBeWatchedWallet = Rswift.StringResource(key: "walletConnect.failure.mustNotBeWatchedWallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Request has timed out. Please try again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendTransactionErrorPossibleBinanceTestnetTimeout = Rswift.StringResource(key: "sendTransaction.error.possibleBinanceTestnetTimeout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Request has timed out. Please try again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendTransactionErrorRequestTimedOut = Rswift.StringResource(key: "sendTransaction.error.requestTimedOut", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Reserve
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesAttributeReserve = Rswift.StringResource(key: "semifungibles.attribute.reserve", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Retry
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let retry = Rswift.StringResource(key: "Retry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Ropsten tokens are like ‘Monopoly’ money. They have zero financial worth but are used by developers to try out new designs without needing to spend valuable coins. 
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTestnetWarning = Rswift.StringResource(key: "token.testnetWarning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Save Name
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletRenameSave = Rswift.StringResource(key: "wallet.rename.save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Save Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let editCustomRPCSaveButtonTitle = Rswift.StringResource(key: "editCustomRPC.saveButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Saving
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addMultipleCustomRpcTitle = Rswift.StringResource(key: "add.multiple.customRpc.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Scan QR Code
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let browserScanQRCodeTitle = Rswift.StringResource(key: "browser.scanQRCode.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Scan QR Code
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectSessionsScanQrCode = Rswift.StringResource(key: "walletConnect.sessions.scanQrCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Scan QR Code again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectScanQRCodeAgain = Rswift.StringResource(key: "walletConnect.scanQRCodeAgain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Scan QR Code for URL
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let browserScanQRCodeButtonTitle = Rswift.StringResource(key: "browser.scanQRCode.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Scan the QR Code or copy the text below:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletAddressScanInstructions = Rswift.StringResource(key: "a.wallet.address.scan.instructions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Search for Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let customRPCBrowseSearchPlaceholder = Rswift.StringResource(key: "customRPC.browse.search.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Search for a token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokensSearchbarPlaceholder = Rswift.StringResource(key: "tokens.searchbar.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Search or type URL
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let browserUrlTextfieldPlaceholder = Rswift.StringResource(key: "browser.url.textfield.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Search tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let editTokensSearchBarPlaceholderTitle = Rswift.StringResource(key: "editTokens.searchBar.placeholder.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Seed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let mnemonicShorter = Rswift.StringResource(key: "mnemonic.shorter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Seed Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let mnemonic = Rswift.StringResource(key: "mnemonic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Seed phrase has to be 12
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let importWalletImportInvalidMnemonicCount12 = Rswift.StringResource(key: "importWallet.import.invalidMnemonicCount.12", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Seed phrase has to be 12 or 24 words
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let importWalletImportInvalidMnemonicCount24 = Rswift.StringResource(key: "importWallet.import.invalidMnemonicCount.24", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Seed phrase is invalid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let importWalletImportInvalidMnemonic = Rswift.StringResource(key: "importWallet.import.invalidMnemonic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSelectTokens = Rswift.StringResource(key: "a.wallet.token.selectTokens", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Select %@ To Redeem:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenRedeemSelectTokensTitle = Rswift.StringResource(key: "a.wallet.token.redeem.selectTokens.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Select %@ To Sell:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellSelectTokensTitle = Rswift.StringResource(key: "a.wallet.token.sell.selectTokens.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Select %@ To Transfer:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferSelectTokensTitle = Rswift.StringResource(key: "a.wallet.token.transfer.selectTokens.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Select Active Networks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsSelectActiveNetworksTitle = Rswift.StringResource(key: "settings.selectActiveNetworks.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Select All
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesSelectionSelectAll = Rswift.StringResource(key: "semifungibles.selection.selectAll", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Select All
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesToolbarSelectAll = Rswift.StringResource(key: "semifungibles.toolbar.selectAll", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Select Asset
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let assetsSelectAssetTitle = Rswift.StringResource(key: "assets.selectAsset.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Select Quantity of %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenRedeemSelectQuantityTitle = Rswift.StringResource(key: "a.wallet.token.redeem.selectQuantity.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Selected Tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesSelectedTokens = Rswift.StringResource(key: "semifungibles.selectedTokens", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Sell
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellButtonTitle = Rswift.StringResource(key: "a.wallet.token.sell.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Sell
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesToolbarSell = Rswift.StringResource(key: "semifungibles.toolbar.sell", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferButtonTitle = Rswift.StringResource(key: "a.wallet.token.transfer.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesToolbarSend = Rswift.StringResource(key: "semifungibles.toolbar.send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let send = Rswift.StringResource(key: "Send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Send raw transaction
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectSendRawTransactionTitle = Rswift.StringResource(key: "walletConnect.sendRawTransaction.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Send to this Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let qrCodeSendToAddressTitle = Rswift.StringResource(key: "qrCode.sendToAddress.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Send/Receive
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aSendReceiveButtonTitle = Rswift.StringResource(key: "a.send.receive.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Sending %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activitySendPending = Rswift.StringResource(key: "activity.send.pending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Sent
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionCellSentTitle = Rswift.StringResource(key: "transaction.cell.sent.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Set Alert
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let priceAlertSet = Rswift.StringResource(key: "priceAlert.set", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Set Keystore Password
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let enterPasswordNavigationTitle = Rswift.StringResource(key: "enterPassword.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Set MagicLink Expiry
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellEnterLinkExpiryDateTitle = Rswift.StringResource(key: "a.wallet.token.sell.enterLinkExpiryDate.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Set New Alert
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let priceAlertSetNewAlert = Rswift.StringResource(key: "priceAlert.setNewAlert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Set Passcode
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let lockCreatePasscodeViewModelTitle = Rswift.StringResource(key: "lock.create.passcode.view.model.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Set Password for Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsAdvancedExportJSONKeystoreFilePasswordButtonInfo = Rswift.StringResource(key: "settings.advanced.exportJSONKeystore.file.passwordButton.info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Set Password for Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsAdvancedExportJSONKeystorePasswordTitle = Rswift.StringResource(key: "settings.advanced.exportJSONKeystore.password.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Set Speed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let configureTransactionNavigationBarTitle = Rswift.StringResource(key: "configureTransaction.navigationBar.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Set Speed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorRectifyButtonTitleGasLimitTooHigh = Rswift.StringResource(key: "token.transactionConfirmation.error.rectifyButtonTitle.gasLimitTooHigh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Set Speed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorRectifyButtonTitleGasLimitTooLow = Rswift.StringResource(key: "token.transactionConfirmation.error.rectifyButtonTitle.gasLimitTooLow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Set Speed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorRectifyButtonTitleGasPriceTooLow = Rswift.StringResource(key: "token.transactionConfirmation.error.rectifyButtonTitle.gasPriceTooLow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Set a Price
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellSelectQuantityTitle = Rswift.StringResource(key: "a.wallet.token.sell.selectQuantity.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Set as Home Page
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let setAsHomePage = Rswift.StringResource(key: "setAsHomePage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aSettingsNavigationTitle = Rswift.StringResource(key: "a.settings.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Share
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let share = Rswift.StringResource(key: "Share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Share
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let welldoneShareLabelText = Rswift.StringResource(key: "welldone.share.label.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Share Anonymous Data?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let analyticsShareAnonymousData = Rswift.StringResource(key: "analytics.shareAnonymousData", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Share MagicLink
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellConfirmButtonTitle = Rswift.StringResource(key: "a.wallet.token.sell.confirm.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Show My Wallet Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsShowMyWalletTitle = Rswift.StringResource(key: "settings.show.my.wallet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Show QR Code to Redemption Booth
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenRedeemShowQRCodeTitle = Rswift.StringResource(key: "a.wallet.token.redeem.showQRCode.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Show Seed Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsShowSeedPhraseButtonTitle = Rswift.StringResource(key: "settings.showSeedPhrase.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Show Seed Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsBackupHdWalletAlertSheetTitle = Rswift.StringResource(key: "wallets.backupHdWallet.alertSheet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Show Tokens on Launch
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsPreferencesButtonTitle = Rswift.StringResource(key: "settings.preferences.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Show Wallet QR Code
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let donateShortcutsWalletQrCode = Rswift.StringResource(key: "donate.shortcuts.walletQrCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Show errors
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenScriptShowErrors = Rswift.StringResource(key: "TokenScript.showErrors", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Sign
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let confirmPaymentSignButtonTitle = Rswift.StringResource(key: "confirmPayment.sign.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Signature Request
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let signatureConfirmationTitle = Rswift.StringResource(key: "signature.confirmation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Signed Transactions
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectSessionSignedTransactions = Rswift.StringResource(key: "walletConnect.session.signedTransactions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Since only you control your money, you'll need to save your backup keystore in case this app is deleted.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let exportControlYourMoneyLabelTitle = Rswift.StringResource(key: "export.controlYourMoney.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let skip = Rswift.StringResource(key: "Skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Slow
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationTypeSlow = Rswift.StringResource(key: "transactionConfiguration.Type.slow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Sold
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenBundleStatusSoldTitle = Rswift.StringResource(key: "a.wallet.tokenBundle.status.sold.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Something went wrong... Try again.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let errorViewDescriptionLabelTitle = Rswift.StringResource(key: "errorView.description.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Sort: By %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sortTokensSortBy = Rswift.StringResource(key: "sortTokens.sortBy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Speed (Gas)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationGasTitle = Rswift.StringResource(key: "token.transactionConfirmation.gas.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Speed up
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activitySpeedup = Rswift.StringResource(key: "activity.speedup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Stats
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesStats = Rswift.StringResource(key: "semifungibles.stats", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Stats
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenInfoHeaderStats = Rswift.StringResource(key: "token.info.header.stats", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Status
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectStatusPlaceholder = Rswift.StringResource(key: "walletConnect.statusPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Stay Updated
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let emailListPromptTitle = Rswift.StringResource(key: "emailList.prompt.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Still need help? Contact Us
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aHelpContactFooterButtonTitle = Rswift.StringResource(key: "a.help.contact.footer.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Summary
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletTypesSummary = Rswift.StringResource(key: "wallet.types.summary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Supply Type
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesAttributeSupplyType = Rswift.StringResource(key: "semifungibles.attribute.supplyType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Support
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsSupportTitle = Rswift.StringResource(key: "settings.support.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Support
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let suppportTitle = Rswift.StringResource(key: "suppport.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Swap
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenErc20ExchangeHoneyswapButtonTitle = Rswift.StringResource(key: "a.wallet.token.erc20ExchangeHoneyswap.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Swap
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenErc20ExchangeOn1inchButtonTitle = Rswift.StringResource(key: "a.wallet.token.erc20ExchangeOn1inch.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Swap
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenErc20ExchangeOnQuickSwapButtonTitle = Rswift.StringResource(key: "a.wallet.token.erc20ExchangeOnQuickSwap.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Swap
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenErc20ExchangeOnUniswapButtonTitle = Rswift.StringResource(key: "a.wallet.token.erc20ExchangeOnUniswap.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Swap
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activityGroupTransactionSwap = Rswift.StringResource(key: "activity.groupTransaction.swap", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Switch & Reload
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let switchChainRequestActionSwitchReload = Rswift.StringResource(key: "switchChainRequest.action.switchReload", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Switch Chain Request
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let switchChainRequestTitle = Rswift.StringResource(key: "switchChainRequest.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Switch Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectSessionSwitchNetwork = Rswift.StringResource(key: "walletConnect.session.switchNetwork", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Switch to Mainnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let whereAreMyTokensAction = Rswift.StringResource(key: "whereAreMyTokens.action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Symbol
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let symbol = Rswift.StringResource(key: "Symbol", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Symbol is invalid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addrpcServerSymbolError = Rswift.StringResource(key: "addrpcServer.symbol.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: System
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsSectionSystemTitle = Rswift.StringResource(key: "settings.section.system.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Telegram (Customer Support)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let urlTelegramCustomer = Rswift.StringResource(key: "url.telegramCustomer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Terms of Service
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aHelpContentsTermsOfService = Rswift.StringResource(key: "a.help.contents.termsOfService", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Test
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsNetworkTestLabelTitle = Rswift.StringResource(key: "settings.network.test.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Testnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsEnabledNetworksTestnet = Rswift.StringResource(key: "settings.enabledNetworks.testnet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Testnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let whereAreMyTokensTestnet = Rswift.StringResource(key: "whereAreMyTokens.testnet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Testnets tokens are like ‘Monopoly’ money. They have zero financial worth but are used by developers to try out new designs without needing to spend valuable coins.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsEnabledNetworksPromptEnableTestnetDescription = Rswift.StringResource(key: "settings.enabledNetworks.promptEnableTestnet.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Thank you!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let welldoneNavigationTitle = Rswift.StringResource(key: "welldone.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: The Ethereum blockchain network is very congested now. Fees might be higher than usual.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationGasPriceCongestedDescription = Rswift.StringResource(key: "transactionConfiguration.gasPrice.congested.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: The MagicLink will be valid until:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferMagicLinkDescriptionTitle = Rswift.StringResource(key: "a.wallet.token.transfer.magicLinkDescription.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: The gas limit prevents smart contracts from consuming all your %@. We will try to calculate the gas limit automatically for you, but some smart contracts may require a custom gas limit.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let configureTransactionGasLimitLabelDescription = Rswift.StringResource(key: "configureTransaction.gasLimit.label.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: The gas limit specified for this transaction is too low. AlphaWallet is using a live oracle and updates the gas price every 15 seconds. We recommend you to choose preselected amount (Slow, Average, Fast).
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorDescriptionGasLimitTooLow = Rswift.StringResource(key: "token.transactionConfirmation.error.description.gasLimitTooLow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: The gas price specified for this transaction is too high. AlphaWallet is using a live oracle and updates the gas price every 15 seconds. We recommend you to choose preselected amount (Slow, Average, Fast).
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorDescriptionGasLimitTooHigh = Rswift.StringResource(key: "token.transactionConfirmation.error.description.gasLimitTooHigh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: The gas price specified for this transaction is too low. AlphaWallet is using a live oracle and updates the gas price every 15 seconds. We recommend you to choose preselected amount (Slow, Average, Fast).
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorDescriptionGasPriceTooLow = Rswift.StringResource(key: "token.transactionConfirmation.error.description.gasPriceTooLow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: The higher the fee, the better chances and faster your transaction will go through. Fees are based on current Ethereum blockchain network load.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfirmationFeeFooterText = Rswift.StringResource(key: "transactionConfirmation.fee.footerText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: The network connection was lost. Please try again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendTransactionErrorNetworkConnectionWasLost = Rswift.StringResource(key: "sendTransaction.error.networkConnectionWasLost", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: The nonce is the total number of transactions which has been sent from this wallet so far, and is included for security purposes.  We recommend to leave the nonce empty.  We'll fill it for you.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorDescriptionNonceTooLowError = Rswift.StringResource(key: "token.transactionConfirmation.error.description.nonceTooLowError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: The transaction is sent to the Ethereum blockchain. It might take few minutes to be confirmed by miners.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransactionInProgressSubtitle = Rswift.StringResource(key: "a.wallet.token.transaction.inProgress.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: There might have been too many requests. Please try again later
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendTransactionErrorRateLimited = Rswift.StringResource(key: "sendTransaction.error.rateLimited", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: These entries have been temporarily removed. 
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addMultipleCustomRpcRemoved = Rswift.StringResource(key: "add.multiple.customRpc.removed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: This is Testnet Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addrpcServerIsTestnetTitle = Rswift.StringResource(key: "addrpcServer.isTestnet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: This site is requesting you to add and switch to the %@ chain with chain ID: %ld. This will reload the page.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addCustomChainAddAndSwitch = Rswift.StringResource(key: "addCustomChain.addAndSwitch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: This site is requesting you to enable and switch to the %@ chain with chain ID: %ld. This will reload the page.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addCustomChainEnableExisting = Rswift.StringResource(key: "addCustomChain.enableExisting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: This site is requesting you to switch to the %@ chain with chain ID: %ld. This will reload the page.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addCustomChainSwitchToExisting = Rswift.StringResource(key: "addCustomChain.switchToExisting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: This wallet could be only used for watching. Import Private Key/Keystore to sign transactions
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let inCoordinatorErrorOnlyWatchAccount = Rswift.StringResource(key: "InCoordinatorError.onlyWatchAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: This will restart the app
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsEnabledNetworksDeleteMessage = Rswift.StringResource(key: "settings.enabledNetworks.delete.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Ticket
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let ticketTitlecase = Rswift.StringResource(key: "ticket.titlecase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Tickets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let ticketsTitlecase = Rswift.StringResource(key: "tickets.titlecase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Time to back up your Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let backupPromptAfterIntervalTitle = Rswift.StringResource(key: "backup.prompt.afterInterval.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Title
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let dappBrowserMyDappsEditTitleLabel = Rswift.StringResource(key: "dappBrowser.myDapps.edit.title.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: To
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let confirmPaymentToLabelTitle = Rswift.StringResource(key: "confirmPayment.to.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: To
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionToLabelTitle = Rswift.StringResource(key: "transaction.to.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: To lock your private key to increase security
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreAccessKeyNonHdLock = Rswift.StringResource(key: "keystore.accessKey.nonHd.lock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: To lock your seed phrase to increase security
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreAccessKeyHdLock = Rswift.StringResource(key: "keystore.accessKey.hd.lock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Today
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let today = Rswift.StringResource(key: "Today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTitlecase = Rswift.StringResource(key: "token.titlecase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfirmationSendSectionTokenIdTitle = Rswift.StringResource(key: "transactionConfirmation.Send.Section.TokenId.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Token ID
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesTokenId = Rswift.StringResource(key: "semifungibles.tokenId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: TokenScript Compatibility
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsTokenScriptStandardTitle = Rswift.StringResource(key: "settings.tokenScriptStandard.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: TokenScript Overrides
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aHelpAssetDefinitionOverridesTitle = Rswift.StringResource(key: "a.help.assetDefinitionOverrides.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokensTitlecase = Rswift.StringResource(key: "tokens.titlecase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Tools
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aSettingsTools = Rswift.StringResource(key: "a.settings.tools", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Total Cost
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenEthCostLabelTitle = Rswift.StringResource(key: "a.claim.token.ethCostLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Total Cost:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellTotalCostTitle = Rswift.StringResource(key: "a.wallet.token.sell.totalCost.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Total Supply
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesAttributeTotalSupply = Rswift.StringResource(key: "semifungibles.attribute.totalSupply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Total Supply
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenInfoFieldStatsTotal_supply = Rswift.StringResource(key: "token.info.field.stats.total_supply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Total network fee
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let configureTransactionTotalNetworkFeeLabelTitle = Rswift.StringResource(key: "configureTransaction.totalNetworkFee.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Total: %@ %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenSellTotalEthPriceTitle = Rswift.StringResource(key: "a.wallet.token.sell.totalEthPrice.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Touch ID
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let touchId = Rswift.StringResource(key: "touch.id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Transaction
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionNavigationTitle = Rswift.StringResource(key: "transaction.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Transaction #
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionIdLabelTitle = Rswift.StringResource(key: "transaction.id.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Transaction Data (Optional)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let configureTransactionDataLabelTitle = Rswift.StringResource(key: "configureTransaction.data.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Transaction Sent!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendActionTransactionSent = Rswift.StringResource(key: "send.action.transaction.sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Transaction in Progress
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransactionInProgressTitle = Rswift.StringResource(key: "a.wallet.token.transaction.inProgress.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Transaction time
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionTimeLabelTitle = Rswift.StringResource(key: "transaction.time.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Transactions
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionsTabbarItemTitle = Rswift.StringResource(key: "transactions.tabbar.item.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Transfer %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferSelectQuantityTitle = Rswift.StringResource(key: "a.wallet.token.transfer.selectQuantity.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Transfer %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionCellTokenTransferTitle = Rswift.StringResource(key: "transaction.cell.tokenTransfer.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Transfer Fee
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesAttributeTransferFee = Rswift.StringResource(key: "semifungibles.attribute.transferFee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Transfer now
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferModeNowButtonTitle = Rswift.StringResource(key: "a.wallet.token.transfer.mode.now.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Transfer to wallet address %@?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferModeWalletAddressConfirmation = Rswift.StringResource(key: "a.wallet.token.transfer.mode.walletAddress.confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Transferable
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesAttributeTransferable = Rswift.StringResource(key: "semifungibles.attribute.transferable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Transferred
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenBundleStatusTransferredTitle = Rswift.StringResource(key: "a.wallet.tokenBundle.status.transferred.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Transferring %@...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferInProgressTitle = Rswift.StringResource(key: "a.wallet.token.transfer.inProgress.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Try WalletConnect again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectErrorConnectionTimeoutTitle = Rswift.StringResource(key: "walletConnect.error.connectionTimeout.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Try after 1 minute.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let lockEnterPasscodeViewModelTryAfterOneMinute = Rswift.StringResource(key: "lock.enter.passcode.view.model.try.after.one.minute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Twitter
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let urlTwitter = Rswift.StringResource(key: "url.twitter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: UNVERIFIED
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenUnverifiedContract = Rswift.StringResource(key: "a.wallet.token.unverifiedContract", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: USD VALUE
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletContentsValueDollarTitle = Rswift.StringResource(key: "a.wallet.contents.value.dollar.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Undefined error
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let undefinedError = Rswift.StringResource(key: "undefined.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Unknown
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionCellUnknownTitle = Rswift.StringResource(key: "transaction.cell.unknown.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Unknown Error
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addCustomChainErrorUnknown = Rswift.StringResource(key: "addCustomChain.error.unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Unnamed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let addCustomChainUnnamed = Rswift.StringResource(key: "addCustomChain.unnamed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Unsigned
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenScriptType1SupportedNotCanonicalizedAndUnsigned = Rswift.StringResource(key: "TokenScript.type1.supportedNotCanonicalizedAndUnsigned", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Use Default
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let configureTransactionBarButtonUseDefault = Rswift.StringResource(key: "configureTransaction.barButton.useDefault", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Use System Setting
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsLanguageUseSystemTitle = Rswift.StringResource(key: "settings.language.useSystem.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: VERIFIED
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenVerifiedContract = Rswift.StringResource(key: "a.wallet.token.verifiedContract", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Value
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let semifungiblesValue = Rswift.StringResource(key: "semifungibles.value", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Value: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenValue = Rswift.StringResource(key: "a.wallet.token.value", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Value: Ascending
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sortTokensParamValueAscending = Rswift.StringResource(key: "sortTokens.param.valueAscending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Value: Descending
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sortTokensParamValueDescending = Rswift.StringResource(key: "sortTokens.param.valueDescending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Verified
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenScriptType1SupportedAndSigned = Rswift.StringResource(key: "TokenScript.type1.supportedAndSigned", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Verify Seed Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsVerifySeedPhraseTitle = Rswift.StringResource(key: "wallets.verifySeedPhrase.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Verifying...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenScriptVerifying = Rswift.StringResource(key: "TokenScript.verifying", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Version
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsVersionLabelTitle = Rswift.StringResource(key: "settings.version.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: View in %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let viewIn = Rswift.StringResource(key: "view in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Wait for the transaction to be mined on the network to see details.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendActionTransactionSentWait = Rswift.StringResource(key: "send.action.transaction.sent.wait", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsSectionWalletTitle = Rswift.StringResource(key: "settings.section.wallet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletTokensTabbarItemTitle = Rswift.StringResource(key: "walletTokens.tabbar.item.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Wallet Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfirmationRowTitleWallet = Rswift.StringResource(key: "transactionConfirmation.Row.title.wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: WalletConnect
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsWalletConnectButtonTitle = Rswift.StringResource(key: "settings.walletConnect.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: WalletConnect
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectTitle = Rswift.StringResource(key: "walletConnect.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: WalletConnect Error
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectFailureTitle = Rswift.StringResource(key: "walletConnect.failure.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Wallets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsNavigationTitle = Rswift.StringResource(key: "wallets.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Warning
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let warning = Rswift.StringResource(key: "warning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Watch
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let watch = Rswift.StringResource(key: "Watch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Watch Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let qrCodeWatchWalletTitle = Rswift.StringResource(key: "qrCode.watchWallet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Watch Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletWatchButtonTitle = Rswift.StringResource(key: "wallet.watch.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Watch-only Wallets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletTypesWatchedWallets = Rswift.StringResource(key: "wallet.types.watchedWallets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: We highly recommend to back up your wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let backupPromptAfterIntervalDescription = Rswift.StringResource(key: "backup.prompt.afterInterval.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: We send an email announcing major features. Would you like to receive such emails?  (max 1 email per week)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let emailListPromptMessage = Rswift.StringResource(key: "emailList.prompt.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Website
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectDappWebsite = Rswift.StringResource(key: "walletConnect.dapp.website", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Welcome
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWelcomeNavigationTitle = Rswift.StringResource(key: "a.welcome.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Welcome to AlphaWallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let gettingStartedSubtitle = Rswift.StringResource(key: "gettingStarted.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: What is ETH/Ethereum?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aHelpContentsWhatIsETH = Rswift.StringResource(key: "a.help.contents.whatIsETH", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: What is Keystore JSON?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsBackupKeystoreWalletIntroductionTitle = Rswift.StringResource(key: "wallets.backupKeystoreWallet.introduction.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: What is Testnet?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsEnabledNetworksPromptEnableTestnetTitle = Rswift.StringResource(key: "settings.enabledNetworks.promptEnableTestnet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: What’s new?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let whatsNew = Rswift.StringResource(key: "whats.new", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Where are my Tokens?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let whereAreMyTokensTitle = Rswift.StringResource(key: "whereAreMyTokens.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Where are my tokens?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let whereAreMyTokensWhereAreMyTokens = Rswift.StringResource(key: "whereAreMyTokens.whereAreMyTokens", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Write this down, and keep it private and secure. You won't be able to restore your wallet if you lose this!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let passphraseRememberLabelTitle = Rswift.StringResource(key: "passphrase.remember.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Wrong Input
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let sendErrorWrongInput = Rswift.StringResource(key: "send.error.wrongInput", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Yesterday
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let yesterday = Rswift.StringResource(key: "Yesterday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You already added this address to wallets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let accountsDeleteErrorDuplicateAccount = Rswift.StringResource(key: "accounts.delete.error.duplicateAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You do not have enough ETH to import this ticket
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenFailedNotEnoughEthTitle = Rswift.StringResource(key: "a.claim.token.failed.notEnoughEth.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You do not have enough xDAI to import this ticket
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenFailedNotEnoughXDAITitle = Rswift.StringResource(key: "a.claim.token.failed.notEnoughXDAI.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You don't have any %@ yet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let emptyTableViewWalletTitle = Rswift.StringResource(key: "emptyTableView.wallet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You don't have any tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletNoTokens = Rswift.StringResource(key: "a.wallet.no.tokens", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You have denied access to your wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let keystoreAccessKeyCancelled = Rswift.StringResource(key: "keystore.accessKey.cancelled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You have no bookmarks displayed yet. Start by surfing the browser.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let dappBrowserMyDappsEmpty = Rswift.StringResource(key: "dappBrowser.myDapps.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You have not backed up your wallet yet. You have %@ USD net. Act now.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let backupPromptDescriptionWithAmount = Rswift.StringResource(key: "backup.prompt.description.withAmount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You have not backed up your wallet yet. You have %@ USD net. Act now. 
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let backupPromptAfterHittingThresholdDescription = Rswift.StringResource(key: "backup.prompt.afterHittingThreshold.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You have received %@ %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionsReceivedEther = Rswift.StringResource(key: "transactions.received.ether", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You have successfully redeemed your %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenRedeemSuccessfulDescription = Rswift.StringResource(key: "a.wallet.token.redeem.successful.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You haven't received any tokens yet!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let emptyViewNoTokensLabelTitle = Rswift.StringResource(key: "emptyView.noTokens.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You might be sending this transaction on the wrong chain.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenTransactionConfirmationErrorDescriptionPossibleChainIdMismatchError = Rswift.StringResource(key: "token.transactionConfirmation.error.description.possibleChainIdMismatchError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You must enter the same passsword in Password and Confirm Password
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let backupPasswordConfirmationMustMatch = Rswift.StringResource(key: "backupPassword.confirmation.mustMatch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You must remember your password. We do not store your password elsewhere. KeyStore JSON file is always encrypted, otherwise whoever has it has access to your money.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let enterPasswordPasswordHeaderPlaceholder = Rswift.StringResource(key: "enterPassword.password.header.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You set a really high gas price. Please make sure this is not a mistake
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let transactionConfigurationGasPriceTooHighDescription = Rswift.StringResource(key: "transactionConfiguration.gasPrice.tooHigh.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: You tried to connect with WalletConnect. Well.. It takes too long. Please generate a fresh QR code and try again.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletConnectErrorConnectionTimeoutErrorMessage = Rswift.StringResource(key: "walletConnect.error.connectionTimeout.errorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Your %@ has been transferred
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferSuccessTitle = Rswift.StringResource(key: "a.wallet.token.transfer.success.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Your %@ was not transferred
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aWalletTokenTransferFailedTitle = Rswift.StringResource(key: "a.wallet.token.transfer.failed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Your Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsAdvancedExportJSONKeystoreFileLabel = Rswift.StringResource(key: "settings.advanced.exportJSONKeystore.file.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Your Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let settingsAdvancedExportJSONKeystorePasswordPasswordButtonPassword = Rswift.StringResource(key: "settings.advanced.exportJSONKeystore.password.passwordButton.password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Your Seed Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsShowSeedPhraseTitle = Rswift.StringResource(key: "wallets.showSeedPhrase.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Your Wallet is at risk!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let backupPromptAfterHittingThresholdTitle = Rswift.StringResource(key: "backup.prompt.afterHittingThreshold.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Your Wallet is not backed up!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let backupPromptTitle = Rswift.StringResource(key: "backup.prompt.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Your browser history appears here.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let browserNoHistoryLabelTitle = Rswift.StringResource(key: "browser.noHistory.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Your device isn't configured to send email
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let emailNotConfigured = Rswift.StringResource(key: "email.not.configured", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Your funds will be at risk if you do not back up before using your wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let onboardingNewWalletBackupWalletDescription = Rswift.StringResource(key: "onboarding.newWallet.backupWallet.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Your privacy settings are preventing us from accessing your camera for QR code scanning. Fix this by:  1. Tap the Open Settings button below to open the Settings app.  2. Tap to enable the Camera on.  3. Launch this app again.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let cameraQrCodeDeniedPromptMessage = Rswift.StringResource(key: "camera.qrCode.denied.prompt.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Your seed phrase (do not share with anyone)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let walletsShowSeedPhraseSubtitle2 = Rswift.StringResource(key: "wallets.showSeedPhrase.subtitle2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Your ticket has been transferred and the balance will be updated shortly
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aClaimTokenSuccessTitle = Rswift.StringResource(key: "a.claim.token.success.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: Your wallet is never saved to cloud storage or standard device backups.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let exportNeverStoredLabelTitle = Rswift.StringResource(key: "export.neverStored.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: cryptokitties
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let katLowercase = Rswift.StringResource(key: "kat.lowercase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: faq
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let urlFaq = Rswift.StringResource(key: "url.faq", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: from %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activityFrom = Rswift.StringResource(key: "activity.from", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: iCloud/Dropbox/Google Drive
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let importWalletImportAlertSheetOptionTitle = Rswift.StringResource(key: "importWallet.import.alertSheet.option.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: iOS Version: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let aHelpContactEmailIosVersion = Rswift.StringResource(key: "a.help.contact.email.iosVersion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: ticket
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let ticketLowercase = Rswift.StringResource(key: "ticket.lowercase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: tickets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let ticketsLowercase = Rswift.StringResource(key: "tickets.lowercase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: to %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let activityTo = Rswift.StringResource(key: "activity.to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokenLowercase = Rswift.StringResource(key: "token.lowercase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let tokensLowercase = Rswift.StringResource(key: "tokens.lowercase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)
      /// en translation: xDAI Chain
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static let blockchainXDAI = Rswift.StringResource(key: "blockchain.XDAI", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "zh-Hans", "ja", "ko", "fi"], comment: nil)

      /// en translation: 
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func dappBrowserTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dappBrowser.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dappBrowser.title"
        }

        return NSLocalizedString("dappBrowser.title", bundle: bundle, comment: "")
      }

      /// en translation: %@  Start WalletConnect session on:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectStart(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("walletConnect.start", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.start"
        }

        let format = NSLocalizedString("walletConnect.start", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ %@/%@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellPerTokenEthPriceTitle(_ value1: String, _ value2: String, _ value3: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.sell.perTokenEthPrice.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.perTokenEthPrice.title"
        }

        let format = NSLocalizedString("a.wallet.token.sell.perTokenEthPrice.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2, value3)
      }

      /// en translation: %@ - WARNING. HIGH FEE.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func confirmPaymentHighFeeWarning(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("confirmPayment.highFeeWarning", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmPayment.highFeeWarning"
        }

        let format = NSLocalizedString("confirmPayment.highFeeWarning", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Selected
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesSelectedTokens2(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("semifungibles.selectedTokens.2", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.selectedTokens.2"
        }

        let format = NSLocalizedString("semifungibles.selectedTokens.2", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Today
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletSummaryToday(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("wallet.summary.today", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet.summary.today"
        }

        let format = NSLocalizedString("wallet.summary.today", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ are disabled. Please enable them in Settings > Select Active Networks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func serverWarningServersAreDisabled(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("server.warning.serversAreDisabled", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "server.warning.serversAreDisabled"
        }

        let format = NSLocalizedString("server.warning.serversAreDisabled", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ duplicate entries not added. 
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addMultipleCustomRpcDuplicates(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("add.multiple.customRpc.duplicates", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add.multiple.customRpc.duplicates"
        }

        let format = NSLocalizedString("add.multiple.customRpc.duplicates", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ entries added. 
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addMultipleCustomRpcAdded(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("add.multiple.customRpc.added", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add.multiple.customRpc.added"
        }

        let format = NSLocalizedString("add.multiple.customRpc.added", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ entries failed to add. 
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addMultipleCustomRpcFailed(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("add.multiple.customRpc.failed", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add.multiple.customRpc.failed"
        }

        let format = NSLocalizedString("add.multiple.customRpc.failed", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ file imported with no error
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenscriptImportOk(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("tokenscript.import.ok", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tokenscript.import.ok"
        }

        let format = NSLocalizedString("tokenscript.import.ok", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ is disabled. Please enable it in Settings > Select Active Networks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func serverWarningServerIsDisabled(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("server.warning.serverIsDisabled", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "server.warning.serverIsDisabled"
        }

        let format = NSLocalizedString("server.warning.serverIsDisabled", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@-%@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenMatchVs(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.match.vs", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.match.vs"
        }

        let format = NSLocalizedString("a.wallet.token.match.vs", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: %d %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellConfirmMultipleTokenSelectedTitle(_ value1: Int, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.sell.confirm.multipleTokenSelected.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.confirm.multipleTokenSelected.title"
        }

        let format = NSLocalizedString("a.wallet.token.sell.confirm.multipleTokenSelected.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: %d %@ Selected
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellMultipleTokenSelectedTitle(_ value1: Int, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.sell.multipleTokenSelected.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.multipleTokenSelected.title"
        }

        let format = NSLocalizedString("a.wallet.token.sell.multipleTokenSelected.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: %d Assets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesAssetsCount(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("semifungibles.assetsCount", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.assetsCount"
        }

        let format = NSLocalizedString("semifungibles.assetsCount", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: (New: %@ %@)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfirmationSendSectionBalanceNewTitle(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("transactionConfirmation.Send.Section.Balance.new.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfirmation.Send.Section.Balance.new.title"
        }

        let format = NSLocalizedString("transactionConfirmation.Send.Section.Balance.new.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: 1 %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellConfirmSingleTokenSelectedTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.sell.confirm.singleTokenSelected.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.confirm.singleTokenSelected.title"
        }

        let format = NSLocalizedString("a.wallet.token.sell.confirm.singleTokenSelected.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: 1 %@ Selected
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellSingleTokenSelectedTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.sell.singleTokenSelected.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.singleTokenSelected.title"
        }

        let format = NSLocalizedString("a.wallet.token.sell.singleTokenSelected.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: 1 Day
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenInfoFieldStatsDay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.info.field.stats.day", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.info.field.stats.day"
        }

        return NSLocalizedString("token.info.field.stats.day", bundle: bundle, comment: "")
      }

      /// en translation: 1 Month
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenInfoFieldStatsMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.info.field.stats.month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.info.field.stats.month"
        }

        return NSLocalizedString("token.info.field.stats.month", bundle: bundle, comment: "")
      }

      /// en translation: 1 Week
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenInfoFieldStatsWeek(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.info.field.stats.week", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.info.field.stats.week"
        }

        return NSLocalizedString("token.info.field.stats.week", bundle: bundle, comment: "")
      }

      /// en translation: 1 Year
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenInfoFieldStatsYear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.info.field.stats.year", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.info.field.stats.year"
        }

        return NSLocalizedString("token.info.field.stats.year", bundle: bundle, comment: "")
      }

      /// en translation: 1 Year High
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenInfoFieldPerformanceYearHigh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.info.field.performance.year.high", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.info.field.performance.year.high"
        }

        return NSLocalizedString("token.info.field.performance.year.high", bundle: bundle, comment: "")
      }

      /// en translation: 1 Year Low
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenInfoFieldPerformanceYearLow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.info.field.performance.year.low", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.info.field.performance.year.low"
        }

        return NSLocalizedString("token.info.field.performance.year.low", bundle: bundle, comment: "")
      }

      /// en translation: 100% SECURE
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletSecurityLevelGreen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet.security.level.green", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet.security.level.green"
        }

        return NSLocalizedString("wallet.security.level.green", bundle: bundle, comment: "")
      }

      /// en translation: 24 HOURS
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletContentsValuePeriodTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.contents.value.period.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.contents.value.period.title"
        }

        return NSLocalizedString("a.wallet.contents.value.period.title", bundle: bundle, comment: "")
      }

      /// en translation: < 2 min
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationTypeFastTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.Type.fast.time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.Type.fast.time"
        }

        return NSLocalizedString("transactionConfiguration.Type.fast.time", bundle: bundle, comment: "")
      }

      /// en translation: < 5 min
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationTypeAverageTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.Type.average.time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.Type.average.time"
        }

        return NSLocalizedString("transactionConfiguration.Type.average.time", bundle: bundle, comment: "")
      }

      /// en translation: > 10 min
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationTypeSlowTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.Type.slow.time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.Type.slow.time"
        }

        return NSLocalizedString("transactionConfiguration.Type.slow.time", bundle: bundle, comment: "")
      }

      /// en translation: A Keystore is a text file. You can copy its contents when you want to import your wallet. This is a safe way to back up a wallet.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsBackupKeystoreWalletIntroductionDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.backupKeystoreWallet.introduction.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.backupKeystoreWallet.introduction.description"
        }

        return NSLocalizedString("wallets.backupKeystoreWallet.introduction.description", bundle: bundle, comment: "")
      }

      /// en translation: A MagicLink will be created to allow buyers to purchase your %@.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellMagicLinkDescriptionTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.sell.magicLinkDescription.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.magicLinkDescription.title"
        }

        let format = NSLocalizedString("a.wallet.token.sell.magicLinkDescription.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: ADDRESS
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aSendRecipientAddressTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.send.recipient.address.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.send.recipient.address.title"
        }

        return NSLocalizedString("a.send.recipient.address.title", bundle: bundle, comment: "")
      }

      /// en translation: APPRECIATION
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletContentsValueAppreciationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.contents.value.appreciation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.contents.value.appreciation.title"
        }

        return NSLocalizedString("a.wallet.contents.value.appreciation.title", bundle: bundle, comment: "")
      }

      /// en translation: ARTIS sigma1 Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainARTISSigma1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.ARTIS.sigma1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.ARTIS.sigma1"
        }

        return NSLocalizedString("blockchain.ARTIS.sigma1", bundle: bundle, comment: "")
      }

      /// en translation: ARTIS tau1 Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainARTISTau1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.ARTIS.tau1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.ARTIS.tau1"
        }

        return NSLocalizedString("blockchain.ARTIS.tau1", bundle: bundle, comment: "")
      }

      /// en translation: ASAP
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationTypeRapidTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.Type.rapid.time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.Type.rapid.time"
        }

        return NSLocalizedString("transactionConfiguration.Type.rapid.time", bundle: bundle, comment: "")
      }

      /// en translation: Above
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func priceAlertAbove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priceAlert.above", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "priceAlert.above"
        }

        return NSLocalizedString("priceAlert.above", bundle: bundle, comment: "")
      }

      /// en translation: Accessing to perform transfer
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfirmationKeystoreAccessKeySign(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfirmation.keystore.accessKey.sign", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfirmation.keystore.accessKey.sign"
        }

        return NSLocalizedString("transactionConfirmation.keystore.accessKey.sign", bundle: bundle, comment: "")
      }

      /// en translation: Accessing your wallet key to back it up
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreAccessKeyNonHdBackup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.accessKey.nonHd.backup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.accessKey.nonHd.backup"
        }

        return NSLocalizedString("keystore.accessKey.nonHd.backup", bundle: bundle, comment: "")
      }

      /// en translation: Accessing your wallet key to sign
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreAccessKeySign(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.accessKey.sign", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.accessKey.sign"
        }

        return NSLocalizedString("keystore.accessKey.sign", bundle: bundle, comment: "")
      }

      /// en translation: Accessing your wallet seed phrase to back it up
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreAccessKeyHdBackup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.accessKey.hd.backup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.accessKey.hd.backup"
        }

        return NSLocalizedString("keystore.accessKey.hd.backup", bundle: bundle, comment: "")
      }

      /// en translation: Accessing your wallet seed phrase to let you verify against it
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreAccessKeyHdPrepareToVerify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.accessKey.hd.prepareToVerify", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.accessKey.hd.prepareToVerify"
        }

        return NSLocalizedString("keystore.accessKey.hd.prepareToVerify", bundle: bundle, comment: "")
      }

      /// en translation: Accessing your wallet seed phrase to verify against it
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreAccessKeyHdVerify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.accessKey.hd.verify", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.accessKey.hd.verify"
        }

        return NSLocalizedString("keystore.accessKey.hd.verify", bundle: bundle, comment: "")
      }

      /// en translation: Account not found
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsDeleteErrorAccountNotFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.error.accountNotFound", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.error.accountNotFound"
        }

        return NSLocalizedString("accounts.delete.error.accountNotFound", bundle: bundle, comment: "")
      }

      /// en translation: Active connection to Dapps
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectActiveSessions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.activeSessions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.activeSessions"
        }

        return NSLocalizedString("walletConnect.activeSessions", bundle: bundle, comment: "")
      }

      /// en translation: Active connections to Dapps
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectActiveSessionsPlural(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.activeSessions.plural", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.activeSessions.plural"
        }

        return NSLocalizedString("walletConnect.activeSessions.plural", bundle: bundle, comment: "")
      }

      /// en translation: Activities will appear here
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activityEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("activity.empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.empty"
        }

        return NSLocalizedString("activity.empty", bundle: bundle, comment: "")
      }

      /// en translation: Activity
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activityTabbarItemTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("activity.tabbar.item.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.tabbar.item.title"
        }

        return NSLocalizedString("activity.tabbar.item.title", bundle: bundle, comment: "")
      }

      /// en translation: Activity
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTabActivity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.tab.activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.tab.activity"
        }

        return NSLocalizedString("token.tab.activity", bundle: bundle, comment: "")
      }

      /// en translation: Add
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addButton.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addButton.title"
        }

        return NSLocalizedString("addButton.title", bundle: bundle, comment: "")
      }

      /// en translation: Add / Hide Tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addHideTokensTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addHideTokens.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addHideTokens.title"
        }

        return NSLocalizedString("addHideTokens.title", bundle: bundle, comment: "")
      }

      /// en translation: Add / Hide Tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsAddHideTokensTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.addHideTokens.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.addHideTokens.title"
        }

        return NSLocalizedString("wallets.addHideTokens.title", bundle: bundle, comment: "")
      }

      /// en translation: Add Custom RPC Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addrpcServerNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addrpcServer.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addrpcServer.navigation.title"
        }

        return NSLocalizedString("addrpcServer.navigation.title", bundle: bundle, comment: "")
      }

      /// en translation: Add Custom Token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addCustomTokenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addCustomToken.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addCustomToken.title"
        }

        return NSLocalizedString("addCustomToken.title", bundle: bundle, comment: "")
      }

      /// en translation: Add Custom Token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func qrCodeAddCustomTokenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qrCode.addCustomToken.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qrCode.addCustomToken.title"
        }

        return NSLocalizedString("qrCode.addCustomToken.title", bundle: bundle, comment: "")
      }

      /// en translation: Add Custom Token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokensNewtokenNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tokens.newtoken.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tokens.newtoken.navigation.title"
        }

        return NSLocalizedString("tokens.newtoken.navigation.title", bundle: bundle, comment: "")
      }

      /// en translation: Add Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addrpcServerSaveButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addrpcServer.saveButton.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addrpcServer.saveButton.title"
        }

        return NSLocalizedString("addrpcServer.saveButton.title", bundle: bundle, comment: "")
      }

      /// en translation: Add New Price Alert
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func priceAlertNewAlert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priceAlert.newAlert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "priceAlert.newAlert"
        }

        return NSLocalizedString("priceAlert.newAlert", bundle: bundle, comment: "")
      }

      /// en translation: Add to My Bookmarks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func browserAddbookmarkButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("browser.addbookmark.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "browser.addbookmark.button.title"
        }

        return NSLocalizedString("browser.addbookmark.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Add token failure
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsHideTokenErrorAddTokenFailure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.hideToken.error.AddTokenFailure", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.hideToken.error.AddTokenFailure"
        }

        return NSLocalizedString("wallets.hideToken.error.AddTokenFailure", bundle: bundle, comment: "")
      }

      /// en translation: Add, Switch & Reload %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func switchChainRequestActionAddSwitchReload(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("switchChainRequest.action.addSwitchReload", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "switchChainRequest.action.addSwitchReload"
        }

        let format = NSLocalizedString("switchChainRequest.action.addSwitchReload", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func dappBrowserMyDappsEditUrlLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dappBrowser.myDapps.edit.url.label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dappBrowser.myDapps.edit.url.label"
        }

        return NSLocalizedString("dappBrowser.myDapps.edit.url.label", bundle: bundle, comment: "")
      }

      /// en translation: Address Book
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendPasteButtonAddressBook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send.paste.button.addressBook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send.paste.button.addressBook"
        }

        return NSLocalizedString("send.paste.button.addressBook", bundle: bundle, comment: "")
      }

      /// en translation: Address copied
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func requestAddressCopiedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("request.addressCopied.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "request.addressCopied.title"
        }

        return NSLocalizedString("request.addressCopied.title", bundle: bundle, comment: "")
      }

      /// en translation: Advanced
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aAdvancedSettingsNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.advanced.settings.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.advanced.settings.navigation.title"
        }

        return NSLocalizedString("a.advanced.settings.navigation.title", bundle: bundle, comment: "")
      }

      /// en translation: Advanced
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func advanced(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Advanced", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Advanced"
        }

        return NSLocalizedString("Advanced", bundle: bundle, comment: "")
      }

      /// en translation: Advanced
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsAdvancedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.advanced.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.advanced.title"
        }

        return NSLocalizedString("settings.advanced.title", bundle: bundle, comment: "")
      }

      /// en translation: Alerts
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func priceAlertNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priceAlert.navigationTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "priceAlert.navigationTitle"
        }

        return NSLocalizedString("priceAlert.navigationTitle", bundle: bundle, comment: "")
      }

      /// en translation: Alerts will appear here
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func priceAlertEmptyList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priceAlert.emptyList", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "priceAlert.emptyList"
        }

        return NSLocalizedString("priceAlert.emptyList", bundle: bundle, comment: "")
      }

      /// en translation: All
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletContentsFilterAllTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.contents.filter.all.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.contents.filter.all.title"
        }

        return NSLocalizedString("a.wallet.contents.filter.all.title", bundle: bundle, comment: "")
      }

      /// en translation: All %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activityApproveAmountAll(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("activity.approve.amount.all", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.approve.amount.all"
        }

        let format = NSLocalizedString("activity.approve.amount.all", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: All Funds
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendAllFunds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send.allFunds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send.allFunds"
        }

        return NSLocalizedString("send.allFunds", bundle: bundle, comment: "")
      }

      /// en translation: Allow Notifications When You Receive %@?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionsReceivedEtherNotificationPrompt(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("transactions.received.ether.notification.prompt", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactions.received.ether.notification.prompt"
        }

        let format = NSLocalizedString("transactions.received.ether.notification.prompt", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: AlphaWallet security is being upgraded to the best achievable. Lock your private key with biometrics
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreLockWalletPrivateKeyDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.lock.wallet.privateKey.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.lock.wallet.privateKey.description"
        }

        return NSLocalizedString("keystore.lock.wallet.privateKey.description", bundle: bundle, comment: "")
      }

      /// en translation: AlphaWallet security is being upgraded to the best achievable. Lock your seed phrase with biometrics
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreLockWalletSeedDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.lock.wallet.seed.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.lock.wallet.seed.description"
        }

        return NSLocalizedString("keystore.lock.wallet.seed.description", bundle: bundle, comment: "")
      }

      /// en translation: AlphaWallet will NEVER ask about your seed phrase (especially on Telegram).
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsShowSeedPhraseIntroductionSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.showSeedPhrase.introduction.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.showSeedPhrase.introduction.subtitle"
        }

        return NSLocalizedString("wallets.showSeedPhrase.introduction.subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Already supported. Enable this server instead
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addrpcServerChainIdAlreadySupported(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addrpcServer.chainIdAlreadySupported", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addrpcServer.chainIdAlreadySupported"
        }

        return NSLocalizedString("addrpcServer.chainIdAlreadySupported", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send.amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send.amount"
        }

        return NSLocalizedString("send.amount", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfirmationSendSectionAmountTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfirmation.Send.Section.Amount.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfirmation.Send.Section.Amount.title"
        }

        return NSLocalizedString("transactionConfirmation.Send.Section.Amount.title", bundle: bundle, comment: "")
      }

      /// en translation: An unknown error occurred.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func unknownError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unknown.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unknown.error"
        }

        return NSLocalizedString("unknown.error", bundle: bundle, comment: "")
      }

      /// en translation: Analytics
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func analyticsNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("analytics.navigationTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "analytics.navigationTitle"
        }

        return NSLocalizedString("analytics.navigationTitle", bundle: bundle, comment: "")
      }

      /// en translation: Analytics
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsAnalitycsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.analitycs.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.analitycs.title"
        }

        return NSLocalizedString("settings.analitycs.title", bundle: bundle, comment: "")
      }

      /// en translation: Any 'jailbreak' app can access AlphaWallet's keychain data and steal your wallet! Wipe this wallet immediately and restore on a secure device.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func appDeviceJailbreakDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app.device.jailbreak.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app.device.jailbreak.description"
        }

        return NSLocalizedString("app.device.jailbreak.description", bundle: bundle, comment: "")
      }

      /// en translation: App Version: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aHelpContactEmailAppVersion(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.help.contact.email.appVersion", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.help.contact.email.appVersion"
        }

        let format = NSLocalizedString("a.help.contact.email.appVersion", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Approve %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionCellTokenApproveTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("transaction.cell.tokenApprove.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.cell.tokenApprove.title"
        }

        let format = NSLocalizedString("transaction.cell.tokenApprove.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Approved to move %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activityOwnerApproved(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("activity.ownerApproved", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.ownerApproved"
        }

        let format = NSLocalizedString("activity.ownerApproved", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Approving to move %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activityOwnerApprovedPending(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("activity.ownerApproved.pending", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.ownerApproved.pending"
        }

        let format = NSLocalizedString("activity.ownerApproved.pending", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Arbitrum
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainArbitrum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.arbitrum", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.arbitrum"
        }

        return NSLocalizedString("blockchain.arbitrum", bundle: bundle, comment: "")
      }

      /// en translation: Arbitrum Rinkeby
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainArbitrumRinkeby(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.arbitrum.rinkeby", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.arbitrum.rinkeby"
        }

        return NSLocalizedString("blockchain.arbitrum.rinkeby", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to clear your history?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func dappBrowserClearHistoryPrompt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dappBrowser.clearHistory.prompt", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dappBrowser.clearHistory.prompt"
        }

        return NSLocalizedString("dappBrowser.clearHistory.prompt", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you would like to delete this bookmark?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func browserBookmarksConfirmDeleteTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("browser.bookmarks.confirm.delete.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "browser.bookmarks.confirm.delete.title"
        }

        return NSLocalizedString("browser.bookmarks.confirm.delete.title", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you would like to delete this server?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsEnabledNetworksDeleteTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.enabledNetworks.delete.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.enabledNetworks.delete.title"
        }

        return NSLocalizedString("settings.enabledNetworks.delete.title", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you would like to delete this wallet?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsConfirmDeleteTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.confirm.delete.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.confirm.delete.title"
        }

        return NSLocalizedString("accounts.confirm.delete.title", bundle: bundle, comment: "")
      }

      /// en translation: Assets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletContentsFilterAssetsOnlyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.contents.filter.assetsOnly.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.contents.filter.assetsOnly.title"
        }

        return NSLocalizedString("a.wallet.contents.filter.assetsOnly.title", bundle: bundle, comment: "")
      }

      /// en translation: Assets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesAssetsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.assets.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.assets.title"
        }

        return NSLocalizedString("semifungibles.assets.title", bundle: bundle, comment: "")
      }

      /// en translation: Attempt to Cancel
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionCancelConfirmationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionCancelConfirmation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionCancelConfirmation.title"
        }

        return NSLocalizedString("token.transactionCancelConfirmation.title", bundle: bundle, comment: "")
      }

      /// en translation: Attributes
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesAttributes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.attributes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.attributes"
        }

        return NSLocalizedString("semifungibles.attributes", bundle: bundle, comment: "")
      }

      /// en translation: Authorize to confirm transaction
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfirmationAuthorisationReason(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfirmation.authorisation.reason", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfirmation.authorisation.reason"
        }

        return NSLocalizedString("transactionConfirmation.authorisation.reason", bundle: bundle, comment: "")
      }

      /// en translation: Auto
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func detectingServerAutomaticallyButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detecting.serverAutomatically.buttonTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detecting.serverAutomatically.buttonTitle"
        }

        return NSLocalizedString("detecting.serverAutomatically.buttonTitle", bundle: bundle, comment: "")
      }

      /// en translation: Available To Mint
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesAttributeAvailableToMint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.attribute.availableToMint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.attribute.availableToMint"
        }

        return NSLocalizedString("semifungibles.attribute.availableToMint", bundle: bundle, comment: "")
      }

      /// en translation: Available: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendAvailable(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("send.available", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send.available"
        }

        let format = NSLocalizedString("send.available", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Avalanche FUJI C-Chain
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainAvalancheTest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.Avalanche.test", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.Avalanche.test"
        }

        return NSLocalizedString("blockchain.Avalanche.test", bundle: bundle, comment: "")
      }

      /// en translation: Avalanche Mainnet C-Chain
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainAvalanche(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.Avalanche", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.Avalanche"
        }

        return NSLocalizedString("blockchain.Avalanche", bundle: bundle, comment: "")
      }

      /// en translation: Average
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationTypeAverage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.Type.average", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.Type.average"
        }

        return NSLocalizedString("transactionConfiguration.Type.average", bundle: bundle, comment: "")
      }

      /// en translation: BACK UP NOW!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletSecurityLevelRed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet.security.level.red", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet.security.level.red"
        }

        return NSLocalizedString("wallet.security.level.red", bundle: bundle, comment: "")
      }

      /// en translation: Back up Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func backupPromptBackupButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backup.prompt.backupButton.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backup.prompt.backupButton.title"
        }

        return NSLocalizedString("backup.prompt.backupButton.title", bundle: bundle, comment: "")
      }

      /// en translation: Back up my Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsBackupHdWalletIntroductionButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.backupHdWallet.introduction.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.backupHdWallet.introduction.button.title"
        }

        return NSLocalizedString("wallets.backupHdWallet.introduction.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Back up this Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsBackupWalletButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.backupWallet.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.backupWallet.button.title"
        }

        return NSLocalizedString("settings.backupWallet.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Back up your Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func onboardingNewWalletBackupWalletTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding.newWallet.backupWallet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding.newWallet.backupWallet.title"
        }

        return NSLocalizedString("onboarding.newWallet.backupWallet.title", bundle: bundle, comment: "")
      }

      /// en translation: Back up your Wallet with Seed Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsBackupHdWalletIntroductionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.backupHdWallet.introduction.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.backupHdWallet.introduction.title"
        }

        return NSLocalizedString("wallets.backupHdWallet.introduction.title", bundle: bundle, comment: "")
      }

      /// en translation: Backup Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func exportBackupButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("export.backup.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "export.backup.button.title"
        }

        return NSLocalizedString("export.backup.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Balance
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Balance"
        }

        return NSLocalizedString("Balance", bundle: bundle, comment: "")
      }

      /// en translation: Balance
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfirmationSendSectionBalanceTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfirmation.Send.Section.Balance.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfirmation.Send.Section.Balance.title"
        }

        return NSLocalizedString("transactionConfirmation.Send.Section.Balance.title", bundle: bundle, comment: "")
      }

      /// en translation: Be safe, back up your wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func exportNoBackupLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("export.noBackup.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "export.noBackup.label.title"
        }

        return NSLocalizedString("export.noBackup.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Before the link expires, anyone with the MagicLink can claim your tickets with one click
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferNoteLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.transfer.noteLabel.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.noteLabel.title"
        }

        return NSLocalizedString("a.wallet.token.transfer.noteLabel.title", bundle: bundle, comment: "")
      }

      /// en translation: Before the link expires, anyone with the MagicLink can purchase your %@ with one click
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellNoteLabelTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.sell.noteLabel.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.noteLabel.title"
        }

        let format = NSLocalizedString("a.wallet.token.sell.noteLabel.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Below
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func priceAlertBelow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priceAlert.below", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "priceAlert.below"
        }

        return NSLocalizedString("priceAlert.below", bundle: bundle, comment: "")
      }

      /// en translation: Beware of scammers! Don’t share seed phrase.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsShowSeedPhraseIntroductionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.showSeedPhrase.introduction.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.showSeedPhrase.introduction.title"
        }

        return NSLocalizedString("wallets.showSeedPhrase.introduction.title", bundle: bundle, comment: "")
      }

      /// en translation: Binance (BSC) Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainBinance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.Binance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.Binance"
        }

        return NSLocalizedString("blockchain.Binance", bundle: bundle, comment: "")
      }

      /// en translation: Binance (BSC) Testnet Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainBinanceTest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.Binance.test", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.Binance.test"
        }

        return NSLocalizedString("blockchain.Binance.test", bundle: bundle, comment: "")
      }

      /// en translation: Block #
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionBlockNumberLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.blockNumber.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.blockNumber.label.title"
        }

        return NSLocalizedString("transaction.blockNumber.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Block Explorer
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addrpcServerBlockExplorerUrlPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addrpcServer.blockExplorerUrl.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addrpcServer.blockExplorerUrl.placeholder"
        }

        return NSLocalizedString("addrpcServer.blockExplorerUrl.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Block Explorer URL
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addrpcServerBlockExplorerUrlTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addrpcServer.blockExplorerUrl.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addrpcServer.blockExplorerUrl.title"
        }

        return NSLocalizedString("addrpcServer.blockExplorerUrl.title", bundle: bundle, comment: "")
      }

      /// en translation: Block Explorer URL is invalid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addrpcServerBlockExplorerUrlError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addrpcServer.blockExplorerUrl.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addrpcServer.blockExplorerUrl.error"
        }

        return NSLocalizedString("addrpcServer.blockExplorerUrl.error", bundle: bundle, comment: "")
      }

      /// en translation: Blockchain explorer URL can't be resolved. Would you like to continue without it? Transaction history will not be fetched
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addCustomChainWarningNoBlockchainExplorerUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addCustomChain.warning.noBlockchainExplorerUrl", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addCustomChain.warning.noBlockchainExplorerUrl"
        }

        return NSLocalizedString("addCustomChain.warning.noBlockchainExplorerUrl", bundle: bundle, comment: "")
      }

      /// en translation: Blog
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func supportBlogTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("support.blog.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "support.blog.title"
        }

        return NSLocalizedString("support.blog.title", bundle: bundle, comment: "")
      }

      /// en translation: Bookmarks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func bookmarks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bookmarks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Bookmarks"
        }

        return NSLocalizedString("Bookmarks", bundle: bundle, comment: "")
      }

      /// en translation: Browse
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func customRPCOverallTabBrowse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("customRPC.overall.tab.browse", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "customRPC.overall.tab.browse"
        }

        return NSLocalizedString("customRPC.overall.tab.browse", bundle: bundle, comment: "")
      }

      /// en translation: Browse
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func photos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("photos", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "photos"
        }

        return NSLocalizedString("photos", bundle: bundle, comment: "")
      }

      /// en translation: Browser
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func browserTabbarItemTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("browser.tabbar.item.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "browser.tabbar.item.title"
        }

        return NSLocalizedString("browser.tabbar.item.title", bundle: bundle, comment: "")
      }

      /// en translation: Buy
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenBuyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.buy.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.buy.title"
        }

        return NSLocalizedString("a.wallet.token.buy.title", bundle: bundle, comment: "")
      }

      /// en translation: Buy %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorRectifyButtonTitleInsufficientFundsError(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("token.transactionConfirmation.error.rectifyButtonTitle.insufficientFundsError", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.rectifyButtonTitle.insufficientFundsError"
        }

        let format = NSLocalizedString("token.transactionConfirmation.error.rectifyButtonTitle.insufficientFundsError", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Buy Crypto
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func buyCryptoTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("buyCrypto.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "buyCrypto.title"
        }

        return NSLocalizedString("buyCrypto.title", bundle: bundle, comment: "")
      }

      /// en translation: Buy xDai
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenBuyXDaiTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.buy.xDai.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.buy.xDai.title"
        }

        return NSLocalizedString("a.wallet.token.buy.xDai.title", bundle: bundle, comment: "")
      }

      /// en translation: Buy, sell and transfer your favourite tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWelcomeOnboarding3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.welcome.onboarding.3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.welcome.onboarding.3"
        }

        return NSLocalizedString("a.welcome.onboarding.3", bundle: bundle, comment: "")
      }

      /// en translation: Camera Access Required to Scan QR Code
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func cameraQrCodeDeniedPromptTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera.qrCode.denied.prompt.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera.qrCode.denied.prompt.title"
        }

        return NSLocalizedString("camera.qrCode.denied.prompt.title", bundle: bundle, comment: "")
      }

      /// en translation: Can't access your wallet. If you have migrated to a new phone or restored your device, you need to import your wallet again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreAccessKeyNeedImportOrPasscode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.accessKey.needImportOrPasscode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.accessKey.needImportOrPasscode"
        }

        return NSLocalizedString("keystore.accessKey.needImportOrPasscode", bundle: bundle, comment: "")
      }

      /// en translation: Can't lock your wallet key. Maybe your iOS Passcode is not enabled?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreAccessKeyLockFail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.accessKey.lock.fail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.accessKey.lock.fail"
        }

        return NSLocalizedString("keystore.accessKey.lock.fail", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellConfirmCancelButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.sell.confirm.cancel.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.confirm.cancel.button.title"
        }

        return NSLocalizedString("a.wallet.token.sell.confirm.cancel.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activityCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("activity.cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.cancel"
        }

        return NSLocalizedString("activity.cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Chain ID
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func chainID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Chain ID", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Chain ID"
        }

        return NSLocalizedString("Chain ID", bundle: bundle, comment: "")
      }

      /// en translation: Chain ID already exists
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func editCustomRPCChainIDErrorDuplicate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editCustomRPC.chainID.error.duplicate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editCustomRPC.chainID.error.duplicate"
        }

        return NSLocalizedString("editCustomRPC.chainID.error.duplicate", bundle: bundle, comment: "")
      }

      /// en translation: Chain ID is invalid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addrpcServerChainIDError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addrpcServer.chainID.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addrpcServer.chainID.error"
        }

        return NSLocalizedString("addrpcServer.chainID.error", bundle: bundle, comment: "")
      }

      /// en translation: Chain ID is not supported: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func switchChainErrorNotSupportedChainId(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("switchChain.error.notSupportedChainId", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "switchChain.error.notSupportedChainId"
        }

        let format = NSLocalizedString("switchChain.error.notSupportedChainId", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Chain IDs returned by the RPC server do not match: %@ vs. %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addCustomChainErrorChainIdNotMatch(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("addCustomChain.error.chainIdNotMatch", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addCustomChain.error.chainIdNotMatch"
        }

        let format = NSLocalizedString("addCustomChain.error.chainIdNotMatch", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Change / Add Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsChangeWalletTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.change.wallet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.change.wallet.title"
        }

        return NSLocalizedString("settings.change.wallet.title", bundle: bundle, comment: "")
      }

      /// en translation: Change Currency
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsChangeCurrencyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.changeCurrency.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.changeCurrency.title"
        }

        return NSLocalizedString("settings.changeCurrency.title", bundle: bundle, comment: "")
      }

      /// en translation: Change Language
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsLanguageButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.language.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.language.button.title"
        }

        return NSLocalizedString("settings.language.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Change Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsWalletsButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.wallets.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.wallets.button.title"
        }

        return NSLocalizedString("settings.wallets.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Change Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet.navigation.title"
        }

        return NSLocalizedString("wallet.navigation.title", bundle: bundle, comment: "")
      }

      /// en translation: Check out AlphaWallet - The first crypto mobile wallet which can interact with smart contracts to perform real-world use cases.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func welldoneViewmodelSharingText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("welldone.viewmodel.sharing.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "welldone.viewmodel.sharing.text"
        }

        return NSLocalizedString("welldone.viewmodel.sharing.text", bundle: bundle, comment: "")
      }

      /// en translation: Check your Email/SMS for the import link. Tap it and it will automatically import to the app!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletImportWalletBubbleDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.import.wallet.bubble.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.import.wallet.bubble.description"
        }

        return NSLocalizedString("a.wallet.import.wallet.bubble.description", bundle: bundle, comment: "")
      }

      /// en translation: Circulating Supply
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesAttributeCirculatingSupply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.attribute.circulatingSupply", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.attribute.circulatingSupply"
        }

        return NSLocalizedString("semifungibles.attribute.circulatingSupply", bundle: bundle, comment: "")
      }

      /// en translation: Clear
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func clearButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("clearButton.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "clearButton.title"
        }

        return NSLocalizedString("clearButton.title", bundle: bundle, comment: "")
      }

      /// en translation: Clear
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesToolbarClear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.toolbar.clear", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.toolbar.clear"
        }

        return NSLocalizedString("semifungibles.toolbar.clear", bundle: bundle, comment: "")
      }

      /// en translation: Clear Browser cache
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aSettingsContentsClearDappBrowserCache(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.settings.contents.clearDappBrowserCache", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.settings.contents.clearDappBrowserCache"
        }

        return NSLocalizedString("a.settings.contents.clearDappBrowserCache", bundle: bundle, comment: "")
      }

      /// en translation: Clear History?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func dappBrowserClearHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dappBrowser.clearHistory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dappBrowser.clearHistory"
        }

        return NSLocalizedString("dappBrowser.clearHistory", bundle: bundle, comment: "")
      }

      /// en translation: Collectibles
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletContentsFilterCollectiblesOnlyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.contents.filter.collectiblesOnly.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.contents.filter.collectiblesOnly.title"
        }

        return NSLocalizedString("a.wallet.contents.filter.collectiblesOnly.title", bundle: bundle, comment: "")
      }

      /// en translation: Coming soon
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func comingSoon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("coming.soon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "coming.soon"
        }

        return NSLocalizedString("coming.soon", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func confirmPaymentConfirmButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPayment.confirm.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmPayment.confirm.button.title"
        }

        return NSLocalizedString("confirmPayment.confirm.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Purchase?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionPurchaseConfirmationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionPurchaseConfirmation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionPurchaseConfirmation.title"
        }

        return NSLocalizedString("token.transactionPurchaseConfirmation.title", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Sale?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellConfirmTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.sell.confirm.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.confirm.title"
        }

        return NSLocalizedString("a.wallet.token.sell.confirm.title", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Transaction?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.title"
        }

        return NSLocalizedString("token.transactionConfirmation.title", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Transaction?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionSpeedupConfirmationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionSpeedupConfirmation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionSpeedupConfirmation.title"
        }

        return NSLocalizedString("token.transactionSpeedupConfirmation.title", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Transfer?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionTransferConfirmationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionTransferConfirmation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionTransferConfirmation.title"
        }

        return NSLocalizedString("token.transactionTransferConfirmation.title", bundle: bundle, comment: "")
      }

      /// en translation: Confirm signing this message:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func confirmSignMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmSignMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmSignMessage"
        }

        return NSLocalizedString("confirmSignMessage", bundle: bundle, comment: "")
      }

      /// en translation: Confirmation
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfirmationLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.confirmation.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.confirmation.label.title"
        }

        return NSLocalizedString("transaction.confirmation.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Conflicting TokenScript Files
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenScriptType2ConflictingFiles(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TokenScript.type2.conflictingFiles", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TokenScript.type2.conflictingFiles"
        }

        return NSLocalizedString("TokenScript.type2.conflictingFiles", bundle: bundle, comment: "")
      }

      /// en translation: Congrats
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenRedeemSuccessfulTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.redeem.successful.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.redeem.successful.title"
        }

        return NSLocalizedString("a.wallet.token.redeem.successful.title", bundle: bundle, comment: "")
      }

      /// en translation: Connect
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func confirmPaymentConnectButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPayment.connect.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmPayment.connect.button.title"
        }

        return NSLocalizedString("confirmPayment.connect.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Connect To Site?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectConnectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.connection.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.connection.title"
        }

        return NSLocalizedString("walletConnect.connection.title", bundle: bundle, comment: "")
      }

      /// en translation: Connect on %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectSessionConnect(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("walletConnect.session.connect", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.session.connect"
        }

        let format = NSLocalizedString("walletConnect.session.connect", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Connected To
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectConnectionUrlTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.connection.url.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.connection.url.title"
        }

        return NSLocalizedString("walletConnect.connection.url.title", bundle: bundle, comment: "")
      }

      /// en translation: Connected Wallets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletTypesHdWallets(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet.types.hdWallets", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet.types.hdWallets"
        }

        return NSLocalizedString("wallet.types.hdWallets", bundle: bundle, comment: "")
      }

      /// en translation: Connected to
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectSessionConnectedURL(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.session.connectedURL", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.session.connectedURL"
        }

        return NSLocalizedString("walletConnect.session.connectedURL", bundle: bundle, comment: "")
      }

      /// en translation: Connected to: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func dappBrowserSwitchServer(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("dappBrowser.switchServer", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dappBrowser.switchServer"
        }

        let format = NSLocalizedString("dappBrowser.switchServer", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Console
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aConsoleTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.console.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.console.title"
        }

        return NSLocalizedString("a.console.title", bundle: bundle, comment: "")
      }

      /// en translation: Contact Us
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsContactUsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.contactUs.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.contactUs.title"
        }

        return NSLocalizedString("settings.contactUs.title", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func `continue`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Continue"
        }

        return NSLocalizedString("Continue", bundle: bundle, comment: "")
      }

      /// en translation: Contract
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationContractTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.contract.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.contract.title"
        }

        return NSLocalizedString("token.transactionConfirmation.contract.title", bundle: bundle, comment: "")
      }

      /// en translation: Contract Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func contractAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Contract Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Contract Address"
        }

        return NSLocalizedString("Contract Address", bundle: bundle, comment: "")
      }

      /// en translation: Contract Execution
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activityGroupTransactionUnknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("activity.groupTransaction.unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.groupTransaction.unknown"
        }

        return NSLocalizedString("activity.groupTransaction.unknown", bundle: bundle, comment: "")
      }

      /// en translation: Convert to Arbitrum
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenArbitrumBridgeButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.arbitrumBridge.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.arbitrumBridge.button.title"
        }

        return NSLocalizedString("a.wallet.token.arbitrumBridge.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Convert to DAI
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenXDaiBridgeButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.xDaiBridge.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.xDaiBridge.button.title"
        }

        return NSLocalizedString("a.wallet.token.xDaiBridge.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Copied to clipboard
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func copiedToClipboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("copiedToClipboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "copiedToClipboard"
        }

        return NSLocalizedString("copiedToClipboard", bundle: bundle, comment: "")
      }

      /// en translation: Copy
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func copy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Copy"
        }

        return NSLocalizedString("Copy", bundle: bundle, comment: "")
      }

      /// en translation: Copy Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func copyAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copy Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Copy Address"
        }

        return NSLocalizedString("Copy Address", bundle: bundle, comment: "")
      }

      /// en translation: Copy Transaction ID
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendActionCopyTransactionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send.action.copy.transaction.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send.action.copy.transaction.title"
        }

        return NSLocalizedString("send.action.copy.transaction.title", bundle: bundle, comment: "")
      }

      /// en translation: Copy wallet address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func requestCopyWalletButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("request.copyWallet.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "request.copyWallet.button.title"
        }

        return NSLocalizedString("request.copyWallet.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Correct Nonce
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorRectifyButtonTitleNonceTooLowError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.rectifyButtonTitle.nonceTooLowError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.rectifyButtonTitle.nonceTooLowError"
        }

        return NSLocalizedString("token.transactionConfirmation.error.rectifyButtonTitle.nonceTooLowError", bundle: bundle, comment: "")
      }

      /// en translation: Could not decrypt key with given passphrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsDeleteErrorFailedToDecryptKey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.error.failedToDecryptKey", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.error.failedToDecryptKey"
        }

        return NSLocalizedString("accounts.delete.error.failedToDecryptKey", bundle: bundle, comment: "")
      }

      /// en translation: Create Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletCreateButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet.create.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet.create.button.title"
        }

        return NSLocalizedString("wallet.create.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Create a New Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func gettingStartedNewWallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gettingStarted.newWallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gettingStarted.newWallet"
        }

        return NSLocalizedString("gettingStarted.newWallet", bundle: bundle, comment: "")
      }

      /// en translation: Created
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesCreatedDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.createdDate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.createdDate"
        }

        return NSLocalizedString("semifungibles.createdDate", bundle: bundle, comment: "")
      }

      /// en translation: Creating wallet...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletCreateInProgress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet.create.inProgress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet.create.inProgress"
        }

        return NSLocalizedString("wallet.create.inProgress", bundle: bundle, comment: "")
      }

      /// en translation: Cronos Testnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainCronosTestnet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.Cronos.Testnet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.Cronos.Testnet"
        }

        return NSLocalizedString("blockchain.Cronos.Testnet", bundle: bundle, comment: "")
      }

      /// en translation: Cryptokitty
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func katTitlecase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kat.titlecase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "kat.titlecase"
        }

        return NSLocalizedString("kat.titlecase", bundle: bundle, comment: "")
      }

      /// en translation: Currencies
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletContentsFilterCurrencyOnlyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.contents.filter.currencyOnly.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.contents.filter.currencyOnly.title"
        }

        return NSLocalizedString("a.wallet.contents.filter.currencyOnly.title", bundle: bundle, comment: "")
      }

      /// en translation: Currency
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsCurrencyButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.currency.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.currency.button.title"
        }

        return NSLocalizedString("settings.currency.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Current locale: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aHelpContactEmailLocale(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.help.contact.email.locale", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.help.contact.email.locale"
        }

        let format = NSLocalizedString("a.help.contact.email.locale", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Custom (set your own)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationTypeCustom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.Type.custom", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.Type.custom"
        }

        return NSLocalizedString("transactionConfiguration.Type.custom", bundle: bundle, comment: "")
      }

      /// en translation: DEBUG
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenDebugContract(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.debugContract", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.debugContract"
        }

        return NSLocalizedString("a.wallet.token.debugContract", bundle: bundle, comment: "")
      }

      /// en translation: DEVICE SECURITY COMPROMISED
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func appDeviceJailbreakTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app.device.jailbreak.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app.device.jailbreak.title"
        }

        return NSLocalizedString("app.device.jailbreak.title", bundle: bundle, comment: "")
      }

      /// en translation: Data
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func confirmPaymentDataLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPayment.data.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmPayment.data.label.title"
        }

        return NSLocalizedString("confirmPayment.data.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Deal
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesToolbarDeal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.toolbar.deal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.toolbar.deal"
        }

        return NSLocalizedString("semifungibles.toolbar.deal", bundle: bundle, comment: "")
      }

      /// en translation: Decimals
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func decimals(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Decimals", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Decimals"
        }

        return NSLocalizedString("Decimals", bundle: bundle, comment: "")
      }

      /// en translation: Default
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationDefault(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.default", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.default"
        }

        return NSLocalizedString("token.transactionConfirmation.default", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsConfirmDeleteOkTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.confirm.delete.okTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.confirm.delete.okTitle"
        }

        return NSLocalizedString("accounts.confirm.delete.okTitle", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete"
        }

        return NSLocalizedString("Delete", bundle: bundle, comment: "")
      }

      /// en translation: Deleting
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func deleting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Deleting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Deleting"
        }

        return NSLocalizedString("Deleting", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.description"
        }

        return NSLocalizedString("semifungibles.description", bundle: bundle, comment: "")
      }

      /// en translation: Details
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.details"
        }

        return NSLocalizedString("semifungibles.details", bundle: bundle, comment: "")
      }

      /// en translation: Detect Automatically
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func detectingServerAutomatically(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detecting.serverAutomatically", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detecting.serverAutomatically"
        }

        return NSLocalizedString("detecting.serverAutomatically", bundle: bundle, comment: "")
      }

      /// en translation: Detecting token type…
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func detectingTokenTypeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detecting.token.type.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detecting.token.type.title"
        }

        return NSLocalizedString("detecting.token.type.title", bundle: bundle, comment: "")
      }

      /// en translation: Device Model: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aHelpContactEmailDeviceModel(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.help.contact.email.deviceModel", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.help.contact.email.deviceModel"
        }

        let format = NSLocalizedString("a.help.contact.email.deviceModel", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Disconnect
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectSessionDisconnect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.session.disconnect", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.session.disconnect"
        }

        return NSLocalizedString("walletConnect.session.disconnect", bundle: bundle, comment: "")
      }

      /// en translation: Discord
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func urlDiscord(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("url.discord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "url.discord"
        }

        return NSLocalizedString("url.discord", bundle: bundle, comment: "")
      }

      /// en translation: Discover Dapps
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func discoverDappsButtonImageLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("discoverDappsButton.imageLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "discoverDappsButton.imageLabel"
        }

        return NSLocalizedString("discoverDappsButton.imageLabel", bundle: bundle, comment: "")
      }

      /// en translation: Displayed Tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addHideTokensSectionDisplayedTokens(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addHideTokens.section.displayedTokens", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addHideTokens.section.displayedTokens"
        }

        return NSLocalizedString("addHideTokens.section.displayedTokens", bundle: bundle, comment: "")
      }

      /// en translation: Do not share your backup. AlphaWallet team members will not ask for it.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsShowSeedPhraseSubtitleError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.showSeedPhrase.subtitle.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.showSeedPhrase.subtitle.error"
        }

        return NSLocalizedString("wallets.showSeedPhrase.subtitle.error", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Done"
        }

        return NSLocalizedString("Done", bundle: bundle, comment: "")
      }

      /// en translation: Don’t worry. Your tokens are safe. You are viewing Testnet networks. They are used by developers to try out new designs. You can switch to Mainnet any time.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func whereAreMyTokensDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("whereAreMyTokens.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "whereAreMyTokens.description"
        }

        return NSLocalizedString("whereAreMyTokens.description", bundle: bundle, comment: "")
      }

      /// en translation: DuckDuckGo
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func duckDuckGo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DuckDuckGo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DuckDuckGo"
        }

        return NSLocalizedString("DuckDuckGo", bundle: bundle, comment: "")
      }

      /// en translation: ENS
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfirmationRowTitleEns(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfirmation.Row.title.ens", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfirmation.Row.title.ens"
        }

        return NSLocalizedString("transactionConfirmation.Row.title.ens", bundle: bundle, comment: "")
      }

      /// en translation: EQUIVALENT IN USD
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenDollarCostLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.dollarCostLabel.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.dollarCostLabel.title"
        }

        return NSLocalizedString("a.claim.token.dollarCostLabel.title", bundle: bundle, comment: "")
      }

      /// en translation: EQUIVALENT IN USD
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellDollarCostLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.sell.dollarCostLabel.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.dollarCostLabel.title"
        }

        return NSLocalizedString("a.wallet.token.sell.dollarCostLabel.title", bundle: bundle, comment: "")
      }

      /// en translation: Eden
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendPrivateTransactionsProviderEden(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendPrivateTransactionsProvider.eden", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendPrivateTransactionsProvider.eden"
        }

        return NSLocalizedString("sendPrivateTransactionsProvider.eden", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func editButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editButton.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editButton.title"
        }

        return NSLocalizedString("editButton.title", bundle: bundle, comment: "")
      }

      /// en translation: Edit Alert
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func priceAlertEdit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priceAlert.edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "priceAlert.edit"
        }

        return NSLocalizedString("priceAlert.edit", bundle: bundle, comment: "")
      }

      /// en translation: Edit Bookmark
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func dappBrowserMyDappsEdit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dappBrowser.myDapps.edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dappBrowser.myDapps.edit"
        }

        return NSLocalizedString("dappBrowser.myDapps.edit", bundle: bundle, comment: "")
      }

      /// en translation: Edit Custom RPC Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func editCustomRPCNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editCustomRPC.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editCustomRPC.navigation.title"
        }

        return NSLocalizedString("editCustomRPC.navigation.title", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func emailListPromptEmailPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailList.prompt.email.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emailList.prompt.email.placeholder"
        }

        return NSLocalizedString("emailList.prompt.email.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func supportEmailTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("support.email.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "support.email.title"
        }

        return NSLocalizedString("support.email.title", bundle: bundle, comment: "")
      }

      /// en translation: Email is not valid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func emailListEmailInvalid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailList.email.invalid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emailList.email.invalid"
        }

        return NSLocalizedString("emailList.email.invalid", bundle: bundle, comment: "")
      }

      /// en translation: Empty
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func empty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Empty"
        }

        return NSLocalizedString("Empty", bundle: bundle, comment: "")
      }

      /// en translation: Empty ClipBoard
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendErrorEmptyClipBoard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send.error.emptyClipBoard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send.error.emptyClipBoard"
        }

        return NSLocalizedString("send.error.emptyClipBoard", bundle: bundle, comment: "")
      }

      /// en translation: Enable, Switch & Reload
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func switchChainRequestActionEnableSwitchReload(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("switchChainRequest.action.enableSwitchReload", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "switchChainRequest.action.enableSwitchReload"
        }

        return NSLocalizedString("switchChainRequest.action.enableSwitchReload", bundle: bundle, comment: "")
      }

      /// en translation: Enabled Networks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsEnabledNetworksButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.enabledNetworks.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.enabledNetworks.button.title"
        }

        return NSLocalizedString("settings.enabledNetworks.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Endpoint
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func endpoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Endpoint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Endpoint"
        }

        return NSLocalizedString("Endpoint", bundle: bundle, comment: "")
      }

      /// en translation: Enter
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func customRPCOverallTabManual(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("customRPC.overall.tab.manual", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "customRPC.overall.tab.manual"
        }

        return NSLocalizedString("customRPC.overall.tab.manual", bundle: bundle, comment: "")
      }

      /// en translation: Enter Name (min. 5 characters)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletRenameEnterNameTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet.rename.enterNameTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet.rename.enterNameTitle"
        }

        return NSLocalizedString("wallet.rename.enterNameTitle", bundle: bundle, comment: "")
      }

      /// en translation: Enter a new password
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func lockCreatePasscodeViewModelInitial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lock.create.passcode.view.model.initial", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lock.create.passcode.view.model.initial"
        }

        return NSLocalizedString("lock.create.passcode.view.model.initial", bundle: bundle, comment: "")
      }

      /// en translation: Enter target price
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func priceAlertEnterTargetPrice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priceAlert.enterTargetPrice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "priceAlert.enterTargetPrice"
        }

        return NSLocalizedString("priceAlert.enterTargetPrice", bundle: bundle, comment: "")
      }

      /// en translation: Enter your passcode.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func lockEnterPasscodeViewModelInitial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lock.enter.passcode.view.model.initial", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lock.enter.passcode.view.model.initial"
        }

        return NSLocalizedString("lock.enter.passcode.view.model.initial", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error"
        }

        return NSLocalizedString("error", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionCellErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.cell.error.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.cell.error.title"
        }

        return NSLocalizedString("transaction.cell.error.title", bundle: bundle, comment: "")
      }

      /// en translation: Error moving asset definition file from %@ to: %@: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenScriptMoveFileError(_ value1: String, _ value2: String, _ value3: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("tokenScript.moveFile.error", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tokenScript.moveFile.error"
        }

        let format = NSLocalizedString("tokenScript.moveFile.error", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2, value3)
      }

      /// en translation: Estimate Network Fee
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func confirmPaymentGasFeeLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPayment.gasFee.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmPayment.gasFee.label.title"
        }

        return NSLocalizedString("confirmPayment.gasFee.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Ethereum Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func ethereumAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ethereum Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ethereum Address"
        }

        return NSLocalizedString("Ethereum Address", bundle: bundle, comment: "")
      }

      /// en translation: Ethereum Blockchain
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainEthereum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.ethereum", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.ethereum"
        }

        return NSLocalizedString("blockchain.ethereum", bundle: bundle, comment: "")
      }

      /// en translation: Ethereum address or ENS name
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addressEnsLabelMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("address.ens.labelMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "address.ens.labelMessage"
        }

        return NSLocalizedString("address.ens.labelMessage", bundle: bundle, comment: "")
      }

      /// en translation: Ethermine
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendPrivateTransactionsProviderEtheremine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendPrivateTransactionsProvider.etheremine", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendPrivateTransactionsProvider.etheremine"
        }

        return NSLocalizedString("sendPrivateTransactionsProvider.etheremine", bundle: bundle, comment: "")
      }

      /// en translation: Every transaction requires a small amount of %@ (%@) to pay for the fees. You can receive %@ from a different wallet, crypto exchange, or you can buy %@ using the button below.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorDescriptionInsufficientFundsError(_ value1: String, _ value2: String, _ value3: String, _ value4: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("token.transactionConfirmation.error.description.insufficientFundsError", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3, value4)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.description.insufficientFundsError"
        }

        let format = NSLocalizedString("token.transactionConfirmation.error.description.insufficientFundsError", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2, value3, value4)
      }

      /// en translation: Export Keystore
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsBackupKeystoreWalletAlertSheetTitleShorter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.backupKeystoreWallet.alertSheet.title.shorter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.backupKeystoreWallet.alertSheet.title.shorter"
        }

        return NSLocalizedString("wallets.backupKeystoreWallet.alertSheet.title.shorter", bundle: bundle, comment: "")
      }

      /// en translation: Export Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsAdvancedExportJSONKeystoreFilePasswordButtonPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.advanced.exportJSONKeystore.file.passwordButton.password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.advanced.exportJSONKeystore.file.passwordButton.password"
        }

        return NSLocalizedString("settings.advanced.exportJSONKeystore.file.passwordButton.password", bundle: bundle, comment: "")
      }

      /// en translation: Export Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsAdvancedExportJSONKeystoreFileTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.advanced.exportJSONKeystore.file.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.advanced.exportJSONKeystore.file.title"
        }

        return NSLocalizedString("settings.advanced.exportJSONKeystore.file.title", bundle: bundle, comment: "")
      }

      /// en translation: Export Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsAdvancedExportJSONKeystorePasswordPasswordButtonInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.advanced.exportJSONKeystore.password.passwordButton.info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.advanced.exportJSONKeystore.password.passwordButton.info"
        }

        return NSLocalizedString("settings.advanced.exportJSONKeystore.password.passwordButton.info", bundle: bundle, comment: "")
      }

      /// en translation: Export Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsAdvancedExportJSONKeystoreTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.advanced.exportJSONKeystore.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.advanced.exportJSONKeystore.title"
        }

        return NSLocalizedString("settings.advanced.exportJSONKeystore.title", bundle: bundle, comment: "")
      }

      /// en translation: Export Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsBackupKeystoreWalletAlertSheetTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.backupKeystoreWallet.alertSheet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.backupKeystoreWallet.alertSheet.title"
        }

        return NSLocalizedString("wallets.backupKeystoreWallet.alertSheet.title", bundle: bundle, comment: "")
      }

      /// en translation: Exporting
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsAdvancedExportJSONKeystoreFileExporting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.advanced.exportJSONKeystore.file.exporting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.advanced.exportJSONKeystore.file.exporting"
        }

        return NSLocalizedString("settings.advanced.exportJSONKeystore.file.exporting", bundle: bundle, comment: "")
      }

      /// en translation: Face ID
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func faceId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("face.id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "face.id"
        }

        return NSLocalizedString("face.id", bundle: bundle, comment: "")
      }

      /// en translation: Facebook
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func urlFacebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("url.facebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "url.facebook"
        }

        return NSLocalizedString("url.facebook", bundle: bundle, comment: "")
      }

      /// en translation: Failed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionCellFailedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.cell.failed.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.cell.failed.title"
        }

        return NSLocalizedString("transaction.cell.failed.title", bundle: bundle, comment: "")
      }

      /// en translation: Failed to Approve to move %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activityOwnerApprovedFailed(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("activity.ownerApproved.failed", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.ownerApproved.failed"
        }

        let format = NSLocalizedString("activity.ownerApproved.failed", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Failed to Send %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activitySendFailed(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("activity.send.failed", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.send.failed"
        }

        let format = NSLocalizedString("activity.send.failed", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Failed to add chains.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addMultipleCustomRpcError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add.multiple.customRpc.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add.multiple.customRpc.error"
        }

        return NSLocalizedString("add.multiple.customRpc.error", bundle: bundle, comment: "")
      }

      /// en translation: Failed to create wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsDeleteErrorFailedToCreateWallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.error.failedToCreateWallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.error.failedToCreateWallet"
        }

        return NSLocalizedString("accounts.delete.error.failedToCreateWallet", bundle: bundle, comment: "")
      }

      /// en translation: Failed to delete account
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsDeleteErrorFailedToDeleteAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.error.failedToDeleteAccount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.error.failedToDeleteAccount"
        }

        return NSLocalizedString("accounts.delete.error.failedToDeleteAccount", bundle: bundle, comment: "")
      }

      /// en translation: Failed to export private key
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsDeleteErrorFailedToExportPrivateKey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.error.failedToExportPrivateKey", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.error.failedToExportPrivateKey"
        }

        return NSLocalizedString("accounts.delete.error.failedToExportPrivateKey", bundle: bundle, comment: "")
      }

      /// en translation: Failed to export wallet seed. If you have migrated to a new phone or restored your device, you need to import your wallet again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsDeleteErrorFailedToExportSeed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.error.failedToExportSeed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.error.failedToExportSeed"
        }

        return NSLocalizedString("accounts.delete.error.failedToExportSeed", bundle: bundle, comment: "")
      }

      /// en translation: Failed to import private key
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsDeleteErrorFailedToImportPrivateKey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.error.failedToImportPrivateKey", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.error.failedToImportPrivateKey"
        }

        return NSLocalizedString("accounts.delete.error.failedToImportPrivateKey", bundle: bundle, comment: "")
      }

      /// en translation: Failed to parse key JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsDeleteErrorFailedToParseJSON(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.error.failedToParseJSON", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.error.failedToParseJSON"
        }

        return NSLocalizedString("accounts.delete.error.failedToParseJSON", bundle: bundle, comment: "")
      }

      /// en translation: Failed to send email. Make sure you have Mail app installed.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsErrorFailedToSendEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.error.failedToSendEmail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.error.failedToSendEmail"
        }

        return NSLocalizedString("settings.error.failedToSendEmail", bundle: bundle, comment: "")
      }

      /// en translation: Failed to sign message
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsDeleteErrorFailedToSignMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.error.failedToSignMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.error.failedToSignMessage"
        }

        return NSLocalizedString("accounts.delete.error.failedToSignMessage", bundle: bundle, comment: "")
      }

      /// en translation: Failed to sign transaction
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsDeleteErrorFailedToSignTransaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.error.failedToSignTransaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.error.failedToSignTransaction"
        }

        return NSLocalizedString("accounts.delete.error.failedToSignTransaction", bundle: bundle, comment: "")
      }

      /// en translation: Failed to update password
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsDeleteErrorFailedToUpdatePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.error.failedToUpdatePassword", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.error.failedToUpdatePassword"
        }

        return NSLocalizedString("accounts.delete.error.failedToUpdatePassword", bundle: bundle, comment: "")
      }

      /// en translation: Fantom Blockchain
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainFantom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.fantom", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.fantom"
        }

        return NSLocalizedString("blockchain.fantom", bundle: bundle, comment: "")
      }

      /// en translation: Fantom Testnet Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainFantomTest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.fantom.test", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.fantom.test"
        }

        return NSLocalizedString("blockchain.fantom.test", bundle: bundle, comment: "")
      }

      /// en translation: Fast
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationTypeFast(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.Type.fast", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.Type.fast"
        }

        return NSLocalizedString("transactionConfiguration.Type.fast", bundle: bundle, comment: "")
      }

      /// en translation: Field required!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func warningFieldRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("warning.fieldRequired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "warning.fieldRequired"
        }

        return NSLocalizedString("warning.fieldRequired", bundle: bundle, comment: "")
      }

      /// en translation: For Sale
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenBundleStatusForSaleTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.tokenBundle.status.forSale.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.tokenBundle.status.forSale.title"
        }

        return NSLocalizedString("a.wallet.tokenBundle.status.forSale.title", bundle: bundle, comment: "")
      }

      /// en translation: Free Import
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenEthCostFreeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.ethCost.free.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.ethCost.free.title"
        }

        return NSLocalizedString("a.claim.token.ethCost.free.title", bundle: bundle, comment: "")
      }

      /// en translation: From
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func confirmPaymentFromLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPayment.from.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmPayment.from.label.title"
        }

        return NSLocalizedString("confirmPayment.from.label.title", bundle: bundle, comment: "")
      }

      /// en translation: From
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionFromLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.from.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.from.label.title"
        }

        return NSLocalizedString("transaction.from.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Function
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationFunctionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.function.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.function.title"
        }

        return NSLocalizedString("token.transactionConfirmation.function.title", bundle: bundle, comment: "")
      }

      /// en translation: GET STARTED
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWelcomeOnboardingCreatewalletButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.welcome.onboarding.createwallet.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.welcome.onboarding.createwallet.button.title"
        }

        return NSLocalizedString("a.welcome.onboarding.createwallet.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Gas
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfirmationSendSectionGasTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfirmation.Send.Section.Gas.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfirmation.Send.Section.Gas.title"
        }

        return NSLocalizedString("transactionConfirmation.Send.Section.Gas.title", bundle: bundle, comment: "")
      }

      /// en translation: Gas Fee
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionGasFeeLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.gasFee.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.gasFee.label.title"
        }

        return NSLocalizedString("transaction.gasFee.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Gas Fee too high. Max: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func configureTransactionErrorGasFeeTooHigh(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("configureTransaction.error.gasFeeTooHigh", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "configureTransaction.error.gasFeeTooHigh"
        }

        let format = NSLocalizedString("configureTransaction.error.gasFeeTooHigh", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Gas Limit
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func configureTransactionGasLimitLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("configureTransaction.gasLimit.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "configureTransaction.gasLimit.label.title"
        }

        return NSLocalizedString("configureTransaction.gasLimit.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Gas Limit
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func configureTransactionHeaderGasLimit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("configureTransaction.header.gasLimit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "configureTransaction.header.gasLimit"
        }

        return NSLocalizedString("configureTransaction.header.gasLimit", bundle: bundle, comment: "")
      }

      /// en translation: Gas Limit
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func confirmPaymentGasLimitLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPayment.gasLimit.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmPayment.gasLimit.label.title"
        }

        return NSLocalizedString("confirmPayment.gasLimit.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Gas Limit is too high
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorTitleGasLimitTooHigh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.title.gasLimitTooHigh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.title.gasLimitTooHigh"
        }

        return NSLocalizedString("token.transactionConfirmation.error.title.gasLimitTooHigh", bundle: bundle, comment: "")
      }

      /// en translation: Gas Limit is too low
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorTitleGasLimitTooLow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.title.gasLimitTooLow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.title.gasLimitTooLow"
        }

        return NSLocalizedString("token.transactionConfirmation.error.title.gasLimitTooLow", bundle: bundle, comment: "")
      }

      /// en translation: Gas Limit too high. Max available: %d
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func configureTransactionErrorGasLimitTooHigh(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("configureTransaction.error.gasLimitTooHigh", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "configureTransaction.error.gasLimitTooHigh"
        }

        let format = NSLocalizedString("configureTransaction.error.gasLimitTooHigh", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Gas Price
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func configureTransactionHeaderGasPrice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("configureTransaction.header.gasPrice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "configureTransaction.header.gasPrice"
        }

        return NSLocalizedString("configureTransaction.header.gasPrice", bundle: bundle, comment: "")
      }

      /// en translation: Gas Price
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func confirmPaymentGasPriceLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPayment.gasPrice.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmPayment.gasPrice.label.title"
        }

        return NSLocalizedString("confirmPayment.gasPrice.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Gas Price (Gwei)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func configureTransactionGasPriceGweiLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("configureTransaction.gasPriceGwei.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "configureTransaction.gasPriceGwei.label.title"
        }

        return NSLocalizedString("configureTransaction.gasPriceGwei.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Gas Price Might Be Too Low
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationGasPriceTooLowLong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.gasPrice.tooLow.long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.gasPrice.tooLow.long"
        }

        return NSLocalizedString("transactionConfiguration.gasPrice.tooLow.long", bundle: bundle, comment: "")
      }

      /// en translation: Gas Price is too low
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorTitleGasPriceTooLow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.title.gasPriceTooLow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.title.gasPriceTooLow"
        }

        return NSLocalizedString("token.transactionConfirmation.error.title.gasPriceTooLow", bundle: bundle, comment: "")
      }

      /// en translation: Gas Price must be a positive number
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func configureTransactionErrorGasPriceTooLow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("configureTransaction.error.gasPriceTooLow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "configureTransaction.error.gasPriceTooLow"
        }

        return NSLocalizedString("configureTransaction.error.gasPriceTooLow", bundle: bundle, comment: "")
      }

      /// en translation: Gas price is set below the 'slow' speed. Your transaction may take a long time to be written or may never be written.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationGasPriceTooLowDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.gasPrice.tooLow.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.gasPrice.tooLow.description"
        }

        return NSLocalizedString("transactionConfiguration.gasPrice.tooLow.description", bundle: bundle, comment: "")
      }

      /// en translation: Gave approval to move %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activityApprovalObtained(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("activity.approvalObtained", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.approvalObtained"
        }

        let format = NSLocalizedString("activity.approvalObtained", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: General
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsGeneralTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.general.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.general.title"
        }

        return NSLocalizedString("settings.general.title", bundle: bundle, comment: "")
      }

      /// en translation: Generate Free Transfer Link
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferConfirmSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.transfer.confirm.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.confirm.subtitle"
        }

        return NSLocalizedString("a.wallet.token.transfer.confirm.subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Generate MagicLink
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferConfirmTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.transfer.confirm.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.confirm.title"
        }

        return NSLocalizedString("a.wallet.token.transfer.confirm.title", bundle: bundle, comment: "")
      }

      /// en translation: Generate Sale Link
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellConfirmSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.sell.confirm.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.confirm.subtitle"
        }

        return NSLocalizedString("a.wallet.token.sell.confirm.subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Github (File an issue)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func urlGithub(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("url.github", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "url.github"
        }

        return NSLocalizedString("url.github", bundle: bundle, comment: "")
      }

      /// en translation: Go to Token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activityGoToToken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("activity.goToToken", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.goToToken"
        }

        return NSLocalizedString("activity.goToToken", bundle: bundle, comment: "")
      }

      /// en translation: Google
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func google(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Google", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Google"
        }

        return NSLocalizedString("Google", bundle: bundle, comment: "")
      }

      /// en translation: Got it, enable Testnets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsEnabledNetworksPromptEnableTestnetButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.enabledNetworks.promptEnableTestnet.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.enabledNetworks.promptEnableTestnet.button.title"
        }

        return NSLocalizedString("settings.enabledNetworks.promptEnableTestnet.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Got it, show my seed phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsShowSeedPhraseIntroductionButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.showSeedPhrase.introduction.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.showSeedPhrase.introduction.button.title"
        }

        return NSLocalizedString("wallets.showSeedPhrase.introduction.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Have a ticket to import?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletImportWalletBubbleTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.import.wallet.bubble.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.import.wallet.bubble.title"
        }

        return NSLocalizedString("a.wallet.import.wallet.bubble.title", bundle: bundle, comment: "")
      }

      /// en translation: Heco Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainHeco(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.Heco", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.Heco"
        }

        return NSLocalizedString("blockchain.Heco", bundle: bundle, comment: "")
      }

      /// en translation: Heco Testnet Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainHecoTest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.Heco.test", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.Heco.test"
        }

        return NSLocalizedString("blockchain.Heco.test", bundle: bundle, comment: "")
      }

      /// en translation: Help
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsSectionHelpTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.section.help.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.section.help.title"
        }

        return NSLocalizedString("settings.section.help.title", bundle: bundle, comment: "")
      }

      /// en translation: Help & FAQs
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aHelpNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.help.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.help.navigation.title"
        }

        return NSLocalizedString("a.help.navigation.title", bundle: bundle, comment: "")
      }

      /// en translation: Help us grow by sharing this app with your friends!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func welldoneDescriptionLabelText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("welldone.description.label.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "welldone.description.label.text"
        }

        return NSLocalizedString("welldone.description.label.text", bundle: bundle, comment: "")
      }

      /// en translation: Help us to improve AlphaWallet by sharing anonymous data with us. This does not include any financial information.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func analyticsDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("analytics.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "analytics.description"
        }

        return NSLocalizedString("analytics.description", bundle: bundle, comment: "")
      }

      /// en translation: Help/Feedback for AlphaWallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aHelpContactEmailSubject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.help.contact.email.subject", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.help.contact.email.subject"
        }

        return NSLocalizedString("a.help.contact.email.subject", bundle: bundle, comment: "")
      }

      /// en translation: Helpful information to developers:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aHelpContactEmailHelpfulToDevelopers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.help.contact.email.helpfulToDevelopers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.help.contact.email.helpfulToDevelopers"
        }

        return NSLocalizedString("a.help.contact.email.helpfulToDevelopers", bundle: bundle, comment: "")
      }

      /// en translation: Hidden Tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addHideTokensSectionHiddenTokens(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addHideTokens.section.hiddenTokens", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addHideTokens.section.hiddenTokens"
        }

        return NSLocalizedString("addHideTokens.section.hiddenTokens", bundle: bundle, comment: "")
      }

      /// en translation: Hide
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsHideTokenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.hideToken.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.hideToken.title"
        }

        return NSLocalizedString("wallets.hideToken.title", bundle: bundle, comment: "")
      }

      /// en translation: High Gas Price Warning!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationGasPriceTooHighLong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.gasPrice.tooHigh.long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.gasPrice.tooHigh.long"
        }

        return NSLocalizedString("transactionConfiguration.gasPrice.tooHigh.long", bundle: bundle, comment: "")
      }

      /// en translation: High Price
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationGasPriceTooHighShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.gasPrice.tooHigh.short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.gasPrice.tooHigh.short"
        }

        return NSLocalizedString("transactionConfiguration.gasPrice.tooHigh.short", bundle: bundle, comment: "")
      }

      /// en translation: History
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func browserHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("browserHistory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "browserHistory"
        }

        return NSLocalizedString("browserHistory", bundle: bundle, comment: "")
      }

      /// en translation: History
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func history(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "History"
        }

        return NSLocalizedString("History", bundle: bundle, comment: "")
      }

      /// en translation: Hold all your Crypto assets in one place
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWelcomeOnboarding1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.welcome.onboarding.1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.welcome.onboarding.1"
        }

        return NSLocalizedString("a.welcome.onboarding.1", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func browserHomeButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("browser.home.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "browser.home.button.title"
        }

        return NSLocalizedString("browser.home.button.title", bundle: bundle, comment: "")
      }

      /// en translation: How do I get my money?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aHelpContentsHowDoIGetMyMoney(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.help.contents.howDoIGetMyMoney", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.help.contents.howDoIGetMyMoney"
        }

        return NSLocalizedString("a.help.contents.howDoIGetMyMoney", bundle: bundle, comment: "")
      }

      /// en translation: How do I transfer ETH into my wallet?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aHelpContentsHowDoITransferETHIntoMyWallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.help.contents.howDoITransferETHIntoMyWallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.help.contents.howDoITransferETHIntoMyWallet"
        }

        return NSLocalizedString("a.help.contents.howDoITransferETHIntoMyWallet", bundle: bundle, comment: "")
      }

      /// en translation: I already have a wallet:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func gettingStartedAlreadyHaveWallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gettingStarted.alreadyHaveWallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gettingStarted.alreadyHaveWallet"
        }

        return NSLocalizedString("gettingStarted.alreadyHaveWallet", bundle: bundle, comment: "")
      }

      /// en translation: I want to receive such emails
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func emailListPromptSubscribeButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailList.prompt.subscribeButtonTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emailList.prompt.subscribeButtonTitle"
        }

        return NSLocalizedString("emailList.prompt.subscribeButtonTitle", bundle: bundle, comment: "")
      }

      /// en translation: IMPORTANT
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellNoteTitleLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.sell.noteTitleLabel.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.noteTitleLabel.title"
        }

        return NSLocalizedString("a.wallet.token.sell.noteTitleLabel.title", bundle: bundle, comment: "")
      }

      /// en translation: If your seed phrase is not in English, please convert it to English first
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func importWalletImportSeedPhraseDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("importWallet.import.seedPhrase.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "importWallet.import.seedPhrase.description"
        }

        return NSLocalizedString("importWallet.import.seedPhrase.description", bundle: bundle, comment: "")
      }

      /// en translation: Import
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenImportButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.import.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.import.button.title"
        }

        return NSLocalizedString("a.claim.token.import.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Import
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletImportWalletTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.import.wallet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.import.wallet.title"
        }

        return NSLocalizedString("a.wallet.import.wallet.title", bundle: bundle, comment: "")
      }

      /// en translation: Import
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func importWalletImportButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("importWallet.import.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "importWallet.import.button.title"
        }

        return NSLocalizedString("importWallet.import.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Import Link?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenPrompt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.prompt", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.prompt"
        }

        return NSLocalizedString("a.claim.token.prompt", bundle: bundle, comment: "")
      }

      /// en translation: Import Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func importNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("import.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "import.navigation.title"
        }

        return NSLocalizedString("import.navigation.title", bundle: bundle, comment: "")
      }

      /// en translation: Import Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletImportButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet.import.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet.import.button.title"
        }

        return NSLocalizedString("wallet.import.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Import Wallet Options
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func importWalletImportAlertSheetTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("importWallet.import.alertSheet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "importWallet.import.alertSheet.title"
        }

        return NSLocalizedString("importWallet.import.alertSheet.title", bundle: bundle, comment: "")
      }

      /// en translation: Import from iCloud/Dropbox/Google Drive
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func importWalletImportFromCloudTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("importWallet.import.fromCloud.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "importWallet.import.fromCloud.title"
        }

        return NSLocalizedString("importWallet.import.fromCloud.title", bundle: bundle, comment: "")
      }

      /// en translation: Import?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenPromptImportTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.promptImport.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.promptImport.title"
        }

        return NSLocalizedString("a.claim.token.promptImport.title", bundle: bundle, comment: "")
      }

      /// en translation: Importing %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.claim.token.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.title"
        }

        let format = NSLocalizedString("a.claim.token.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Importing tickets...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenInProgressTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.inProgress.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.inProgress.title"
        }

        return NSLocalizedString("a.claim.token.inProgress.title", bundle: bundle, comment: "")
      }

      /// en translation: Importing wallet...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func importWalletImportingIndicatorLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("importWallet.importingIndicator.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "importWallet.importingIndicator.label.title"
        }

        return NSLocalizedString("importWallet.importingIndicator.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Incomplete Data
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionCellAvailableButDataUnavailableTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.cell.availableButDataUnavailable.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.cell.availableButDataUnavailable.title"
        }

        return NSLocalizedString("transaction.cell.availableButDataUnavailable.title", bundle: bundle, comment: "")
      }

      /// en translation: Incorrect passcode. You have %d attempts.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func lockEnterPasscodeViewModelIncorrectPasscode(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("lock.enter.passcode.view.model.incorrect.passcode", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lock.enter.passcode.view.model.incorrect.passcode"
        }

        let format = NSLocalizedString("lock.enter.passcode.view.model.incorrect.passcode", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Infinite Fungible Token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesInfiniteFungibleToken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.infiniteFungibleToken", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.infiniteFungibleToken"
        }

        return NSLocalizedString("semifungibles.infiniteFungibleToken", bundle: bundle, comment: "")
      }

      /// en translation: Info
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTabInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.tab.info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.tab.info"
        }

        return NSLocalizedString("token.tab.info", bundle: bundle, comment: "")
      }

      /// en translation: Infura Error
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsPingInfuraFail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.pingInfura.fail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.pingInfura.fail"
        }

        return NSLocalizedString("settings.pingInfura.fail", bundle: bundle, comment: "")
      }

      /// en translation: Infura looks OK
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsPingInfuraSuccessful(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.pingInfura.successful", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.pingInfura.successful"
        }

        return NSLocalizedString("settings.pingInfura.successful", bundle: bundle, comment: "")
      }

      /// en translation: Insufficient balance
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aSendBalanceInsufficient(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.send.balance.insufficient", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.send.balance.insufficient"
        }

        return NSLocalizedString("a.send.balance.insufficient", bundle: bundle, comment: "")
      }

      /// en translation: Invalid Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendErrorInvalidAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send.error.invalidAddress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send.error.invalidAddress"
        }

        return NSLocalizedString("send.error.invalidAddress", bundle: bundle, comment: "")
      }

      /// en translation: Invalid Amount
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendErrorInvalidAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send.error.invalidAmount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send.error.invalidAmount"
        }

        return NSLocalizedString("send.error.invalidAmount", bundle: bundle, comment: "")
      }

      /// en translation: Invalid Ethereum Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func importWalletImportInvalidAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("importWallet.import.invalidAddress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "importWallet.import.invalidAddress"
        }

        return NSLocalizedString("importWallet.import.invalidAddress", bundle: bundle, comment: "")
      }

      /// en translation: Invalid Link, please try again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenInvalidLinkTryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.invalidLink.tryAgain", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.invalidLink.tryAgain"
        }

        return NSLocalizedString("a.claim.token.invalidLink.tryAgain", bundle: bundle, comment: "")
      }

      /// en translation: Invalid Signature
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenScriptType2InvalidSignature(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TokenScript.type2.invalidSignature", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TokenScript.type2.invalidSignature"
        }

        return NSLocalizedString("TokenScript.type2.invalidSignature", bundle: bundle, comment: "")
      }

      /// en translation: Invalid blockchain explorer URL
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addCustomChainErrorInvalidBlockchainExplorerUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addCustomChain.error.invalidBlockchainExplorerUrl", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addCustomChain.error.invalidBlockchainExplorerUrl"
        }

        return NSLocalizedString("addCustomChain.error.invalidBlockchainExplorerUrl", bundle: bundle, comment: "")
      }

      /// en translation: Invalid chain ID provided: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addCustomChainErrorInvalidChainId(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("addCustomChain.error.invalidChainId", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addCustomChain.error.invalidChainId"
        }

        let format = NSLocalizedString("addCustomChain.error.invalidChainId", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Invalid chain ID provided: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func switchChainErrorInvalidChainId(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("switchChain.error.invalidChainId", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "switchChain.error.invalidChainId"
        }

        let format = NSLocalizedString("switchChain.error.invalidChainId", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Invalid seed phrase. Please check and try again.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsVerifySeedPhraseWrong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.verifySeedPhrase.wrong", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.verifySeedPhrase.wrong"
        }

        return NSLocalizedString("wallets.verifySeedPhrase.wrong", bundle: bundle, comment: "")
      }

      /// en translation: Invalid ticket link
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenFailedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.failed.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.failed.title"
        }

        return NSLocalizedString("a.claim.token.failed.title", bundle: bundle, comment: "")
      }

      /// en translation: Invalid token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendInvalidToken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send.invalid.Token", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send.invalid.Token"
        }

        return NSLocalizedString("send.invalid.Token", bundle: bundle, comment: "")
      }

      /// en translation: Issuer
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletContentsIssuerTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.contents.issuer.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.contents.issuer.title"
        }

        return NSLocalizedString("a.wallet.contents.issuer.title", bundle: bundle, comment: "")
      }

      /// en translation: Issuer
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesAttributeIssuer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.attribute.issuer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.attribute.issuer"
        }

        return NSLocalizedString("semifungibles.attribute.issuer", bundle: bundle, comment: "")
      }

      /// en translation: It looks like you are trying to run a smart contract and the logic of that smart contract returns an error.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorDescriptionExecutionRevertedError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.description.executionRevertedError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.description.executionRevertedError"
        }

        return NSLocalizedString("token.transactionConfirmation.error.description.executionRevertedError", bundle: bundle, comment: "")
      }

      /// en translation: It seems like there is a problem with the RPC node certificate. Please try again later
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendTransactionErrorInvalidCertificate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendTransaction.error.invalidCertificate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendTransaction.error.invalidCertificate"
        }

        return NSLocalizedString("sendTransaction.error.invalidCertificate", bundle: bundle, comment: "")
      }

      /// en translation: It's not a good idea to take a screenshot of your seed phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsShowSeedPhraseDoNotTakeScreenshotDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.showSeedPhrase.doNotTakeScreenshotDescription", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.showSeedPhrase.doNotTakeScreenshotDescription"
        }

        return NSLocalizedString("wallets.showSeedPhrase.doNotTakeScreenshotDescription", bundle: bundle, comment: "")
      }

      /// en translation: It's not a good idea to take a screenshot of your seed phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsVerifySeedPhraseDoNotTakeScreenshotDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.verifySeedPhrase.doNotTakeScreenshotDescription", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.verifySeedPhrase.doNotTakeScreenshotDescription"
        }

        return NSLocalizedString("wallets.verifySeedPhrase.doNotTakeScreenshotDescription", bundle: bundle, comment: "")
      }

      /// en translation: Items
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func emptyTableViewAllTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyTableView.all.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptyTableView.all.title"
        }

        return NSLocalizedString("emptyTableView.all.title", bundle: bundle, comment: "")
      }

      /// en translation: Just received %@ ETH?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func backupPromptAfterReceivingEtherTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("backup.prompt.afterReceivingEther.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backup.prompt.afterReceivingEther.title"
        }

        let format = NSLocalizedString("backup.prompt.afterReceivingEther.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Keystore
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreShorter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Keystore.shorter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Keystore.shorter"
        }

        return NSLocalizedString("Keystore.shorter", bundle: bundle, comment: "")
      }

      /// en translation: Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Keystore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Keystore"
        }

        return NSLocalizedString("Keystore", bundle: bundle, comment: "")
      }

      /// en translation: Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreJSON(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Keystore JSON", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Keystore JSON"
        }

        return NSLocalizedString("Keystore JSON", bundle: bundle, comment: "")
      }

      /// en translation: Keystore Password
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func enterPasswordNavigationTitleShorter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enterPassword.navigation.title.shorter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enterPassword.navigation.title.shorter"
        }

        return NSLocalizedString("enterPassword.navigation.title.shorter", bundle: bundle, comment: "")
      }

      /// en translation: Keystore Wallets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletTypesKeystoreWallets(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet.types.keystoreWallets", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet.types.keystoreWallets"
        }

        return NSLocalizedString("wallet.types.keystoreWallets", bundle: bundle, comment: "")
      }

      /// en translation: LINK EXPIRY DATE
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellLinkExpiryDateTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.sell.linkExpiryDate.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.linkExpiryDate.title"
        }

        return NSLocalizedString("a.wallet.token.sell.linkExpiryDate.title", bundle: bundle, comment: "")
      }

      /// en translation: LINK EXPIRY TIME
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellLinkExpiryTimeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.sell.linkExpiryTime.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.linkExpiryTime.title"
        }

        return NSLocalizedString("a.wallet.token.sell.linkExpiryTime.title", bundle: bundle, comment: "")
      }

      /// en translation: Learn more about Gas Limit
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorLinkTitleGasLimitTooHigh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.linkTitle.gasLimitTooHigh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.linkTitle.gasLimitTooHigh"
        }

        return NSLocalizedString("token.transactionConfirmation.error.linkTitle.gasLimitTooHigh", bundle: bundle, comment: "")
      }

      /// en translation: Learn more about Gas Limit
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorLinkTitleGasLimitTooLow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.linkTitle.gasLimitTooLow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.linkTitle.gasLimitTooLow"
        }

        return NSLocalizedString("token.transactionConfirmation.error.linkTitle.gasLimitTooLow", bundle: bundle, comment: "")
      }

      /// en translation: Learn more about Gas Price
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorLinkTitleGasPriceTooLow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.linkTitle.gasPriceTooLow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.linkTitle.gasPriceTooLow"
        }

        return NSLocalizedString("token.transactionConfirmation.error.linkTitle.gasPriceTooLow", bundle: bundle, comment: "")
      }

      /// en translation: Learn more about Gas fees
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorLinkTitleInsufficientFundsError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.linkTitle.insufficientFundsError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.linkTitle.insufficientFundsError"
        }

        return NSLocalizedString("token.transactionConfirmation.error.linkTitle.insufficientFundsError", bundle: bundle, comment: "")
      }

      /// en translation: Learn more about Nonce
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorLinkTitleNonceTooLowError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.linkTitle.nonceTooLowError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.linkTitle.nonceTooLowError"
        }

        return NSLocalizedString("token.transactionConfirmation.error.linkTitle.nonceTooLowError", bundle: bundle, comment: "")
      }

      /// en translation: Leave the nonce empty. We'll fill it in for you
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func configureTransactionErrorLeaveNonceEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("configureTransaction.error.leaveNonceEmpty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "configureTransaction.error.leaveNonceEmpty"
        }

        return NSLocalizedString("configureTransaction.error.leaveNonceEmpty", bundle: bundle, comment: "")
      }

      /// en translation: Light
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func light(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("light", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "light"
        }

        return NSLocalizedString("light", bundle: bundle, comment: "")
      }

      /// en translation: Link has already been redeemed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenLinkAlreadyRedeemed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.linkAlreadyRedeemed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.linkAlreadyRedeemed"
        }

        return NSLocalizedString("a.claim.token.linkAlreadyRedeemed", bundle: bundle, comment: "")
      }

      /// en translation: Link has expired
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenLinkExpired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.linkExpired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.linkExpired"
        }

        return NSLocalizedString("a.claim.token.linkExpired", bundle: bundle, comment: "")
      }

      /// en translation: Loading
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading"
        }

        return NSLocalizedString("Loading", bundle: bundle, comment: "")
      }

      /// en translation: Loading...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func loadingDots(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LoadingDots", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LoadingDots"
        }

        return NSLocalizedString("LoadingDots", bundle: bundle, comment: "")
      }

      /// en translation: Lock Private Key
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreLockWalletPrivateKeyButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.lock.wallet.privateKey.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.lock.wallet.privateKey.button"
        }

        return NSLocalizedString("keystore.lock.wallet.privateKey.button", bundle: bundle, comment: "")
      }

      /// en translation: Lock Seed Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreLockWalletSeedButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.lock.wallet.seed.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.lock.wallet.seed.button"
        }

        return NSLocalizedString("keystore.lock.wallet.seed.button", bundle: bundle, comment: "")
      }

      /// en translation: Lock your Private Key to Increase Security
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreLockWalletPrivateKeyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.lock.wallet.privateKey.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.lock.wallet.privateKey.title"
        }

        return NSLocalizedString("keystore.lock.wallet.privateKey.title", bundle: bundle, comment: "")
      }

      /// en translation: Lock your Seed Phrase to Increase Security
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreLockWalletSeedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.lock.wallet.seed.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.lock.wallet.seed.title"
        }

        return NSLocalizedString("keystore.lock.wallet.seed.title", bundle: bundle, comment: "")
      }

      /// en translation: Logging in with Touch ID
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func lockEnterPasscodeViewModelTouchId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lock.enter.passcode.view.model.touch.id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lock.enter.passcode.view.model.touch.id"
        }

        return NSLocalizedString("lock.enter.passcode.view.model.touch.id", bundle: bundle, comment: "")
      }

      /// en translation: Lose this Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsConfirmDeleteAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.confirm.delete.action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.confirm.delete.action"
        }

        return NSLocalizedString("accounts.confirm.delete.action", bundle: bundle, comment: "")
      }

      /// en translation: Low Price
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationGasPriceTooLowShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.gasPrice.tooLow.short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.gasPrice.tooLow.short"
        }

        return NSLocalizedString("transactionConfiguration.gasPrice.tooLow.short", bundle: bundle, comment: "")
      }

      /// en translation: MagicLink expires on: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellConfirmExpiryDateDescription(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.sell.confirm.expiryDateDescription", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.confirm.expiryDateDescription"
        }

        let format = NSLocalizedString("a.wallet.token.sell.confirm.expiryDateDescription", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: MagicLink for Picking Up
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferModeMagicLinkButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.transfer.mode.magicLink.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.mode.magicLink.button.title"
        }

        return NSLocalizedString("a.wallet.token.transfer.mode.magicLink.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Mainnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsEnabledNetworksMainnet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.enabledNetworks.mainnet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.enabledNetworks.mainnet"
        }

        return NSLocalizedString("settings.enabledNetworks.mainnet", bundle: bundle, comment: "")
      }

      /// en translation: Make sure you have backup of your wallet.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsConfirmDeleteMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.confirm.delete.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.confirm.delete.message"
        }

        return NSLocalizedString("accounts.confirm.delete.message", bundle: bundle, comment: "")
      }

      /// en translation: Making backup is very simple and safe:  just write down these 12/24 words and  keep them in a secret place, offline.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsShowSeedPhraseSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.showSeedPhrase.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.showSeedPhrase.subtitle"
        }

        return NSLocalizedString("wallets.showSeedPhrase.subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Market Cap
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenInfoFieldStatsMarket_cap(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.info.field.stats.market_cap", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.info.field.stats.market_cap"
        }

        return NSLocalizedString("token.info.field.stats.market_cap", bundle: bundle, comment: "")
      }

      /// en translation: Market Price: %@ %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenMarketPrice(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.marketPrice", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.marketPrice"
        }

        let format = NSLocalizedString("a.wallet.token.marketPrice", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Marketplace
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aMarketplaceTabbarItemTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.marketplace.tabbar.item.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.marketplace.tabbar.item.title"
        }

        return NSLocalizedString("a.marketplace.tabbar.item.title", bundle: bundle, comment: "")
      }

      /// en translation: Max Supply
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenInfoFieldStatsMax_supply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.info.field.stats.max_supply", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.info.field.stats.max_supply"
        }

        return NSLocalizedString("token.info.field.stats.max_supply", bundle: bundle, comment: "")
      }

      /// en translation: Melt
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesAttributeMelt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.attribute.melt", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.attribute.melt"
        }

        return NSLocalizedString("semifungibles.attribute.melt", bundle: bundle, comment: "")
      }

      /// en translation: Melt Fee Max Ratio
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesAttributeMeltFeeMaxRatio(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.attribute.meltFeeMaxRatio", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.attribute.meltFeeMaxRatio"
        }

        return NSLocalizedString("semifungibles.attribute.meltFeeMaxRatio", bundle: bundle, comment: "")
      }

      /// en translation: Melt Fee Ratio
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesAttributeMeltFeeRatio(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.attribute.meltFeeRatio", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.attribute.meltFeeRatio"
        }

        return NSLocalizedString("semifungibles.attribute.meltFeeRatio", bundle: bundle, comment: "")
      }

      /// en translation: Message
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func signatureConfirmationMessageTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signature.confirmation.message.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signature.confirmation.message.title"
        }

        return NSLocalizedString("signature.confirmation.message.title", bundle: bundle, comment: "")
      }

      /// en translation: Methods
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectConnectionMethodsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.connection.methods.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.connection.methods.title"
        }

        return NSLocalizedString("walletConnect.connection.methods.title", bundle: bundle, comment: "")
      }

      /// en translation: More
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func more(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("More", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "More"
        }

        return NSLocalizedString("More", bundle: bundle, comment: "")
      }

      /// en translation: More Details
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func moreDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("More Details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "More Details"
        }

        return NSLocalizedString("More Details", bundle: bundle, comment: "")
      }

      /// en translation: More networks will be available when they are enabled in the Settings tab
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func browserSettingsNetworkDescriptionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("browser.settings.network.description.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "browser.settings.network.description.title"
        }

        return NSLocalizedString("browser.settings.network.description.title", bundle: bundle, comment: "")
      }

      /// en translation: Most Used
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sortTokensParamMostUsed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sortTokens.param.mostUsed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sortTokens.param.mostUsed"
        }

        return NSLocalizedString("sortTokens.param.mostUsed", bundle: bundle, comment: "")
      }

      /// en translation: Mumbai Testnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainMumbai(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.Mumbai", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.Mumbai"
        }

        return NSLocalizedString("blockchain.Mumbai", bundle: bundle, comment: "")
      }

      /// en translation: My %@ Wallet Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletAddressTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.address.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.address.title"
        }

        let format = NSLocalizedString("a.wallet.address.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: My Bookmarks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func myBookmarks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("myBookmarks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "myBookmarks"
        }

        return NSLocalizedString("myBookmarks", bundle: bundle, comment: "")
      }

      /// en translation: My Bookmarks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func myDappsButtonImageLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("myDappsButton.imageLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "myDappsButton.imageLabel"
        }

        return NSLocalizedString("myDappsButton.imageLabel", bundle: bundle, comment: "")
      }

      /// en translation: My History
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func dappBrowserBrowserHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dappBrowser.browserHistory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dappBrowser.browserHistory"
        }

        return NSLocalizedString("dappBrowser.browserHistory", bundle: bundle, comment: "")
      }

      /// en translation: My History
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func historyButtonImageLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("historyButton.imageLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "historyButton.imageLabel"
        }

        return NSLocalizedString("historyButton.imageLabel", bundle: bundle, comment: "")
      }

      /// en translation: My QR Code
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func qrCodeMyqrCodeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qrCode.myqrCode.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qrCode.myqrCode.title"
        }

        return NSLocalizedString("qrCode.myqrCode.title", bundle: bundle, comment: "")
      }

      /// en translation: My Wallet Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aSettingsContentsMyWalletAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.settings.contents.myWalletAddress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.settings.contents.myWalletAddress"
        }

        return NSLocalizedString("a.settings.contents.myWalletAddress", bundle: bundle, comment: "")
      }

      /// en translation: NOT LOCKED
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletSecurityLevelOrange(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet.security.level.orange", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet.security.level.orange"
        }

        return NSLocalizedString("wallet.security.level.orange", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Name"
        }

        return NSLocalizedString("Name", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectConnectionNameTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.connection.name.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.connection.name.title"
        }

        return NSLocalizedString("walletConnect.connection.name.title", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectDappName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.dapp.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.dapp.name"
        }

        return NSLocalizedString("walletConnect.dapp.name", bundle: bundle, comment: "")
      }

      /// en translation: Name this Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsWalletRename(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.wallet.rename", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.wallet.rename"
        }

        return NSLocalizedString("settings.wallet.rename", bundle: bundle, comment: "")
      }

      /// en translation: Name: Ascending
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sortTokensParamNameAscending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sortTokens.param.nameAscending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sortTokens.param.nameAscending"
        }

        return NSLocalizedString("sortTokens.param.nameAscending", bundle: bundle, comment: "")
      }

      /// en translation: Name: Descending
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sortTokensParamNameDescending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sortTokens.param.nameDescending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sortTokens.param.nameDescending"
        }

        return NSLocalizedString("sortTokens.param.nameDescending", bundle: bundle, comment: "")
      }

      /// en translation: Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsNetworkButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.network.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.network.button.title"
        }

        return NSLocalizedString("settings.network.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationNetwork(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.network", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.network"
        }

        return NSLocalizedString("token.transactionConfirmation.network", bundle: bundle, comment: "")
      }

      /// en translation: Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectConnectionNetworkTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.connection.network.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.connection.network.title"
        }

        return NSLocalizedString("walletConnect.connection.network.title", bundle: bundle, comment: "")
      }

      /// en translation: Network Name
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addrpcServerNetworkNameTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addrpcServer.networkName.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addrpcServer.networkName.title"
        }

        return NSLocalizedString("addrpcServer.networkName.title", bundle: bundle, comment: "")
      }

      /// en translation: Network Name is invalid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addrpcServerNetworkNameError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addrpcServer.networkName.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addrpcServer.networkName.error"
        }

        return NSLocalizedString("addrpcServer.networkName.error", bundle: bundle, comment: "")
      }

      /// en translation: Networks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectConnectionNetworksTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.connection.networks.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.connection.networks.title"
        }

        return NSLocalizedString("walletConnect.connection.networks.title", bundle: bundle, comment: "")
      }

      /// en translation: New
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func new(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New"
        }

        return NSLocalizedString("New", bundle: bundle, comment: "")
      }

      /// en translation: New RPC Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addrpcServerRpcUrlPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addrpcServer.rpcUrl.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addrpcServer.rpcUrl.placeholder"
        }

        return NSLocalizedString("addrpcServer.rpcUrl.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: New Token Found
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addHideTokensSectionNewTokens(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addHideTokens.section.newTokens", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addHideTokens.section.newTokens"
        }

        return NSLocalizedString("addHideTokens.section.newTokens", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletNextButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.next.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.next.button.title"
        }

        return NSLocalizedString("a.wallet.next.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Next"
        }

        return NSLocalizedString("Next", bundle: bundle, comment: "")
      }

      /// en translation: No RPC node URL provided
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addCustomChainErrorNoRpcNodeUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addCustomChain.error.noRpcNodeUrl", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addCustomChain.error.noRpcNodeUrl"
        }

        return NSLocalizedString("addCustomChain.error.noRpcNodeUrl", bundle: bundle, comment: "")
      }

      /// en translation: No Transactions Yet!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionsNoTransactionsLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactions.noTransactions.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactions.noTransactions.label.title"
        }

        return NSLocalizedString("transactions.noTransactions.label.title", bundle: bundle, comment: "")
      }

      /// en translation: No Value, made for tests only
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenValueTestnetWarning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.value.testnetWarning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.value.testnetWarning"
        }

        return NSLocalizedString("token.value.testnetWarning", bundle: bundle, comment: "")
      }

      /// en translation: No active WalletConnect sessions
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectSessionsEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.sessions.empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.sessions.empty"
        }

        return NSLocalizedString("walletConnect.sessions.empty", bundle: bundle, comment: "")
      }

      /// en translation: No blockchain explorer URL provided
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addCustomChainErrorNoBlockchainExplorerUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addCustomChain.error.noBlockchainExplorerUrl", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addCustomChain.error.noBlockchainExplorerUrl"
        }

        return NSLocalizedString("addCustomChain.error.noBlockchainExplorerUrl", bundle: bundle, comment: "")
      }

      /// en translation: No bookmarks yet!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func browserNoBookmarksLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("browser.noBookmarks.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "browser.noBookmarks.label.title"
        }

        return NSLocalizedString("browser.noBookmarks.label.title", bundle: bundle, comment: "")
      }

      /// en translation: No results
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func emptyTableViewSearchTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyTableView.search.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptyTableView.search.title"
        }

        return NSLocalizedString("emptyTableView.search.title", bundle: bundle, comment: "")
      }

      /// en translation: No results for network you are searching for
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func searchNetworkResultEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search.network.result.empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "search.network.result.empty"
        }

        return NSLocalizedString("search.network.result.empty", bundle: bundle, comment: "")
      }

      /// en translation: No results for token you are searching for
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func seachTokenNoresultsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seachToken.noresults.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seachToken.noresults.title"
        }

        return NSLocalizedString("seachToken.noresults.title", bundle: bundle, comment: "")
      }

      /// en translation: Non Fungible
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesAttributeNonFungible(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.attribute.nonFungible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.attribute.nonFungible"
        }

        return NSLocalizedString("semifungibles.attribute.nonFungible", bundle: bundle, comment: "")
      }

      /// en translation: Nonce
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func confirmPaymentNonceLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPayment.nonce.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmPayment.nonce.label.title"
        }

        return NSLocalizedString("confirmPayment.nonce.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Nonce
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionNonceLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.nonce.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.nonce.label.title"
        }

        return NSLocalizedString("transaction.nonce.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Nonce (Optional)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func configureTransactionNonceLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("configureTransaction.nonce.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "configureTransaction.nonce.label.title"
        }

        return NSLocalizedString("configureTransaction.nonce.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Nonce must be a positive number
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func configureTransactionErrorNonceNotPositiveNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("configureTransaction.error.nonceNotPositiveNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "configureTransaction.error.nonceNotPositiveNumber"
        }

        return NSLocalizedString("configureTransaction.error.nonceNotPositiveNumber", bundle: bundle, comment: "")
      }

      /// en translation: Nonce of the Transaction is too low
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorTitleNonceTooLowError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.title.nonceTooLowError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.title.nonceTooLowError"
        }

        return NSLocalizedString("token.transactionConfirmation.error.title.nonceTooLowError", bundle: bundle, comment: "")
      }

      /// en translation: Not connected to the internet, please try again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenNoConnectivityTryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.noConnectivity.tryAgain", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.noConnectivity.tryAgain"
        }

        return NSLocalizedString("a.claim.token.noConnectivity.tryAgain", bundle: bundle, comment: "")
      }

      /// en translation: Not enough %@ to pay for fees
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorTitleInsufficientFundsError(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("token.transactionConfirmation.error.title.insufficientFundsError", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.title.insufficientFundsError"
        }

        let format = NSLocalizedString("token.transactionConfirmation.error.title.insufficientFundsError", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Note that speeding up this transaction does not guarantee your original transaction will be accelerated. If your attempt is successful, you will be charged the miner fee as above.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activitySpeedupDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("activity.speedup.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.speedup.description"
        }

        return NSLocalizedString("activity.speedup.description", bundle: bundle, comment: "")
      }

      /// en translation: Note that speeding up this transaction does not guarantee your original transaction will be cancelled. If your attempt is successful, you will be charged the miner fee as above.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activityCancelDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("activity.cancel.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.cancel.description"
        }

        return NSLocalizedString("activity.cancel.description", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsNotificationsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.notifications.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.notifications.title"
        }

        return NSLocalizedString("settings.notifications.title", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// en translation: OK, I wrote this down
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsShowSeedPhraseTestSeedPhrase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.showSeedPhrase.testSeedPhrase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.showSeedPhrase.testSeedPhrase"
        }

        return NSLocalizedString("wallets.showSeedPhrase.testSeedPhrase", bundle: bundle, comment: "")
      }

      /// en translation: OK, great!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransactionInProgressConfirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.transaction.inProgress.confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transaction.inProgress.confirm"
        }

        return NSLocalizedString("a.wallet.token.transaction.inProgress.confirm", bundle: bundle, comment: "")
      }

      /// en translation: OK, hide my seed phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsShowSeedPhraseHideSeedPhrase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.showSeedPhrase.hideSeedPhrase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.showSeedPhrase.hideSeedPhrase"
        }

        return NSLocalizedString("wallets.showSeedPhrase.hideSeedPhrase", bundle: bundle, comment: "")
      }

      /// en translation: Offline
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectStatusOffline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.status.offline", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.status.offline"
        }

        return NSLocalizedString("walletConnect.status.offline", bundle: bundle, comment: "")
      }

      /// en translation: Old TokenScript Version
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenScriptType2OldSchemaVersion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TokenScript.type2.oldSchemaVersion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TokenScript.type2.oldSchemaVersion"
        }

        return NSLocalizedString("TokenScript.type2.oldSchemaVersion", bundle: bundle, comment: "")
      }

      /// en translation: Online
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectStatusOnline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.status.online", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.status.online"
        }

        return NSLocalizedString("walletConnect.status.online", bundle: bundle, comment: "")
      }

      /// en translation: Open Settings
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func cameraQrCodeDeniedPromptButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera.qrCode.denied.prompt.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera.qrCode.denied.prompt.button"
        }

        return NSLocalizedString("camera.qrCode.denied.prompt.button", bundle: bundle, comment: "")
      }

      /// en translation: Open in Browser
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func qrCodeOpenInBrowserTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qrCode.openInBrowser.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qrCode.openInBrowser.title"
        }

        return NSLocalizedString("qrCode.openInBrowser.title", bundle: bundle, comment: "")
      }

      /// en translation: Open in Etherscan
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func qrCodeOpenInEtherscanTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qrCode.openInEtherscan.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qrCode.openInEtherscan.title"
        }

        return NSLocalizedString("qrCode.openInEtherscan.title", bundle: bundle, comment: "")
      }

      /// en translation: Open on %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func openSeaNonFungibleTokensUrlOpen(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("openSeaNonFungibleTokens.url.open", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "openSeaNonFungibleTokens.url.open"
        }

        let format = NSLocalizedString("openSeaNonFungibleTokens.url.open", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Optimistic Kovan Testnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainOptimisticKovan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.Optimistic.Kovan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.Optimistic.Kovan"
        }

        return NSLocalizedString("blockchain.Optimistic.Kovan", bundle: bundle, comment: "")
      }

      /// en translation: Optimistic Testnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainOptimistic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.Optimistic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.Optimistic"
        }

        return NSLocalizedString("blockchain.Optimistic", bundle: bundle, comment: "")
      }

      /// en translation: PHONE NUMBER
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransfer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.transfer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer"
        }

        return NSLocalizedString("a.wallet.token.transfer", bundle: bundle, comment: "")
      }

      /// en translation: PRICE PER %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellPricePerTokenTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.sell.pricePerToken.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.pricePerToken.title"
        }

        let format = NSLocalizedString("a.wallet.token.sell.pricePerToken.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Palm
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainPalm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.palm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.palm"
        }

        return NSLocalizedString("blockchain.palm", bundle: bundle, comment: "")
      }

      /// en translation: Palm (Testnet)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainPalmTestnet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.palm.Testnet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.palm.Testnet"
        }

        return NSLocalizedString("blockchain.palm.Testnet", bundle: bundle, comment: "")
      }

      /// en translation: Passcode
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsBiometricsDisabledLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.biometricsDisabled.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.biometricsDisabled.label.title"
        }

        return NSLocalizedString("settings.biometricsDisabled.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Passcode / %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsBiometricsEnabledLabelTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("settings.biometricsEnabled.label.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.biometricsEnabled.label.title"
        }

        let format = NSLocalizedString("settings.biometricsEnabled.label.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Passcode / Touch ID
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsPasscodeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.passcode.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.passcode.title"
        }

        return NSLocalizedString("settings.passcode.title", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password"
        }

        return NSLocalizedString("Password", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsAdvancedExportJSONKeystorePasswordLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.advanced.exportJSONKeystore.password.label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.advanced.exportJSONKeystore.password.label"
        }

        return NSLocalizedString("settings.advanced.exportJSONKeystore.password.label", bundle: bundle, comment: "")
      }

      /// en translation: Password to encrypt Keystore
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func enterPasswordPasswordTextFieldPlaceholderShorter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enterPassword.password.textField.placeholder.shorter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enterPassword.password.textField.placeholder.shorter"
        }

        return NSLocalizedString("enterPassword.password.textField.placeholder.shorter", bundle: bundle, comment: "")
      }

      /// en translation: Password to encrypt Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func enterPasswordPasswordTextFieldPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enterPassword.password.textField.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enterPassword.password.textField.placeholder"
        }

        return NSLocalizedString("enterPassword.password.textField.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Paste
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendPasteButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send.paste.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send.paste.button.title"
        }

        return NSLocalizedString("send.paste.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Paymaster server down, please try again later
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenFailedServerDown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.failed.serverDown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.failed.serverDown"
        }

        return NSLocalizedString("a.claim.token.failed.serverDown", bundle: bundle, comment: "")
      }

      /// en translation: Pending
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionCellPendingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.cell.pending.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.cell.pending.title"
        }

        return NSLocalizedString("transaction.cell.pending.title", bundle: bundle, comment: "")
      }

      /// en translation: Performance
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenInfoHeaderPerformance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.info.header.performance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.info.header.performance"
        }

        return NSLocalizedString("token.info.header.performance", bundle: bundle, comment: "")
      }

      /// en translation: Personal message
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func signatureConfirmationPersonalmessageTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signature.confirmation.personalmessage.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signature.confirmation.personalmessage.title"
        }

        return NSLocalizedString("signature.confirmation.personalmessage.title", bundle: bundle, comment: "")
      }

      /// en translation: Ping Infura
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsPingInfuraTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.pingInfura.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.pingInfura.title"
        }

        return NSLocalizedString("settings.pingInfura.title", bundle: bundle, comment: "")
      }

      /// en translation: Please enter price of %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellPriceProvideTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.sell.price.provide.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.price.provide.title"
        }

        let format = NSLocalizedString("a.wallet.token.sell.price.provide.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Please re-enter your passcode
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func lockCreatePasscodeViewModelConfirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lock.create.passcode.view.model.confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lock.create.passcode.view.model.confirm"
        }

        return NSLocalizedString("lock.create.passcode.view.model.confirm", bundle: bundle, comment: "")
      }

      /// en translation: Please select a %@ to redeem
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenRedeemSelectTokensAtLeastOneTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.redeem.selectTokens.atLeastOne.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.redeem.selectTokens.atLeastOne.title"
        }

        let format = NSLocalizedString("a.wallet.token.redeem.selectTokens.atLeastOne.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Please select a %@ to sell
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellSelectTokensAtLeastOneTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.sell.selectTokens.atLeastOne.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.selectTokens.atLeastOne.title"
        }

        let format = NSLocalizedString("a.wallet.token.sell.selectTokens.atLeastOne.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Please select a %@ to transfer
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferSelectTokensAtLeastOneTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.transfer.selectTokens.atLeastOne.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.selectTokens.atLeastOne.title"
        }

        let format = NSLocalizedString("a.wallet.token.transfer.selectTokens.atLeastOne.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Please select a date in the future
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellLinkExpiryTimeAtLeastNowTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.sell.linkExpiryTime.atLeastNow.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.linkExpiryTime.atLeastNow.title"
        }

        return NSLocalizedString("a.wallet.token.sell.linkExpiryTime.atLeastNow.title", bundle: bundle, comment: "")
      }

      /// en translation: Please select a date in the future
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferLinkExpiryTimeAtLeastNowTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.transfer.linkExpiryTime.atLeastNow.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.linkExpiryTime.atLeastNow.title"
        }

        return NSLocalizedString("a.wallet.token.transfer.linkExpiryTime.atLeastNow.title", bundle: bundle, comment: "")
      }

      /// en translation: Please select quantity of %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenRedeemSelectTokenQuantityAtLeastOneTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.redeem.selectTokenQuantity.atLeastOne.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.redeem.selectTokenQuantity.atLeastOne.title"
        }

        let format = NSLocalizedString("a.wallet.token.redeem.selectTokenQuantity.atLeastOne.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Please select quantity of %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellSelectTokenQuantityAtLeastOneTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.sell.selectTokenQuantity.atLeastOne.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.selectTokenQuantity.atLeastOne.title"
        }

        let format = NSLocalizedString("a.wallet.token.sell.selectTokenQuantity.atLeastOne.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Please select quantity of %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferSelectTokenQuantityAtLeastOneTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.transfer.selectTokenQuantity.atLeastOne.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.selectTokenQuantity.atLeastOne.title"
        }

        let format = NSLocalizedString("a.wallet.token.transfer.selectTokenQuantity.atLeastOne.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Please upgrade AlphaWallet to support this TokenScript file
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenScriptNotSupportedSchemaError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tokenScript.notSupportedSchema.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tokenScript.notSupportedSchema.error"
        }

        return NSLocalizedString("tokenScript.notSupportedSchema.error", bundle: bundle, comment: "")
      }

      /// en translation: Point your camera on QR code
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func qrCodeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qrCode.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qrCode.title"
        }

        return NSLocalizedString("qrCode.title", bundle: bundle, comment: "")
      }

      /// en translation: Polygon Mainnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainPolygon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.Polygon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.Polygon"
        }

        return NSLocalizedString("blockchain.Polygon", bundle: bundle, comment: "")
      }

      /// en translation: Popular Tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addHideTokensSectionPopularTokens(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addHideTokens.section.popularTokens", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addHideTokens.section.popularTokens"
        }

        return NSLocalizedString("addHideTokens.section.popularTokens", bundle: bundle, comment: "")
      }

      /// en translation: Powered by blockchain technology, smart tickets, fraud free
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWelcomeOnboarding2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.welcome.onboarding.2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.welcome.onboarding.2"
        }

        return NSLocalizedString("a.welcome.onboarding.2", bundle: bundle, comment: "")
      }

      /// en translation: Preferences
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsPreferencesTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.preferences.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.preferences.title"
        }

        return NSLocalizedString("settings.preferences.title", bundle: bundle, comment: "")
      }

      /// en translation: Preparing backup options...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func exportPresentBackupOptionsLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("export.presentBackupOptions.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "export.presentBackupOptions.label.title"
        }

        return NSLocalizedString("export.presentBackupOptions.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aHelpContentsPrivacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.help.contents.privacyPolicy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.help.contents.privacyPolicy"
        }

        return NSLocalizedString("a.help.contents.privacyPolicy", bundle: bundle, comment: "")
      }

      /// en translation: Private ETH transactions
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsChooseSendPrivateTransactionsProviderButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.chooseSendPrivateTransactionsProvider.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.chooseSendPrivateTransactionsProvider.button.title"
        }

        return NSLocalizedString("settings.chooseSendPrivateTransactionsProvider.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Private Key
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func privateKey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Private Key", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Private Key"
        }

        return NSLocalizedString("Private Key", bundle: bundle, comment: "")
      }

      /// en translation: Private Key has to be 64 characters long
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func importWalletImportInvalidPrivateKey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("importWallet.import.invalidPrivateKey", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "importWallet.import.invalidPrivateKey"
        }

        return NSLocalizedString("importWallet.import.invalidPrivateKey", bundle: bundle, comment: "")
      }

      /// en translation: Processing...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenValidatingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.validating.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.validating.title"
        }

        return NSLocalizedString("a.claim.token.validating.title", bundle: bundle, comment: "")
      }

      /// en translation: Purchase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenPurchaseButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.purchase.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.purchase.button.title"
        }

        return NSLocalizedString("a.claim.token.purchase.button.title", bundle: bundle, comment: "")
      }

      /// en translation: QUANTITY OF %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenRedeemQuantityTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.redeem.quantity.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.redeem.quantity.title"
        }

        let format = NSLocalizedString("a.wallet.token.redeem.quantity.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: QUANTITY OF %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellQuantityTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.sell.quantity.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.quantity.title"
        }

        let format = NSLocalizedString("a.wallet.token.sell.quantity.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: QUANTITY OF %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferQuantityTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.transfer.quantity.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.quantity.title"
        }

        let format = NSLocalizedString("a.wallet.token.transfer.quantity.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: RPC URL
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addrpcServerRpcUrlTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addrpcServer.rpcUrl.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addrpcServer.rpcUrl.title"
        }

        return NSLocalizedString("addrpcServer.rpcUrl.title", bundle: bundle, comment: "")
      }

      /// en translation: RPC URL is invalid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addrpcServerRpcUrlError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addrpcServer.rpcUrl.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addrpcServer.rpcUrl.error"
        }

        return NSLocalizedString("addrpcServer.rpcUrl.error", bundle: bundle, comment: "")
      }

      /// en translation: Rankings
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesRankings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.rankings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.rankings"
        }

        return NSLocalizedString("semifungibles.rankings", bundle: bundle, comment: "")
      }

      /// en translation: Rapid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationTypeRapid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.Type.rapid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.Type.rapid"
        }

        return NSLocalizedString("transactionConfiguration.Type.rapid", bundle: bundle, comment: "")
      }

      /// en translation: Receive
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func receive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Receive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Receive"
        }

        return NSLocalizedString("Receive", bundle: bundle, comment: "")
      }

      /// en translation: Received
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionCellReceivedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.cell.received.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.cell.received.title"
        }

        return NSLocalizedString("transaction.cell.received.title", bundle: bundle, comment: "")
      }

      /// en translation: Recent Transactions
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func recentTransactions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recent.transactions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recent.transactions"
        }

        return NSLocalizedString("recent.transactions", bundle: bundle, comment: "")
      }

      /// en translation: Recipient
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendRecipient(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send.recipient", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send.recipient"
        }

        return NSLocalizedString("send.recipient", bundle: bundle, comment: "")
      }

      /// en translation: Recipient
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfirmationSendSectionRecipientTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfirmation.Send.Section.Recipient.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfirmation.Send.Section.Recipient.title"
        }

        return NSLocalizedString("transactionConfirmation.Send.Section.Recipient.title", bundle: bundle, comment: "")
      }

      /// en translation: Recipient’s Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendRecipientsAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send.recipientsAddress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send.recipientsAddress"
        }

        return NSLocalizedString("send.recipientsAddress", bundle: bundle, comment: "")
      }

      /// en translation: Recovery Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func recoveryPhraseNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recoveryPhrase.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recoveryPhrase.navigation.title"
        }

        return NSLocalizedString("recoveryPhrase.navigation.title", bundle: bundle, comment: "")
      }

      /// en translation: Reddit
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func urlReddit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("url.reddit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "url.reddit"
        }

        return NSLocalizedString("url.reddit", bundle: bundle, comment: "")
      }

      /// en translation: Redeem
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenRedeemButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.redeem.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.redeem.button.title"
        }

        return NSLocalizedString("a.wallet.token.redeem.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Redeemed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenBundleStatusRedeemedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.tokenBundle.status.redeemed.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.tokenBundle.status.redeemed.title"
        }

        return NSLocalizedString("a.wallet.tokenBundle.status.redeemed.title", bundle: bundle, comment: "")
      }

      /// en translation: Refresh
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func refresh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Refresh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Refresh"
        }

        return NSLocalizedString("Refresh", bundle: bundle, comment: "")
      }

      /// en translation: Reject
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func confirmPaymentRejectButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPayment.reject.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmPayment.reject.button.title"
        }

        return NSLocalizedString("confirmPayment.reject.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Reload
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func browserReloadButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("browser.reload.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "browser.reload.button.title"
        }

        return NSLocalizedString("browser.reload.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Reload
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func reload(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reload", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Reload"
        }

        return NSLocalizedString("Reload", bundle: bundle, comment: "")
      }

      /// en translation: Remember to back up your wallet by a secure seed phrase.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func backupPromptDescriptionWithoutAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backup.prompt.description.withoutAmount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backup.prompt.description.withoutAmount"
        }

        return NSLocalizedString("backup.prompt.description.withoutAmount", bundle: bundle, comment: "")
      }

      /// en translation: Remind me to back up later?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func backupPromptBackupRemindLater(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backup.prompt.backup.remindLater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backup.prompt.backup.remindLater"
        }

        return NSLocalizedString("backup.prompt.backup.remindLater", bundle: bundle, comment: "")
      }

      /// en translation: Remove
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func removeButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("removeButton.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "removeButton.title"
        }

        return NSLocalizedString("removeButton.title", bundle: bundle, comment: "")
      }

      /// en translation: Remove Bookmark?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func dappBrowserClearMyDapps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dappBrowser.clearMyDapps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dappBrowser.clearMyDapps"
        }

        return NSLocalizedString("dappBrowser.clearMyDapps", bundle: bundle, comment: "")
      }

      /// en translation: Remove History?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func browserHistoryConfirmDeleteTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("browser.history.confirm.delete.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "browser.history.confirm.delete.title"
        }

        return NSLocalizedString("browser.history.confirm.delete.title", bundle: bundle, comment: "")
      }

      /// en translation: Rename This Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokensWalletRenameThisWallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tokens.wallet.renameThisWallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tokens.wallet.renameThisWallet"
        }

        return NSLocalizedString("tokens.wallet.renameThisWallet", bundle: bundle, comment: "")
      }

      /// en translation: Rename Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsNameRename(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.name.rename", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.name.rename"
        }

        return NSLocalizedString("wallets.name.rename", bundle: bundle, comment: "")
      }

      /// en translation: Rename Wallet to
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsNameRenameTo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.name.rename.to", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.name.rename.to"
        }

        return NSLocalizedString("wallets.name.rename.to", bundle: bundle, comment: "")
      }

      /// en translation: Request Rejected! Switch to non watched wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectFailureMustNotBeWatchedWallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.failure.mustNotBeWatchedWallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.failure.mustNotBeWatchedWallet"
        }

        return NSLocalizedString("walletConnect.failure.mustNotBeWatchedWallet", bundle: bundle, comment: "")
      }

      /// en translation: Request has timed out. Please try again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendTransactionErrorPossibleBinanceTestnetTimeout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendTransaction.error.possibleBinanceTestnetTimeout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendTransaction.error.possibleBinanceTestnetTimeout"
        }

        return NSLocalizedString("sendTransaction.error.possibleBinanceTestnetTimeout", bundle: bundle, comment: "")
      }

      /// en translation: Request has timed out. Please try again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendTransactionErrorRequestTimedOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendTransaction.error.requestTimedOut", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendTransaction.error.requestTimedOut"
        }

        return NSLocalizedString("sendTransaction.error.requestTimedOut", bundle: bundle, comment: "")
      }

      /// en translation: Reserve
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesAttributeReserve(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.attribute.reserve", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.attribute.reserve"
        }

        return NSLocalizedString("semifungibles.attribute.reserve", bundle: bundle, comment: "")
      }

      /// en translation: Retry
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func retry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Retry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Retry"
        }

        return NSLocalizedString("Retry", bundle: bundle, comment: "")
      }

      /// en translation: Ropsten tokens are like ‘Monopoly’ money. They have zero financial worth but are used by developers to try out new designs without needing to spend valuable coins. 
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTestnetWarning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.testnetWarning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.testnetWarning"
        }

        return NSLocalizedString("token.testnetWarning", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save"
        }

        return NSLocalizedString("Save", bundle: bundle, comment: "")
      }

      /// en translation: Save Name
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletRenameSave(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet.rename.save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet.rename.save"
        }

        return NSLocalizedString("wallet.rename.save", bundle: bundle, comment: "")
      }

      /// en translation: Save Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func editCustomRPCSaveButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editCustomRPC.saveButton.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editCustomRPC.saveButton.title"
        }

        return NSLocalizedString("editCustomRPC.saveButton.title", bundle: bundle, comment: "")
      }

      /// en translation: Saving
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addMultipleCustomRpcTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add.multiple.customRpc.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add.multiple.customRpc.title"
        }

        return NSLocalizedString("add.multiple.customRpc.title", bundle: bundle, comment: "")
      }

      /// en translation: Scan QR Code
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func browserScanQRCodeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("browser.scanQRCode.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "browser.scanQRCode.title"
        }

        return NSLocalizedString("browser.scanQRCode.title", bundle: bundle, comment: "")
      }

      /// en translation: Scan QR Code
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectSessionsScanQrCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.sessions.scanQrCode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.sessions.scanQrCode"
        }

        return NSLocalizedString("walletConnect.sessions.scanQrCode", bundle: bundle, comment: "")
      }

      /// en translation: Scan QR Code again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectScanQRCodeAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.scanQRCodeAgain", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.scanQRCodeAgain"
        }

        return NSLocalizedString("walletConnect.scanQRCodeAgain", bundle: bundle, comment: "")
      }

      /// en translation: Scan QR Code for URL
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func browserScanQRCodeButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("browser.scanQRCode.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "browser.scanQRCode.button.title"
        }

        return NSLocalizedString("browser.scanQRCode.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Scan the QR Code or copy the text below:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletAddressScanInstructions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.address.scan.instructions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.address.scan.instructions"
        }

        return NSLocalizedString("a.wallet.address.scan.instructions", bundle: bundle, comment: "")
      }

      /// en translation: Search for Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func customRPCBrowseSearchPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("customRPC.browse.search.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "customRPC.browse.search.placeholder"
        }

        return NSLocalizedString("customRPC.browse.search.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Search for a token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokensSearchbarPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tokens.searchbar.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tokens.searchbar.placeholder"
        }

        return NSLocalizedString("tokens.searchbar.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Search or type URL
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func browserUrlTextfieldPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("browser.url.textfield.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "browser.url.textfield.placeholder"
        }

        return NSLocalizedString("browser.url.textfield.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Search tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func editTokensSearchBarPlaceholderTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editTokens.searchBar.placeholder.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editTokens.searchBar.placeholder.title"
        }

        return NSLocalizedString("editTokens.searchBar.placeholder.title", bundle: bundle, comment: "")
      }

      /// en translation: Seed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func mnemonicShorter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mnemonic.shorter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mnemonic.shorter"
        }

        return NSLocalizedString("mnemonic.shorter", bundle: bundle, comment: "")
      }

      /// en translation: Seed Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func mnemonic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mnemonic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mnemonic"
        }

        return NSLocalizedString("mnemonic", bundle: bundle, comment: "")
      }

      /// en translation: Seed phrase has to be 12
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func importWalletImportInvalidMnemonicCount12(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("importWallet.import.invalidMnemonicCount.12", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "importWallet.import.invalidMnemonicCount.12"
        }

        return NSLocalizedString("importWallet.import.invalidMnemonicCount.12", bundle: bundle, comment: "")
      }

      /// en translation: Seed phrase has to be 12 or 24 words
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func importWalletImportInvalidMnemonicCount24(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("importWallet.import.invalidMnemonicCount.24", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "importWallet.import.invalidMnemonicCount.24"
        }

        return NSLocalizedString("importWallet.import.invalidMnemonicCount.24", bundle: bundle, comment: "")
      }

      /// en translation: Seed phrase is invalid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func importWalletImportInvalidMnemonic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("importWallet.import.invalidMnemonic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "importWallet.import.invalidMnemonic"
        }

        return NSLocalizedString("importWallet.import.invalidMnemonic", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSelectTokens(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.selectTokens", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.selectTokens"
        }

        return NSLocalizedString("a.wallet.token.selectTokens", bundle: bundle, comment: "")
      }

      /// en translation: Select %@ To Redeem:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenRedeemSelectTokensTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.redeem.selectTokens.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.redeem.selectTokens.title"
        }

        let format = NSLocalizedString("a.wallet.token.redeem.selectTokens.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Select %@ To Sell:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellSelectTokensTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.sell.selectTokens.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.selectTokens.title"
        }

        let format = NSLocalizedString("a.wallet.token.sell.selectTokens.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Select %@ To Transfer:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferSelectTokensTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.transfer.selectTokens.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.selectTokens.title"
        }

        let format = NSLocalizedString("a.wallet.token.transfer.selectTokens.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Select Active Networks
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsSelectActiveNetworksTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.selectActiveNetworks.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.selectActiveNetworks.title"
        }

        return NSLocalizedString("settings.selectActiveNetworks.title", bundle: bundle, comment: "")
      }

      /// en translation: Select All
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesSelectionSelectAll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.selection.selectAll", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.selection.selectAll"
        }

        return NSLocalizedString("semifungibles.selection.selectAll", bundle: bundle, comment: "")
      }

      /// en translation: Select All
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesToolbarSelectAll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.toolbar.selectAll", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.toolbar.selectAll"
        }

        return NSLocalizedString("semifungibles.toolbar.selectAll", bundle: bundle, comment: "")
      }

      /// en translation: Select Asset
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func assetsSelectAssetTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("assets.selectAsset.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "assets.selectAsset.title"
        }

        return NSLocalizedString("assets.selectAsset.title", bundle: bundle, comment: "")
      }

      /// en translation: Select Quantity of %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenRedeemSelectQuantityTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.redeem.selectQuantity.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.redeem.selectQuantity.title"
        }

        let format = NSLocalizedString("a.wallet.token.redeem.selectQuantity.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Selected Tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesSelectedTokens(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.selectedTokens", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.selectedTokens"
        }

        return NSLocalizedString("semifungibles.selectedTokens", bundle: bundle, comment: "")
      }

      /// en translation: Sell
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.sell.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.button.title"
        }

        return NSLocalizedString("a.wallet.token.sell.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Sell
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesToolbarSell(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.toolbar.sell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.toolbar.sell"
        }

        return NSLocalizedString("semifungibles.toolbar.sell", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.transfer.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.button.title"
        }

        return NSLocalizedString("a.wallet.token.transfer.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesToolbarSend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.toolbar.send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.toolbar.send"
        }

        return NSLocalizedString("semifungibles.toolbar.send", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send"
        }

        return NSLocalizedString("Send", bundle: bundle, comment: "")
      }

      /// en translation: Send raw transaction
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectSendRawTransactionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.sendRawTransaction.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.sendRawTransaction.title"
        }

        return NSLocalizedString("walletConnect.sendRawTransaction.title", bundle: bundle, comment: "")
      }

      /// en translation: Send to this Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func qrCodeSendToAddressTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qrCode.sendToAddress.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qrCode.sendToAddress.title"
        }

        return NSLocalizedString("qrCode.sendToAddress.title", bundle: bundle, comment: "")
      }

      /// en translation: Send/Receive
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aSendReceiveButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.send.receive.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.send.receive.button.title"
        }

        return NSLocalizedString("a.send.receive.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Sending %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activitySendPending(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("activity.send.pending", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.send.pending"
        }

        let format = NSLocalizedString("activity.send.pending", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Sent
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionCellSentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.cell.sent.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.cell.sent.title"
        }

        return NSLocalizedString("transaction.cell.sent.title", bundle: bundle, comment: "")
      }

      /// en translation: Set Alert
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func priceAlertSet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priceAlert.set", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "priceAlert.set"
        }

        return NSLocalizedString("priceAlert.set", bundle: bundle, comment: "")
      }

      /// en translation: Set Keystore Password
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func enterPasswordNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enterPassword.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enterPassword.navigation.title"
        }

        return NSLocalizedString("enterPassword.navigation.title", bundle: bundle, comment: "")
      }

      /// en translation: Set MagicLink Expiry
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellEnterLinkExpiryDateTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.sell.enterLinkExpiryDate.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.enterLinkExpiryDate.title"
        }

        return NSLocalizedString("a.wallet.token.sell.enterLinkExpiryDate.title", bundle: bundle, comment: "")
      }

      /// en translation: Set New Alert
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func priceAlertSetNewAlert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priceAlert.setNewAlert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "priceAlert.setNewAlert"
        }

        return NSLocalizedString("priceAlert.setNewAlert", bundle: bundle, comment: "")
      }

      /// en translation: Set Passcode
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func lockCreatePasscodeViewModelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lock.create.passcode.view.model.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lock.create.passcode.view.model.title"
        }

        return NSLocalizedString("lock.create.passcode.view.model.title", bundle: bundle, comment: "")
      }

      /// en translation: Set Password for Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsAdvancedExportJSONKeystoreFilePasswordButtonInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.advanced.exportJSONKeystore.file.passwordButton.info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.advanced.exportJSONKeystore.file.passwordButton.info"
        }

        return NSLocalizedString("settings.advanced.exportJSONKeystore.file.passwordButton.info", bundle: bundle, comment: "")
      }

      /// en translation: Set Password for Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsAdvancedExportJSONKeystorePasswordTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.advanced.exportJSONKeystore.password.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.advanced.exportJSONKeystore.password.title"
        }

        return NSLocalizedString("settings.advanced.exportJSONKeystore.password.title", bundle: bundle, comment: "")
      }

      /// en translation: Set Speed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func configureTransactionNavigationBarTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("configureTransaction.navigationBar.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "configureTransaction.navigationBar.title"
        }

        return NSLocalizedString("configureTransaction.navigationBar.title", bundle: bundle, comment: "")
      }

      /// en translation: Set Speed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorRectifyButtonTitleGasLimitTooHigh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.rectifyButtonTitle.gasLimitTooHigh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.rectifyButtonTitle.gasLimitTooHigh"
        }

        return NSLocalizedString("token.transactionConfirmation.error.rectifyButtonTitle.gasLimitTooHigh", bundle: bundle, comment: "")
      }

      /// en translation: Set Speed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorRectifyButtonTitleGasLimitTooLow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.rectifyButtonTitle.gasLimitTooLow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.rectifyButtonTitle.gasLimitTooLow"
        }

        return NSLocalizedString("token.transactionConfirmation.error.rectifyButtonTitle.gasLimitTooLow", bundle: bundle, comment: "")
      }

      /// en translation: Set Speed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorRectifyButtonTitleGasPriceTooLow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.rectifyButtonTitle.gasPriceTooLow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.rectifyButtonTitle.gasPriceTooLow"
        }

        return NSLocalizedString("token.transactionConfirmation.error.rectifyButtonTitle.gasPriceTooLow", bundle: bundle, comment: "")
      }

      /// en translation: Set a Price
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellSelectQuantityTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.sell.selectQuantity.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.selectQuantity.title"
        }

        return NSLocalizedString("a.wallet.token.sell.selectQuantity.title", bundle: bundle, comment: "")
      }

      /// en translation: Set as Home Page
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func setAsHomePage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("setAsHomePage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "setAsHomePage"
        }

        return NSLocalizedString("setAsHomePage", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aSettingsNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.settings.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.settings.navigation.title"
        }

        return NSLocalizedString("a.settings.navigation.title", bundle: bundle, comment: "")
      }

      /// en translation: Share
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share"
        }

        return NSLocalizedString("Share", bundle: bundle, comment: "")
      }

      /// en translation: Share
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func welldoneShareLabelText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("welldone.share.label.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "welldone.share.label.text"
        }

        return NSLocalizedString("welldone.share.label.text", bundle: bundle, comment: "")
      }

      /// en translation: Share Anonymous Data?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func analyticsShareAnonymousData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("analytics.shareAnonymousData", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "analytics.shareAnonymousData"
        }

        return NSLocalizedString("analytics.shareAnonymousData", bundle: bundle, comment: "")
      }

      /// en translation: Share MagicLink
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellConfirmButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.sell.confirm.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.confirm.button.title"
        }

        return NSLocalizedString("a.wallet.token.sell.confirm.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Show My Wallet Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsShowMyWalletTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.show.my.wallet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.show.my.wallet.title"
        }

        return NSLocalizedString("settings.show.my.wallet.title", bundle: bundle, comment: "")
      }

      /// en translation: Show QR Code to Redemption Booth
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenRedeemShowQRCodeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.redeem.showQRCode.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.redeem.showQRCode.title"
        }

        return NSLocalizedString("a.wallet.token.redeem.showQRCode.title", bundle: bundle, comment: "")
      }

      /// en translation: Show Seed Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsShowSeedPhraseButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.showSeedPhrase.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.showSeedPhrase.button.title"
        }

        return NSLocalizedString("settings.showSeedPhrase.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Show Seed Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsBackupHdWalletAlertSheetTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.backupHdWallet.alertSheet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.backupHdWallet.alertSheet.title"
        }

        return NSLocalizedString("wallets.backupHdWallet.alertSheet.title", bundle: bundle, comment: "")
      }

      /// en translation: Show Tokens on Launch
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsPreferencesButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.preferences.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.preferences.button.title"
        }

        return NSLocalizedString("settings.preferences.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Show Wallet QR Code
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func donateShortcutsWalletQrCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("donate.shortcuts.walletQrCode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "donate.shortcuts.walletQrCode"
        }

        return NSLocalizedString("donate.shortcuts.walletQrCode", bundle: bundle, comment: "")
      }

      /// en translation: Show errors
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenScriptShowErrors(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TokenScript.showErrors", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TokenScript.showErrors"
        }

        return NSLocalizedString("TokenScript.showErrors", bundle: bundle, comment: "")
      }

      /// en translation: Sign
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func confirmPaymentSignButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPayment.sign.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmPayment.sign.button.title"
        }

        return NSLocalizedString("confirmPayment.sign.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Signature Request
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func signatureConfirmationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signature.confirmation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signature.confirmation.title"
        }

        return NSLocalizedString("signature.confirmation.title", bundle: bundle, comment: "")
      }

      /// en translation: Signed Transactions
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectSessionSignedTransactions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.session.signedTransactions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.session.signedTransactions"
        }

        return NSLocalizedString("walletConnect.session.signedTransactions", bundle: bundle, comment: "")
      }

      /// en translation: Since only you control your money, you'll need to save your backup keystore in case this app is deleted.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func exportControlYourMoneyLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("export.controlYourMoney.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "export.controlYourMoney.label.title"
        }

        return NSLocalizedString("export.controlYourMoney.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Skip"
        }

        return NSLocalizedString("Skip", bundle: bundle, comment: "")
      }

      /// en translation: Slow
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationTypeSlow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.Type.slow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.Type.slow"
        }

        return NSLocalizedString("transactionConfiguration.Type.slow", bundle: bundle, comment: "")
      }

      /// en translation: Sold
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenBundleStatusSoldTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.tokenBundle.status.sold.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.tokenBundle.status.sold.title"
        }

        return NSLocalizedString("a.wallet.tokenBundle.status.sold.title", bundle: bundle, comment: "")
      }

      /// en translation: Something went wrong... Try again.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func errorViewDescriptionLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorView.description.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorView.description.label.title"
        }

        return NSLocalizedString("errorView.description.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Sort: By %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sortTokensSortBy(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("sortTokens.sortBy", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sortTokens.sortBy"
        }

        let format = NSLocalizedString("sortTokens.sortBy", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Speed (Gas)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationGasTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.gas.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.gas.title"
        }

        return NSLocalizedString("token.transactionConfirmation.gas.title", bundle: bundle, comment: "")
      }

      /// en translation: Speed up
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activitySpeedup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("activity.speedup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.speedup"
        }

        return NSLocalizedString("activity.speedup", bundle: bundle, comment: "")
      }

      /// en translation: Stats
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesStats(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.stats", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.stats"
        }

        return NSLocalizedString("semifungibles.stats", bundle: bundle, comment: "")
      }

      /// en translation: Stats
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenInfoHeaderStats(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.info.header.stats", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.info.header.stats"
        }

        return NSLocalizedString("token.info.header.stats", bundle: bundle, comment: "")
      }

      /// en translation: Status
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectStatusPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.statusPlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.statusPlaceholder"
        }

        return NSLocalizedString("walletConnect.statusPlaceholder", bundle: bundle, comment: "")
      }

      /// en translation: Stay Updated
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func emailListPromptTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailList.prompt.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emailList.prompt.title"
        }

        return NSLocalizedString("emailList.prompt.title", bundle: bundle, comment: "")
      }

      /// en translation: Still need help? Contact Us
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aHelpContactFooterButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.help.contact.footer.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.help.contact.footer.button.title"
        }

        return NSLocalizedString("a.help.contact.footer.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Summary
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletTypesSummary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet.types.summary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet.types.summary"
        }

        return NSLocalizedString("wallet.types.summary", bundle: bundle, comment: "")
      }

      /// en translation: Supply Type
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesAttributeSupplyType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.attribute.supplyType", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.attribute.supplyType"
        }

        return NSLocalizedString("semifungibles.attribute.supplyType", bundle: bundle, comment: "")
      }

      /// en translation: Support
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsSupportTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.support.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.support.title"
        }

        return NSLocalizedString("settings.support.title", bundle: bundle, comment: "")
      }

      /// en translation: Support
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func suppportTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("suppport.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "suppport.title"
        }

        return NSLocalizedString("suppport.title", bundle: bundle, comment: "")
      }

      /// en translation: Swap
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenErc20ExchangeHoneyswapButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.erc20ExchangeHoneyswap.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.erc20ExchangeHoneyswap.button.title"
        }

        return NSLocalizedString("a.wallet.token.erc20ExchangeHoneyswap.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Swap
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenErc20ExchangeOn1inchButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.erc20ExchangeOn1inch.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.erc20ExchangeOn1inch.button.title"
        }

        return NSLocalizedString("a.wallet.token.erc20ExchangeOn1inch.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Swap
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenErc20ExchangeOnQuickSwapButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.erc20ExchangeOnQuickSwap.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.erc20ExchangeOnQuickSwap.button.title"
        }

        return NSLocalizedString("a.wallet.token.erc20ExchangeOnQuickSwap.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Swap
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenErc20ExchangeOnUniswapButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.erc20ExchangeOnUniswap.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.erc20ExchangeOnUniswap.button.title"
        }

        return NSLocalizedString("a.wallet.token.erc20ExchangeOnUniswap.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Swap
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activityGroupTransactionSwap(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("activity.groupTransaction.swap", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.groupTransaction.swap"
        }

        return NSLocalizedString("activity.groupTransaction.swap", bundle: bundle, comment: "")
      }

      /// en translation: Switch & Reload
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func switchChainRequestActionSwitchReload(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("switchChainRequest.action.switchReload", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "switchChainRequest.action.switchReload"
        }

        return NSLocalizedString("switchChainRequest.action.switchReload", bundle: bundle, comment: "")
      }

      /// en translation: Switch Chain Request
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func switchChainRequestTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("switchChainRequest.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "switchChainRequest.title"
        }

        return NSLocalizedString("switchChainRequest.title", bundle: bundle, comment: "")
      }

      /// en translation: Switch Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectSessionSwitchNetwork(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.session.switchNetwork", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.session.switchNetwork"
        }

        return NSLocalizedString("walletConnect.session.switchNetwork", bundle: bundle, comment: "")
      }

      /// en translation: Switch to Mainnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func whereAreMyTokensAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("whereAreMyTokens.action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "whereAreMyTokens.action"
        }

        return NSLocalizedString("whereAreMyTokens.action", bundle: bundle, comment: "")
      }

      /// en translation: Symbol
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func symbol(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Symbol", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Symbol"
        }

        return NSLocalizedString("Symbol", bundle: bundle, comment: "")
      }

      /// en translation: Symbol is invalid
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addrpcServerSymbolError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addrpcServer.symbol.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addrpcServer.symbol.error"
        }

        return NSLocalizedString("addrpcServer.symbol.error", bundle: bundle, comment: "")
      }

      /// en translation: System
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsSectionSystemTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.section.system.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.section.system.title"
        }

        return NSLocalizedString("settings.section.system.title", bundle: bundle, comment: "")
      }

      /// en translation: Telegram (Customer Support)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func urlTelegramCustomer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("url.telegramCustomer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "url.telegramCustomer"
        }

        return NSLocalizedString("url.telegramCustomer", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Service
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aHelpContentsTermsOfService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.help.contents.termsOfService", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.help.contents.termsOfService"
        }

        return NSLocalizedString("a.help.contents.termsOfService", bundle: bundle, comment: "")
      }

      /// en translation: Test
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsNetworkTestLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.network.test.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.network.test.label.title"
        }

        return NSLocalizedString("settings.network.test.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Testnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsEnabledNetworksTestnet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.enabledNetworks.testnet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.enabledNetworks.testnet"
        }

        return NSLocalizedString("settings.enabledNetworks.testnet", bundle: bundle, comment: "")
      }

      /// en translation: Testnet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func whereAreMyTokensTestnet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("whereAreMyTokens.testnet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "whereAreMyTokens.testnet"
        }

        return NSLocalizedString("whereAreMyTokens.testnet", bundle: bundle, comment: "")
      }

      /// en translation: Testnets tokens are like ‘Monopoly’ money. They have zero financial worth but are used by developers to try out new designs without needing to spend valuable coins.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsEnabledNetworksPromptEnableTestnetDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.enabledNetworks.promptEnableTestnet.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.enabledNetworks.promptEnableTestnet.description"
        }

        return NSLocalizedString("settings.enabledNetworks.promptEnableTestnet.description", bundle: bundle, comment: "")
      }

      /// en translation: Thank you!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func welldoneNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("welldone.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "welldone.navigation.title"
        }

        return NSLocalizedString("welldone.navigation.title", bundle: bundle, comment: "")
      }

      /// en translation: The Ethereum blockchain network is very congested now. Fees might be higher than usual.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationGasPriceCongestedDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.gasPrice.congested.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.gasPrice.congested.description"
        }

        return NSLocalizedString("transactionConfiguration.gasPrice.congested.description", bundle: bundle, comment: "")
      }

      /// en translation: The MagicLink will be valid until:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferMagicLinkDescriptionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.transfer.magicLinkDescription.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.magicLinkDescription.title"
        }

        return NSLocalizedString("a.wallet.token.transfer.magicLinkDescription.title", bundle: bundle, comment: "")
      }

      /// en translation: The gas limit prevents smart contracts from consuming all your %@. We will try to calculate the gas limit automatically for you, but some smart contracts may require a custom gas limit.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func configureTransactionGasLimitLabelDescription(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("configureTransaction.gasLimit.label.description", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "configureTransaction.gasLimit.label.description"
        }

        let format = NSLocalizedString("configureTransaction.gasLimit.label.description", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: The gas limit specified for this transaction is too low. AlphaWallet is using a live oracle and updates the gas price every 15 seconds. We recommend you to choose preselected amount (Slow, Average, Fast).
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorDescriptionGasLimitTooLow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.description.gasLimitTooLow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.description.gasLimitTooLow"
        }

        return NSLocalizedString("token.transactionConfirmation.error.description.gasLimitTooLow", bundle: bundle, comment: "")
      }

      /// en translation: The gas price specified for this transaction is too high. AlphaWallet is using a live oracle and updates the gas price every 15 seconds. We recommend you to choose preselected amount (Slow, Average, Fast).
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorDescriptionGasLimitTooHigh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.description.gasLimitTooHigh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.description.gasLimitTooHigh"
        }

        return NSLocalizedString("token.transactionConfirmation.error.description.gasLimitTooHigh", bundle: bundle, comment: "")
      }

      /// en translation: The gas price specified for this transaction is too low. AlphaWallet is using a live oracle and updates the gas price every 15 seconds. We recommend you to choose preselected amount (Slow, Average, Fast).
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorDescriptionGasPriceTooLow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.description.gasPriceTooLow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.description.gasPriceTooLow"
        }

        return NSLocalizedString("token.transactionConfirmation.error.description.gasPriceTooLow", bundle: bundle, comment: "")
      }

      /// en translation: The higher the fee, the better chances and faster your transaction will go through. Fees are based on current Ethereum blockchain network load.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfirmationFeeFooterText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfirmation.fee.footerText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfirmation.fee.footerText"
        }

        return NSLocalizedString("transactionConfirmation.fee.footerText", bundle: bundle, comment: "")
      }

      /// en translation: The network connection was lost. Please try again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendTransactionErrorNetworkConnectionWasLost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendTransaction.error.networkConnectionWasLost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendTransaction.error.networkConnectionWasLost"
        }

        return NSLocalizedString("sendTransaction.error.networkConnectionWasLost", bundle: bundle, comment: "")
      }

      /// en translation: The nonce is the total number of transactions which has been sent from this wallet so far, and is included for security purposes.  We recommend to leave the nonce empty.  We'll fill it for you.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorDescriptionNonceTooLowError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.description.nonceTooLowError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.description.nonceTooLowError"
        }

        return NSLocalizedString("token.transactionConfirmation.error.description.nonceTooLowError", bundle: bundle, comment: "")
      }

      /// en translation: The transaction is sent to the Ethereum blockchain. It might take few minutes to be confirmed by miners.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransactionInProgressSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.transaction.inProgress.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transaction.inProgress.subtitle"
        }

        return NSLocalizedString("a.wallet.token.transaction.inProgress.subtitle", bundle: bundle, comment: "")
      }

      /// en translation: There might have been too many requests. Please try again later
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendTransactionErrorRateLimited(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendTransaction.error.rateLimited", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendTransaction.error.rateLimited"
        }

        return NSLocalizedString("sendTransaction.error.rateLimited", bundle: bundle, comment: "")
      }

      /// en translation: These entries have been temporarily removed. 
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addMultipleCustomRpcRemoved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add.multiple.customRpc.removed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add.multiple.customRpc.removed"
        }

        return NSLocalizedString("add.multiple.customRpc.removed", bundle: bundle, comment: "")
      }

      /// en translation: This is Testnet Network
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addrpcServerIsTestnetTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addrpcServer.isTestnet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addrpcServer.isTestnet.title"
        }

        return NSLocalizedString("addrpcServer.isTestnet.title", bundle: bundle, comment: "")
      }

      /// en translation: This site is requesting you to add and switch to the %@ chain with chain ID: %ld. This will reload the page.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addCustomChainAddAndSwitch(_ value1: String, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("addCustomChain.addAndSwitch", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addCustomChain.addAndSwitch"
        }

        let format = NSLocalizedString("addCustomChain.addAndSwitch", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: This site is requesting you to enable and switch to the %@ chain with chain ID: %ld. This will reload the page.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addCustomChainEnableExisting(_ value1: String, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("addCustomChain.enableExisting", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addCustomChain.enableExisting"
        }

        let format = NSLocalizedString("addCustomChain.enableExisting", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: This site is requesting you to switch to the %@ chain with chain ID: %ld. This will reload the page.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addCustomChainSwitchToExisting(_ value1: String, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("addCustomChain.switchToExisting", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addCustomChain.switchToExisting"
        }

        let format = NSLocalizedString("addCustomChain.switchToExisting", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: This wallet could be only used for watching. Import Private Key/Keystore to sign transactions
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func inCoordinatorErrorOnlyWatchAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("InCoordinatorError.onlyWatchAccount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "InCoordinatorError.onlyWatchAccount"
        }

        return NSLocalizedString("InCoordinatorError.onlyWatchAccount", bundle: bundle, comment: "")
      }

      /// en translation: This will restart the app
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsEnabledNetworksDeleteMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.enabledNetworks.delete.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.enabledNetworks.delete.message"
        }

        return NSLocalizedString("settings.enabledNetworks.delete.message", bundle: bundle, comment: "")
      }

      /// en translation: Ticket
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func ticketTitlecase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ticket.titlecase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ticket.titlecase"
        }

        return NSLocalizedString("ticket.titlecase", bundle: bundle, comment: "")
      }

      /// en translation: Tickets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func ticketsTitlecase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tickets.titlecase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tickets.titlecase"
        }

        return NSLocalizedString("tickets.titlecase", bundle: bundle, comment: "")
      }

      /// en translation: Time to back up your Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func backupPromptAfterIntervalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backup.prompt.afterInterval.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backup.prompt.afterInterval.title"
        }

        return NSLocalizedString("backup.prompt.afterInterval.title", bundle: bundle, comment: "")
      }

      /// en translation: Title
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func dappBrowserMyDappsEditTitleLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dappBrowser.myDapps.edit.title.label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dappBrowser.myDapps.edit.title.label"
        }

        return NSLocalizedString("dappBrowser.myDapps.edit.title.label", bundle: bundle, comment: "")
      }

      /// en translation: To
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func confirmPaymentToLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPayment.to.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmPayment.to.label.title"
        }

        return NSLocalizedString("confirmPayment.to.label.title", bundle: bundle, comment: "")
      }

      /// en translation: To
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionToLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.to.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.to.label.title"
        }

        return NSLocalizedString("transaction.to.label.title", bundle: bundle, comment: "")
      }

      /// en translation: To lock your private key to increase security
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreAccessKeyNonHdLock(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.accessKey.nonHd.lock", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.accessKey.nonHd.lock"
        }

        return NSLocalizedString("keystore.accessKey.nonHd.lock", bundle: bundle, comment: "")
      }

      /// en translation: To lock your seed phrase to increase security
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreAccessKeyHdLock(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.accessKey.hd.lock", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.accessKey.hd.lock"
        }

        return NSLocalizedString("keystore.accessKey.hd.lock", bundle: bundle, comment: "")
      }

      /// en translation: Today
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func today(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Today", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Today"
        }

        return NSLocalizedString("Today", bundle: bundle, comment: "")
      }

      /// en translation: Token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTitlecase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.titlecase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.titlecase"
        }

        return NSLocalizedString("token.titlecase", bundle: bundle, comment: "")
      }

      /// en translation: Token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfirmationSendSectionTokenIdTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfirmation.Send.Section.TokenId.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfirmation.Send.Section.TokenId.title"
        }

        return NSLocalizedString("transactionConfirmation.Send.Section.TokenId.title", bundle: bundle, comment: "")
      }

      /// en translation: Token ID
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesTokenId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.tokenId", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.tokenId"
        }

        return NSLocalizedString("semifungibles.tokenId", bundle: bundle, comment: "")
      }

      /// en translation: TokenScript Compatibility
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsTokenScriptStandardTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.tokenScriptStandard.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.tokenScriptStandard.title"
        }

        return NSLocalizedString("settings.tokenScriptStandard.title", bundle: bundle, comment: "")
      }

      /// en translation: TokenScript Overrides
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aHelpAssetDefinitionOverridesTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.help.assetDefinitionOverrides.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.help.assetDefinitionOverrides.title"
        }

        return NSLocalizedString("a.help.assetDefinitionOverrides.title", bundle: bundle, comment: "")
      }

      /// en translation: Tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokensTitlecase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tokens.titlecase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tokens.titlecase"
        }

        return NSLocalizedString("tokens.titlecase", bundle: bundle, comment: "")
      }

      /// en translation: Tools
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aSettingsTools(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.settings.tools", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.settings.tools"
        }

        return NSLocalizedString("a.settings.tools", bundle: bundle, comment: "")
      }

      /// en translation: Total Cost
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenEthCostLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.ethCostLabel.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.ethCostLabel.title"
        }

        return NSLocalizedString("a.claim.token.ethCostLabel.title", bundle: bundle, comment: "")
      }

      /// en translation: Total Cost:
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellTotalCostTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.sell.totalCost.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.totalCost.title"
        }

        return NSLocalizedString("a.wallet.token.sell.totalCost.title", bundle: bundle, comment: "")
      }

      /// en translation: Total Supply
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesAttributeTotalSupply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.attribute.totalSupply", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.attribute.totalSupply"
        }

        return NSLocalizedString("semifungibles.attribute.totalSupply", bundle: bundle, comment: "")
      }

      /// en translation: Total Supply
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenInfoFieldStatsTotal_supply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.info.field.stats.total_supply", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.info.field.stats.total_supply"
        }

        return NSLocalizedString("token.info.field.stats.total_supply", bundle: bundle, comment: "")
      }

      /// en translation: Total network fee
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func configureTransactionTotalNetworkFeeLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("configureTransaction.totalNetworkFee.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "configureTransaction.totalNetworkFee.label.title"
        }

        return NSLocalizedString("configureTransaction.totalNetworkFee.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Total: %@ %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenSellTotalEthPriceTitle(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.sell.totalEthPrice.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.sell.totalEthPrice.title"
        }

        let format = NSLocalizedString("a.wallet.token.sell.totalEthPrice.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Touch ID
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func touchId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("touch.id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "touch.id"
        }

        return NSLocalizedString("touch.id", bundle: bundle, comment: "")
      }

      /// en translation: Transaction
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.navigation.title"
        }

        return NSLocalizedString("transaction.navigation.title", bundle: bundle, comment: "")
      }

      /// en translation: Transaction #
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionIdLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.id.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.id.label.title"
        }

        return NSLocalizedString("transaction.id.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Transaction Data (Optional)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func configureTransactionDataLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("configureTransaction.data.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "configureTransaction.data.label.title"
        }

        return NSLocalizedString("configureTransaction.data.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Transaction Sent!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendActionTransactionSent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send.action.transaction.sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send.action.transaction.sent"
        }

        return NSLocalizedString("send.action.transaction.sent", bundle: bundle, comment: "")
      }

      /// en translation: Transaction in Progress
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransactionInProgressTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.transaction.inProgress.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transaction.inProgress.title"
        }

        return NSLocalizedString("a.wallet.token.transaction.inProgress.title", bundle: bundle, comment: "")
      }

      /// en translation: Transaction time
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionTimeLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.time.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.time.label.title"
        }

        return NSLocalizedString("transaction.time.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Transactions
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionsTabbarItemTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactions.tabbar.item.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactions.tabbar.item.title"
        }

        return NSLocalizedString("transactions.tabbar.item.title", bundle: bundle, comment: "")
      }

      /// en translation: Transfer %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferSelectQuantityTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.transfer.selectQuantity.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.selectQuantity.title"
        }

        let format = NSLocalizedString("a.wallet.token.transfer.selectQuantity.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Transfer %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionCellTokenTransferTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("transaction.cell.tokenTransfer.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.cell.tokenTransfer.title"
        }

        let format = NSLocalizedString("transaction.cell.tokenTransfer.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Transfer Fee
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesAttributeTransferFee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.attribute.transferFee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.attribute.transferFee"
        }

        return NSLocalizedString("semifungibles.attribute.transferFee", bundle: bundle, comment: "")
      }

      /// en translation: Transfer now
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferModeNowButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.transfer.mode.now.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.mode.now.button.title"
        }

        return NSLocalizedString("a.wallet.token.transfer.mode.now.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Transfer to wallet address %@?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferModeWalletAddressConfirmation(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.transfer.mode.walletAddress.confirmation", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.mode.walletAddress.confirmation"
        }

        let format = NSLocalizedString("a.wallet.token.transfer.mode.walletAddress.confirmation", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Transferable
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesAttributeTransferable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.attribute.transferable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.attribute.transferable"
        }

        return NSLocalizedString("semifungibles.attribute.transferable", bundle: bundle, comment: "")
      }

      /// en translation: Transferred
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenBundleStatusTransferredTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.tokenBundle.status.transferred.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.tokenBundle.status.transferred.title"
        }

        return NSLocalizedString("a.wallet.tokenBundle.status.transferred.title", bundle: bundle, comment: "")
      }

      /// en translation: Transferring %@...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferInProgressTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.transfer.inProgress.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.inProgress.title"
        }

        let format = NSLocalizedString("a.wallet.token.transfer.inProgress.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Try WalletConnect again
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectErrorConnectionTimeoutTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.error.connectionTimeout.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.error.connectionTimeout.title"
        }

        return NSLocalizedString("walletConnect.error.connectionTimeout.title", bundle: bundle, comment: "")
      }

      /// en translation: Try after 1 minute.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func lockEnterPasscodeViewModelTryAfterOneMinute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lock.enter.passcode.view.model.try.after.one.minute", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lock.enter.passcode.view.model.try.after.one.minute"
        }

        return NSLocalizedString("lock.enter.passcode.view.model.try.after.one.minute", bundle: bundle, comment: "")
      }

      /// en translation: Twitter
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func urlTwitter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("url.twitter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "url.twitter"
        }

        return NSLocalizedString("url.twitter", bundle: bundle, comment: "")
      }

      /// en translation: UNVERIFIED
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenUnverifiedContract(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.unverifiedContract", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.unverifiedContract"
        }

        return NSLocalizedString("a.wallet.token.unverifiedContract", bundle: bundle, comment: "")
      }

      /// en translation: USD VALUE
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletContentsValueDollarTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.contents.value.dollar.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.contents.value.dollar.title"
        }

        return NSLocalizedString("a.wallet.contents.value.dollar.title", bundle: bundle, comment: "")
      }

      /// en translation: Undefined error
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func undefinedError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("undefined.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "undefined.error"
        }

        return NSLocalizedString("undefined.error", bundle: bundle, comment: "")
      }

      /// en translation: Unknown
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionCellUnknownTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.cell.unknown.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.cell.unknown.title"
        }

        return NSLocalizedString("transaction.cell.unknown.title", bundle: bundle, comment: "")
      }

      /// en translation: Unknown Error
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addCustomChainErrorUnknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addCustomChain.error.unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addCustomChain.error.unknown"
        }

        return NSLocalizedString("addCustomChain.error.unknown", bundle: bundle, comment: "")
      }

      /// en translation: Unnamed
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func addCustomChainUnnamed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addCustomChain.unnamed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addCustomChain.unnamed"
        }

        return NSLocalizedString("addCustomChain.unnamed", bundle: bundle, comment: "")
      }

      /// en translation: Unsigned
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenScriptType1SupportedNotCanonicalizedAndUnsigned(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TokenScript.type1.supportedNotCanonicalizedAndUnsigned", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TokenScript.type1.supportedNotCanonicalizedAndUnsigned"
        }

        return NSLocalizedString("TokenScript.type1.supportedNotCanonicalizedAndUnsigned", bundle: bundle, comment: "")
      }

      /// en translation: Use Default
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func configureTransactionBarButtonUseDefault(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("configureTransaction.barButton.useDefault", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "configureTransaction.barButton.useDefault"
        }

        return NSLocalizedString("configureTransaction.barButton.useDefault", bundle: bundle, comment: "")
      }

      /// en translation: Use System Setting
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsLanguageUseSystemTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.language.useSystem.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.language.useSystem.title"
        }

        return NSLocalizedString("settings.language.useSystem.title", bundle: bundle, comment: "")
      }

      /// en translation: VERIFIED
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenVerifiedContract(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.token.verifiedContract", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.verifiedContract"
        }

        return NSLocalizedString("a.wallet.token.verifiedContract", bundle: bundle, comment: "")
      }

      /// en translation: Value
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func semifungiblesValue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("semifungibles.value", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "semifungibles.value"
        }

        return NSLocalizedString("semifungibles.value", bundle: bundle, comment: "")
      }

      /// en translation: Value: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenValue(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.value", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.value"
        }

        let format = NSLocalizedString("a.wallet.token.value", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Value: Ascending
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sortTokensParamValueAscending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sortTokens.param.valueAscending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sortTokens.param.valueAscending"
        }

        return NSLocalizedString("sortTokens.param.valueAscending", bundle: bundle, comment: "")
      }

      /// en translation: Value: Descending
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sortTokensParamValueDescending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sortTokens.param.valueDescending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sortTokens.param.valueDescending"
        }

        return NSLocalizedString("sortTokens.param.valueDescending", bundle: bundle, comment: "")
      }

      /// en translation: Verified
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenScriptType1SupportedAndSigned(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TokenScript.type1.supportedAndSigned", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TokenScript.type1.supportedAndSigned"
        }

        return NSLocalizedString("TokenScript.type1.supportedAndSigned", bundle: bundle, comment: "")
      }

      /// en translation: Verify Seed Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsVerifySeedPhraseTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.verifySeedPhrase.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.verifySeedPhrase.title"
        }

        return NSLocalizedString("wallets.verifySeedPhrase.title", bundle: bundle, comment: "")
      }

      /// en translation: Verifying...
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenScriptVerifying(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TokenScript.verifying", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TokenScript.verifying"
        }

        return NSLocalizedString("TokenScript.verifying", bundle: bundle, comment: "")
      }

      /// en translation: Version
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsVersionLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.version.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.version.label.title"
        }

        return NSLocalizedString("settings.version.label.title", bundle: bundle, comment: "")
      }

      /// en translation: View in %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func viewIn(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("view in", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view in"
        }

        let format = NSLocalizedString("view in", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Wait for the transaction to be mined on the network to see details.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendActionTransactionSentWait(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send.action.transaction.sent.wait", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send.action.transaction.sent.wait"
        }

        return NSLocalizedString("send.action.transaction.sent.wait", bundle: bundle, comment: "")
      }

      /// en translation: Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsSectionWalletTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.section.wallet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.section.wallet.title"
        }

        return NSLocalizedString("settings.section.wallet.title", bundle: bundle, comment: "")
      }

      /// en translation: Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletTokensTabbarItemTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletTokens.tabbar.item.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletTokens.tabbar.item.title"
        }

        return NSLocalizedString("walletTokens.tabbar.item.title", bundle: bundle, comment: "")
      }

      /// en translation: Wallet Address
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfirmationRowTitleWallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfirmation.Row.title.wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfirmation.Row.title.wallet"
        }

        return NSLocalizedString("transactionConfirmation.Row.title.wallet", bundle: bundle, comment: "")
      }

      /// en translation: WalletConnect
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsWalletConnectButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.walletConnect.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.walletConnect.button.title"
        }

        return NSLocalizedString("settings.walletConnect.button.title", bundle: bundle, comment: "")
      }

      /// en translation: WalletConnect
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.title"
        }

        return NSLocalizedString("walletConnect.title", bundle: bundle, comment: "")
      }

      /// en translation: WalletConnect Error
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectFailureTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.failure.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.failure.title"
        }

        return NSLocalizedString("walletConnect.failure.title", bundle: bundle, comment: "")
      }

      /// en translation: Wallets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.navigation.title"
        }

        return NSLocalizedString("wallets.navigation.title", bundle: bundle, comment: "")
      }

      /// en translation: Warning
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func warning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("warning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "warning"
        }

        return NSLocalizedString("warning", bundle: bundle, comment: "")
      }

      /// en translation: Watch
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func watch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Watch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Watch"
        }

        return NSLocalizedString("Watch", bundle: bundle, comment: "")
      }

      /// en translation: Watch Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func qrCodeWatchWalletTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qrCode.watchWallet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qrCode.watchWallet.title"
        }

        return NSLocalizedString("qrCode.watchWallet.title", bundle: bundle, comment: "")
      }

      /// en translation: Watch Wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletWatchButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet.watch.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet.watch.button.title"
        }

        return NSLocalizedString("wallet.watch.button.title", bundle: bundle, comment: "")
      }

      /// en translation: Watch-only Wallets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletTypesWatchedWallets(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallet.types.watchedWallets", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallet.types.watchedWallets"
        }

        return NSLocalizedString("wallet.types.watchedWallets", bundle: bundle, comment: "")
      }

      /// en translation: We highly recommend to back up your wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func backupPromptAfterIntervalDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backup.prompt.afterInterval.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backup.prompt.afterInterval.description"
        }

        return NSLocalizedString("backup.prompt.afterInterval.description", bundle: bundle, comment: "")
      }

      /// en translation: We send an email announcing major features. Would you like to receive such emails?  (max 1 email per week)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func emailListPromptMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailList.prompt.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emailList.prompt.message"
        }

        return NSLocalizedString("emailList.prompt.message", bundle: bundle, comment: "")
      }

      /// en translation: Website
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectDappWebsite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.dapp.website", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.dapp.website"
        }

        return NSLocalizedString("walletConnect.dapp.website", bundle: bundle, comment: "")
      }

      /// en translation: Welcome
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWelcomeNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.welcome.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.welcome.navigation.title"
        }

        return NSLocalizedString("a.welcome.navigation.title", bundle: bundle, comment: "")
      }

      /// en translation: Welcome to AlphaWallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func gettingStartedSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gettingStarted.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gettingStarted.subtitle"
        }

        return NSLocalizedString("gettingStarted.subtitle", bundle: bundle, comment: "")
      }

      /// en translation: What is ETH/Ethereum?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aHelpContentsWhatIsETH(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.help.contents.whatIsETH", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.help.contents.whatIsETH"
        }

        return NSLocalizedString("a.help.contents.whatIsETH", bundle: bundle, comment: "")
      }

      /// en translation: What is Keystore JSON?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsBackupKeystoreWalletIntroductionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.backupKeystoreWallet.introduction.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.backupKeystoreWallet.introduction.title"
        }

        return NSLocalizedString("wallets.backupKeystoreWallet.introduction.title", bundle: bundle, comment: "")
      }

      /// en translation: What is Testnet?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsEnabledNetworksPromptEnableTestnetTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.enabledNetworks.promptEnableTestnet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.enabledNetworks.promptEnableTestnet.title"
        }

        return NSLocalizedString("settings.enabledNetworks.promptEnableTestnet.title", bundle: bundle, comment: "")
      }

      /// en translation: What’s new?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func whatsNew(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("whats.new", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "whats.new"
        }

        return NSLocalizedString("whats.new", bundle: bundle, comment: "")
      }

      /// en translation: Where are my Tokens?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func whereAreMyTokensTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("whereAreMyTokens.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "whereAreMyTokens.title"
        }

        return NSLocalizedString("whereAreMyTokens.title", bundle: bundle, comment: "")
      }

      /// en translation: Where are my tokens?
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func whereAreMyTokensWhereAreMyTokens(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("whereAreMyTokens.whereAreMyTokens", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "whereAreMyTokens.whereAreMyTokens"
        }

        return NSLocalizedString("whereAreMyTokens.whereAreMyTokens", bundle: bundle, comment: "")
      }

      /// en translation: Write this down, and keep it private and secure. You won't be able to restore your wallet if you lose this!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func passphraseRememberLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passphrase.remember.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "passphrase.remember.label.title"
        }

        return NSLocalizedString("passphrase.remember.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Wrong Input
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func sendErrorWrongInput(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send.error.wrongInput", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send.error.wrongInput"
        }

        return NSLocalizedString("send.error.wrongInput", bundle: bundle, comment: "")
      }

      /// en translation: Yesterday
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func yesterday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yesterday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yesterday"
        }

        return NSLocalizedString("Yesterday", bundle: bundle, comment: "")
      }

      /// en translation: You already added this address to wallets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func accountsDeleteErrorDuplicateAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.error.duplicateAccount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.error.duplicateAccount"
        }

        return NSLocalizedString("accounts.delete.error.duplicateAccount", bundle: bundle, comment: "")
      }

      /// en translation: You do not have enough ETH to import this ticket
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenFailedNotEnoughEthTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.failed.notEnoughEth.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.failed.notEnoughEth.title"
        }

        return NSLocalizedString("a.claim.token.failed.notEnoughEth.title", bundle: bundle, comment: "")
      }

      /// en translation: You do not have enough xDAI to import this ticket
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenFailedNotEnoughXDAITitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.failed.notEnoughXDAI.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.failed.notEnoughXDAI.title"
        }

        return NSLocalizedString("a.claim.token.failed.notEnoughXDAI.title", bundle: bundle, comment: "")
      }

      /// en translation: You don't have any %@ yet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func emptyTableViewWalletTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("emptyTableView.wallet.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptyTableView.wallet.title"
        }

        let format = NSLocalizedString("emptyTableView.wallet.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: You don't have any tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletNoTokens(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.wallet.no.tokens", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.no.tokens"
        }

        return NSLocalizedString("a.wallet.no.tokens", bundle: bundle, comment: "")
      }

      /// en translation: You have denied access to your wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func keystoreAccessKeyCancelled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keystore.accessKey.cancelled", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keystore.accessKey.cancelled"
        }

        return NSLocalizedString("keystore.accessKey.cancelled", bundle: bundle, comment: "")
      }

      /// en translation: You have no bookmarks displayed yet. Start by surfing the browser.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func dappBrowserMyDappsEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dappBrowser.myDapps.empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dappBrowser.myDapps.empty"
        }

        return NSLocalizedString("dappBrowser.myDapps.empty", bundle: bundle, comment: "")
      }

      /// en translation: You have not backed up your wallet yet. You have %@ USD net. Act now.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func backupPromptDescriptionWithAmount(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("backup.prompt.description.withAmount", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backup.prompt.description.withAmount"
        }

        let format = NSLocalizedString("backup.prompt.description.withAmount", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: You have not backed up your wallet yet. You have %@ USD net. Act now. 
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func backupPromptAfterHittingThresholdDescription(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("backup.prompt.afterHittingThreshold.description", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backup.prompt.afterHittingThreshold.description"
        }

        let format = NSLocalizedString("backup.prompt.afterHittingThreshold.description", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: You have received %@ %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionsReceivedEther(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("transactions.received.ether", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactions.received.ether"
        }

        let format = NSLocalizedString("transactions.received.ether", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: You have successfully redeemed your %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenRedeemSuccessfulDescription(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.redeem.successful.description", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.redeem.successful.description"
        }

        let format = NSLocalizedString("a.wallet.token.redeem.successful.description", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: You haven't received any tokens yet!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func emptyViewNoTokensLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyView.noTokens.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptyView.noTokens.label.title"
        }

        return NSLocalizedString("emptyView.noTokens.label.title", bundle: bundle, comment: "")
      }

      /// en translation: You might be sending this transaction on the wrong chain.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenTransactionConfirmationErrorDescriptionPossibleChainIdMismatchError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.transactionConfirmation.error.description.possibleChainIdMismatchError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.transactionConfirmation.error.description.possibleChainIdMismatchError"
        }

        return NSLocalizedString("token.transactionConfirmation.error.description.possibleChainIdMismatchError", bundle: bundle, comment: "")
      }

      /// en translation: You must enter the same passsword in Password and Confirm Password
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func backupPasswordConfirmationMustMatch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backupPassword.confirmation.mustMatch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backupPassword.confirmation.mustMatch"
        }

        return NSLocalizedString("backupPassword.confirmation.mustMatch", bundle: bundle, comment: "")
      }

      /// en translation: You must remember your password. We do not store your password elsewhere. KeyStore JSON file is always encrypted, otherwise whoever has it has access to your money.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func enterPasswordPasswordHeaderPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enterPassword.password.header.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enterPassword.password.header.placeholder"
        }

        return NSLocalizedString("enterPassword.password.header.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: You set a really high gas price. Please make sure this is not a mistake
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func transactionConfigurationGasPriceTooHighDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionConfiguration.gasPrice.tooHigh.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionConfiguration.gasPrice.tooHigh.description"
        }

        return NSLocalizedString("transactionConfiguration.gasPrice.tooHigh.description", bundle: bundle, comment: "")
      }

      /// en translation: You tried to connect with WalletConnect. Well.. It takes too long. Please generate a fresh QR code and try again.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletConnectErrorConnectionTimeoutErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walletConnect.error.connectionTimeout.errorMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walletConnect.error.connectionTimeout.errorMessage"
        }

        return NSLocalizedString("walletConnect.error.connectionTimeout.errorMessage", bundle: bundle, comment: "")
      }

      /// en translation: Your %@ has been transferred
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferSuccessTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.transfer.success.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.success.title"
        }

        let format = NSLocalizedString("a.wallet.token.transfer.success.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Your %@ was not transferred
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aWalletTokenTransferFailedTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.wallet.token.transfer.failed.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.wallet.token.transfer.failed.title"
        }

        let format = NSLocalizedString("a.wallet.token.transfer.failed.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Your Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsAdvancedExportJSONKeystoreFileLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.advanced.exportJSONKeystore.file.label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.advanced.exportJSONKeystore.file.label"
        }

        return NSLocalizedString("settings.advanced.exportJSONKeystore.file.label", bundle: bundle, comment: "")
      }

      /// en translation: Your Keystore JSON
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func settingsAdvancedExportJSONKeystorePasswordPasswordButtonPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.advanced.exportJSONKeystore.password.passwordButton.password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.advanced.exportJSONKeystore.password.passwordButton.password"
        }

        return NSLocalizedString("settings.advanced.exportJSONKeystore.password.passwordButton.password", bundle: bundle, comment: "")
      }

      /// en translation: Your Seed Phrase
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsShowSeedPhraseTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.showSeedPhrase.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.showSeedPhrase.title"
        }

        return NSLocalizedString("wallets.showSeedPhrase.title", bundle: bundle, comment: "")
      }

      /// en translation: Your Wallet is at risk!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func backupPromptAfterHittingThresholdTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backup.prompt.afterHittingThreshold.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backup.prompt.afterHittingThreshold.title"
        }

        return NSLocalizedString("backup.prompt.afterHittingThreshold.title", bundle: bundle, comment: "")
      }

      /// en translation: Your Wallet is not backed up!
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func backupPromptTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backup.prompt.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backup.prompt.title"
        }

        return NSLocalizedString("backup.prompt.title", bundle: bundle, comment: "")
      }

      /// en translation: Your browser history appears here.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func browserNoHistoryLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("browser.noHistory.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "browser.noHistory.label.title"
        }

        return NSLocalizedString("browser.noHistory.label.title", bundle: bundle, comment: "")
      }

      /// en translation: Your device isn't configured to send email
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func emailNotConfigured(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email.not.configured", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email.not.configured"
        }

        return NSLocalizedString("email.not.configured", bundle: bundle, comment: "")
      }

      /// en translation: Your funds will be at risk if you do not back up before using your wallet
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func onboardingNewWalletBackupWalletDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding.newWallet.backupWallet.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding.newWallet.backupWallet.description"
        }

        return NSLocalizedString("onboarding.newWallet.backupWallet.description", bundle: bundle, comment: "")
      }

      /// en translation: Your privacy settings are preventing us from accessing your camera for QR code scanning. Fix this by:  1. Tap the Open Settings button below to open the Settings app.  2. Tap to enable the Camera on.  3. Launch this app again.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func cameraQrCodeDeniedPromptMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera.qrCode.denied.prompt.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera.qrCode.denied.prompt.message"
        }

        return NSLocalizedString("camera.qrCode.denied.prompt.message", bundle: bundle, comment: "")
      }

      /// en translation: Your seed phrase (do not share with anyone)
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func walletsShowSeedPhraseSubtitle2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wallets.showSeedPhrase.subtitle2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wallets.showSeedPhrase.subtitle2"
        }

        return NSLocalizedString("wallets.showSeedPhrase.subtitle2", bundle: bundle, comment: "")
      }

      /// en translation: Your ticket has been transferred and the balance will be updated shortly
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aClaimTokenSuccessTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a.claim.token.success.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.claim.token.success.title"
        }

        return NSLocalizedString("a.claim.token.success.title", bundle: bundle, comment: "")
      }

      /// en translation: Your wallet is never saved to cloud storage or standard device backups.
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func exportNeverStoredLabelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("export.neverStored.label.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "export.neverStored.label.title"
        }

        return NSLocalizedString("export.neverStored.label.title", bundle: bundle, comment: "")
      }

      /// en translation: cryptokitties
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func katLowercase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kat.lowercase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "kat.lowercase"
        }

        return NSLocalizedString("kat.lowercase", bundle: bundle, comment: "")
      }

      /// en translation: faq
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func urlFaq(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("url.faq", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "url.faq"
        }

        return NSLocalizedString("url.faq", bundle: bundle, comment: "")
      }

      /// en translation: from %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activityFrom(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("activity.from", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.from"
        }

        let format = NSLocalizedString("activity.from", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: iCloud/Dropbox/Google Drive
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func importWalletImportAlertSheetOptionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("importWallet.import.alertSheet.option.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "importWallet.import.alertSheet.option.title"
        }

        return NSLocalizedString("importWallet.import.alertSheet.option.title", bundle: bundle, comment: "")
      }

      /// en translation: iOS Version: %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func aHelpContactEmailIosVersion(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("a.help.contact.email.iosVersion", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a.help.contact.email.iosVersion"
        }

        let format = NSLocalizedString("a.help.contact.email.iosVersion", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: ticket
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func ticketLowercase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ticket.lowercase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ticket.lowercase"
        }

        return NSLocalizedString("ticket.lowercase", bundle: bundle, comment: "")
      }

      /// en translation: tickets
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func ticketsLowercase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tickets.lowercase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tickets.lowercase"
        }

        return NSLocalizedString("tickets.lowercase", bundle: bundle, comment: "")
      }

      /// en translation: to %@
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func activityTo(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("activity.to", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity.to"
        }

        let format = NSLocalizedString("activity.to", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: token
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokenLowercase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token.lowercase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "token.lowercase"
        }

        return NSLocalizedString("token.lowercase", bundle: bundle, comment: "")
      }

      /// en translation: tokens
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func tokensLowercase(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tokens.lowercase", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tokens.lowercase"
        }

        return NSLocalizedString("tokens.lowercase", bundle: bundle, comment: "")
      }

      /// en translation: xDAI Chain
      ///
      /// Locales: en, es, zh-Hans, ja, ko, fi
      static func blockchainXDAI(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blockchain.XDAI", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blockchain.XDAI"
        }

        return NSLocalizedString("blockchain.XDAI", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _WalletCoinCollectionViewCell.validate()
    }

    struct _WalletCoinCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WalletCoinCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "WalletCoinCollectionViewCell"
      let name = "WalletCoinCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletCoinCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletCoinCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "activityFailed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'activityFailed' is used in nib 'WalletCoinCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WordCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WordCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "word"
      let name = "WordCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WordCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WordCollectionViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try wallet.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "launch_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_icon' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct wallet: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Wallet"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
